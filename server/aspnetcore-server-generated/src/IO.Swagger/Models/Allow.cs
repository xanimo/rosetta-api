/*
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Allow specifies supported Operation status, Operation types, and all possible error statuses. This Allow object is used by clients to validate the correctness of a Rosetta Server implementation. It is expected that these clients will error if they receive some response that contains any of the above information that is not specified here.
    /// </summary>
    [DataContract]
    public partial class Allow : IEquatable<Allow>
    { 
        /// <summary>
        /// All Operation.Status this implementation supports. Any status that is returned during parsing that is not listed here will cause client validation to error.
        /// </summary>
        /// <value>All Operation.Status this implementation supports. Any status that is returned during parsing that is not listed here will cause client validation to error.</value>
        [Required]
        [DataMember(Name="operation_statuses")]
        public List<OperationStatus> OperationStatuses { get; set; }

        /// <summary>
        /// All Operation.Type this implementation supports. Any type that is returned during parsing that is not listed here will cause client validation to error.
        /// </summary>
        /// <value>All Operation.Type this implementation supports. Any type that is returned during parsing that is not listed here will cause client validation to error.</value>
        [Required]
        [DataMember(Name="operation_types")]
        public List<string> OperationTypes { get; set; }

        /// <summary>
        /// All Errors that this implementation could return. Any error that is returned during parsing that is not listed here will cause client validation to error.
        /// </summary>
        /// <value>All Errors that this implementation could return. Any error that is returned during parsing that is not listed here will cause client validation to error.</value>
        [Required]
        [DataMember(Name="errors")]
        public List<Error> Errors { get; set; }

        /// <summary>
        /// Any Rosetta implementation that supports querying the balance of an account at any height in the past should set this to true.
        /// </summary>
        /// <value>Any Rosetta implementation that supports querying the balance of an account at any height in the past should set this to true.</value>
        [Required]
        [DataMember(Name="historical_balance_lookup")]
        public bool? HistoricalBalanceLookup { get; set; }

        /// <summary>
        /// If populated, &#x60;timestamp_start_index&#x60; indicates the first block index where block timestamps are considered valid (i.e. all blocks less than &#x60;timestamp_start_index&#x60; could have invalid timestamps). This is useful when the genesis block (or blocks) of a network have timestamp 0. If not populated, block timestamps are assumed to be valid for all available blocks.
        /// </summary>
        /// <value>If populated, &#x60;timestamp_start_index&#x60; indicates the first block index where block timestamps are considered valid (i.e. all blocks less than &#x60;timestamp_start_index&#x60; could have invalid timestamps). This is useful when the genesis block (or blocks) of a network have timestamp 0. If not populated, block timestamps are assumed to be valid for all available blocks.</value>
        [DataMember(Name="timestamp_start_index")]
        public long? TimestampStartIndex { get; set; }

        /// <summary>
        /// All methods that are supported by the /call endpoint. Communicating which parameters should be provided to /call is the responsibility of the implementer (this is en lieu of defining an entire type system and requiring the implementer to define that in Allow).
        /// </summary>
        /// <value>All methods that are supported by the /call endpoint. Communicating which parameters should be provided to /call is the responsibility of the implementer (this is en lieu of defining an entire type system and requiring the implementer to define that in Allow).</value>
        [Required]
        [DataMember(Name="call_methods")]
        public List<string> CallMethods { get; set; }

        /// <summary>
        /// BalanceExemptions is an array of BalanceExemption indicating which account balances could change without a corresponding Operation. BalanceExemptions should be used sparingly as they may introduce significant complexity for integrators that attempt to reconcile all account balance changes. If your implementation relies on any BalanceExemptions, you MUST implement historical balance lookup (the ability to query an account balance at any BlockIdentifier).
        /// </summary>
        /// <value>BalanceExemptions is an array of BalanceExemption indicating which account balances could change without a corresponding Operation. BalanceExemptions should be used sparingly as they may introduce significant complexity for integrators that attempt to reconcile all account balance changes. If your implementation relies on any BalanceExemptions, you MUST implement historical balance lookup (the ability to query an account balance at any BlockIdentifier).</value>
        [Required]
        [DataMember(Name="balance_exemptions")]
        public List<BalanceExemption> BalanceExemptions { get; set; }

        /// <summary>
        /// Any Rosetta implementation that can update an AccountIdentifier&#x27;s unspent coins based on the contents of the mempool should populate this field as true. If false, requests to &#x60;/account/coins&#x60; that set &#x60;include_mempool&#x60; as true will be automatically rejected.
        /// </summary>
        /// <value>Any Rosetta implementation that can update an AccountIdentifier&#x27;s unspent coins based on the contents of the mempool should populate this field as true. If false, requests to &#x60;/account/coins&#x60; that set &#x60;include_mempool&#x60; as true will be automatically rejected.</value>
        [Required]
        [DataMember(Name="mempool_coins")]
        public bool? MempoolCoins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Allow {\n");
            sb.Append("  OperationStatuses: ").Append(OperationStatuses).Append("\n");
            sb.Append("  OperationTypes: ").Append(OperationTypes).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  HistoricalBalanceLookup: ").Append(HistoricalBalanceLookup).Append("\n");
            sb.Append("  TimestampStartIndex: ").Append(TimestampStartIndex).Append("\n");
            sb.Append("  CallMethods: ").Append(CallMethods).Append("\n");
            sb.Append("  BalanceExemptions: ").Append(BalanceExemptions).Append("\n");
            sb.Append("  MempoolCoins: ").Append(MempoolCoins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Allow)obj);
        }

        /// <summary>
        /// Returns true if Allow instances are equal
        /// </summary>
        /// <param name="other">Instance of Allow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Allow other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OperationStatuses == other.OperationStatuses ||
                    OperationStatuses != null &&
                    OperationStatuses.SequenceEqual(other.OperationStatuses)
                ) && 
                (
                    OperationTypes == other.OperationTypes ||
                    OperationTypes != null &&
                    OperationTypes.SequenceEqual(other.OperationTypes)
                ) && 
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    Errors.SequenceEqual(other.Errors)
                ) && 
                (
                    HistoricalBalanceLookup == other.HistoricalBalanceLookup ||
                    HistoricalBalanceLookup != null &&
                    HistoricalBalanceLookup.Equals(other.HistoricalBalanceLookup)
                ) && 
                (
                    TimestampStartIndex == other.TimestampStartIndex ||
                    TimestampStartIndex != null &&
                    TimestampStartIndex.Equals(other.TimestampStartIndex)
                ) && 
                (
                    CallMethods == other.CallMethods ||
                    CallMethods != null &&
                    CallMethods.SequenceEqual(other.CallMethods)
                ) && 
                (
                    BalanceExemptions == other.BalanceExemptions ||
                    BalanceExemptions != null &&
                    BalanceExemptions.SequenceEqual(other.BalanceExemptions)
                ) && 
                (
                    MempoolCoins == other.MempoolCoins ||
                    MempoolCoins != null &&
                    MempoolCoins.Equals(other.MempoolCoins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OperationStatuses != null)
                    hashCode = hashCode * 59 + OperationStatuses.GetHashCode();
                    if (OperationTypes != null)
                    hashCode = hashCode * 59 + OperationTypes.GetHashCode();
                    if (Errors != null)
                    hashCode = hashCode * 59 + Errors.GetHashCode();
                    if (HistoricalBalanceLookup != null)
                    hashCode = hashCode * 59 + HistoricalBalanceLookup.GetHashCode();
                    if (TimestampStartIndex != null)
                    hashCode = hashCode * 59 + TimestampStartIndex.GetHashCode();
                    if (CallMethods != null)
                    hashCode = hashCode * 59 + CallMethods.GetHashCode();
                    if (BalanceExemptions != null)
                    hashCode = hashCode * 59 + BalanceExemptions.GetHashCode();
                    if (MempoolCoins != null)
                    hashCode = hashCode * 59 + MempoolCoins.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Allow left, Allow right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Allow left, Allow right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
