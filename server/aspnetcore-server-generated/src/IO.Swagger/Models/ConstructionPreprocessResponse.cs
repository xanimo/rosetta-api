/*
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// ConstructionPreprocessResponse contains &#x60;options&#x60; that will be sent unmodified to &#x60;/construction/metadata&#x60;. If it is not necessary to make a request to &#x60;/construction/metadata&#x60;, &#x60;options&#x60; should be omitted.  Some blockchains require the PublicKey of particular AccountIdentifiers to construct a valid transaction. To fetch these PublicKeys, populate &#x60;required_public_keys&#x60; with the AccountIdentifiers associated with the desired PublicKeys. If it is not necessary to retrieve any PublicKeys for construction, &#x60;required_public_keys&#x60; should be omitted.
    /// </summary>
    [DataContract]
    public partial class ConstructionPreprocessResponse : IEquatable<ConstructionPreprocessResponse>
    { 
        /// <summary>
        /// The options that will be sent directly to &#x60;/construction/metadata&#x60; by the caller.
        /// </summary>
        /// <value>The options that will be sent directly to &#x60;/construction/metadata&#x60; by the caller.</value>
        [DataMember(Name="options")]
        public Object Options { get; set; }

        /// <summary>
        /// Gets or Sets RequiredPublicKeys
        /// </summary>
        [DataMember(Name="required_public_keys")]
        public List<AccountIdentifier> RequiredPublicKeys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConstructionPreprocessResponse {\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  RequiredPublicKeys: ").Append(RequiredPublicKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConstructionPreprocessResponse)obj);
        }

        /// <summary>
        /// Returns true if ConstructionPreprocessResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ConstructionPreprocessResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstructionPreprocessResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Options == other.Options ||
                    Options != null &&
                    Options.Equals(other.Options)
                ) && 
                (
                    RequiredPublicKeys == other.RequiredPublicKeys ||
                    RequiredPublicKeys != null &&
                    RequiredPublicKeys.SequenceEqual(other.RequiredPublicKeys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                    if (RequiredPublicKeys != null)
                    hashCode = hashCode * 59 + RequiredPublicKeys.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConstructionPreprocessResponse left, ConstructionPreprocessResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConstructionPreprocessResponse left, ConstructionPreprocessResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
