/*
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Signature contains the payload that was signed, the public keys of the keypairs used to produce the signature, the signature (encoded in hex), and the SignatureType. PublicKey is often times not known during construction of the signing payloads but may be needed to combine signatures properly.
    /// </summary>
    [DataContract]
    public partial class Signature : IEquatable<Signature>
    { 
        /// <summary>
        /// Gets or Sets SigningPayload
        /// </summary>
        [Required]
        [DataMember(Name="signing_payload")]
        public SigningPayload SigningPayload { get; set; }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [Required]
        [DataMember(Name="public_key")]
        public PublicKey PublicKey { get; set; }

        /// <summary>
        /// Gets or Sets SignatureType
        /// </summary>
        [Required]
        [DataMember(Name="signature_type")]
        public SignatureType SignatureType { get; set; }

        /// <summary>
        /// Gets or Sets HexBytes
        /// </summary>
        [Required]
        [DataMember(Name="hex_bytes")]
        public string HexBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Signature {\n");
            sb.Append("  SigningPayload: ").Append(SigningPayload).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  SignatureType: ").Append(SignatureType).Append("\n");
            sb.Append("  HexBytes: ").Append(HexBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Signature)obj);
        }

        /// <summary>
        /// Returns true if Signature instances are equal
        /// </summary>
        /// <param name="other">Instance of Signature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Signature other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SigningPayload == other.SigningPayload ||
                    SigningPayload != null &&
                    SigningPayload.Equals(other.SigningPayload)
                ) && 
                (
                    PublicKey == other.PublicKey ||
                    PublicKey != null &&
                    PublicKey.Equals(other.PublicKey)
                ) && 
                (
                    SignatureType == other.SignatureType ||
                    SignatureType != null &&
                    SignatureType.Equals(other.SignatureType)
                ) && 
                (
                    HexBytes == other.HexBytes ||
                    HexBytes != null &&
                    HexBytes.Equals(other.HexBytes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SigningPayload != null)
                    hashCode = hashCode * 59 + SigningPayload.GetHashCode();
                    if (PublicKey != null)
                    hashCode = hashCode * 59 + PublicKey.GetHashCode();
                    if (SignatureType != null)
                    hashCode = hashCode * 59 + SignatureType.GetHashCode();
                    if (HexBytes != null)
                    hashCode = hashCode * 59 + HexBytes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Signature left, Signature right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Signature left, Signature right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
