/*
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// PublicKey contains a public key byte array for a particular CurveType encoded in hex. Note that there is no PrivateKey struct as this is NEVER the concern of an implementation.
    /// </summary>
    [DataContract]
    public partial class PublicKey : IEquatable<PublicKey>
    { 
        /// <summary>
        /// Hex-encoded public key bytes in the format specified by the CurveType.
        /// </summary>
        /// <value>Hex-encoded public key bytes in the format specified by the CurveType.</value>
        [Required]
        [DataMember(Name="hex_bytes")]
        public string HexBytes { get; set; }

        /// <summary>
        /// Gets or Sets CurveType
        /// </summary>
        [Required]
        [DataMember(Name="curve_type")]
        public CurveType CurveType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicKey {\n");
            sb.Append("  HexBytes: ").Append(HexBytes).Append("\n");
            sb.Append("  CurveType: ").Append(CurveType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PublicKey)obj);
        }

        /// <summary>
        /// Returns true if PublicKey instances are equal
        /// </summary>
        /// <param name="other">Instance of PublicKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicKey other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HexBytes == other.HexBytes ||
                    HexBytes != null &&
                    HexBytes.Equals(other.HexBytes)
                ) && 
                (
                    CurveType == other.CurveType ||
                    CurveType != null &&
                    CurveType.Equals(other.CurveType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HexBytes != null)
                    hashCode = hashCode * 59 + HexBytes.GetHashCode();
                    if (CurveType != null)
                    hashCode = hashCode * 59 + CurveType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PublicKey left, PublicKey right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PublicKey left, PublicKey right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
