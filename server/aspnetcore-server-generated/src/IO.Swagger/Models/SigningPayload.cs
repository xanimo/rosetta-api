/*
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// SigningPayload is signed by the client with the keypair associated with an AccountIdentifier using the specified SignatureType. SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload.
    /// </summary>
    [DataContract]
    public partial class SigningPayload : IEquatable<SigningPayload>
    { 
        /// <summary>
        /// [DEPRECATED by &#x60;account_identifier&#x60; in &#x60;v1.4.4&#x60;] The network-specific address of the account that should sign the payload.
        /// </summary>
        /// <value>[DEPRECATED by &#x60;account_identifier&#x60; in &#x60;v1.4.4&#x60;] The network-specific address of the account that should sign the payload.</value>
        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdentifier
        /// </summary>
        [DataMember(Name="account_identifier")]
        public AccountIdentifier AccountIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets HexBytes
        /// </summary>
        [Required]
        [DataMember(Name="hex_bytes")]
        public string HexBytes { get; set; }

        /// <summary>
        /// Gets or Sets SignatureType
        /// </summary>
        [DataMember(Name="signature_type")]
        public SignatureType SignatureType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SigningPayload {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AccountIdentifier: ").Append(AccountIdentifier).Append("\n");
            sb.Append("  HexBytes: ").Append(HexBytes).Append("\n");
            sb.Append("  SignatureType: ").Append(SignatureType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SigningPayload)obj);
        }

        /// <summary>
        /// Returns true if SigningPayload instances are equal
        /// </summary>
        /// <param name="other">Instance of SigningPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SigningPayload other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    AccountIdentifier == other.AccountIdentifier ||
                    AccountIdentifier != null &&
                    AccountIdentifier.Equals(other.AccountIdentifier)
                ) && 
                (
                    HexBytes == other.HexBytes ||
                    HexBytes != null &&
                    HexBytes.Equals(other.HexBytes)
                ) && 
                (
                    SignatureType == other.SignatureType ||
                    SignatureType != null &&
                    SignatureType.Equals(other.SignatureType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (AccountIdentifier != null)
                    hashCode = hashCode * 59 + AccountIdentifier.GetHashCode();
                    if (HexBytes != null)
                    hashCode = hashCode * 59 + HexBytes.GetHashCode();
                    if (SignatureType != null)
                    hashCode = hashCode * 59 + SignatureType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SigningPayload left, SigningPayload right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SigningPayload left, SigningPayload right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
