/*
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NetworkApiController : ControllerBase
    { 
        /// <summary>
        /// Get List of Available Networks
        /// </summary>
        /// <remarks>This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/network/list")]
        [ValidateModelState]
        [SwaggerOperation("NetworkList")]
        [SwaggerResponse(statusCode: 200, type: typeof(NetworkListResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult NetworkList([FromBody]MetadataRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NetworkListResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"network_identifiers\" : [ {\n    \"blockchain\" : \"bitcoin\",\n    \"sub_network_identifier\" : {\n      \"metadata\" : {\n        \"producer\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\"\n      },\n      \"network\" : \"shard 1\"\n    },\n    \"network\" : \"mainnet\"\n  }, {\n    \"blockchain\" : \"bitcoin\",\n    \"sub_network_identifier\" : {\n      \"metadata\" : {\n        \"producer\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\"\n      },\n      \"network\" : \"shard 1\"\n    },\n    \"network\" : \"mainnet\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<NetworkListResponse>(exampleJson)
                        : default(NetworkListResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Network Options
        /// </summary>
        /// <remarks>This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/network/options")]
        [ValidateModelState]
        [SwaggerOperation("NetworkOptions")]
        [SwaggerResponse(statusCode: 200, type: typeof(NetworkOptionsResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult NetworkOptions([FromBody]NetworkRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NetworkOptionsResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"allow\" : {\n    \"balance_exemptions\" : [ {\n      \"sub_account_address\" : \"staking\",\n      \"currency\" : {\n        \"symbol\" : \"BTC\",\n        \"metadata\" : {\n          \"Issuer\" : \"Satoshi\"\n        },\n        \"decimals\" : 8\n      },\n      \"exemption_type\" : \"greater_or_equal\"\n    }, {\n      \"sub_account_address\" : \"staking\",\n      \"currency\" : {\n        \"symbol\" : \"BTC\",\n        \"metadata\" : {\n          \"Issuer\" : \"Satoshi\"\n        },\n        \"decimals\" : 8\n      },\n      \"exemption_type\" : \"greater_or_equal\"\n    } ],\n    \"mempool_coins\" : true,\n    \"operation_types\" : [ \"TRANSFER\", \"TRANSFER\" ],\n    \"historical_balance_lookup\" : true,\n    \"operation_statuses\" : [ {\n      \"status\" : \"SUCCESS\",\n      \"successful\" : true\n    }, {\n      \"status\" : \"SUCCESS\",\n      \"successful\" : true\n    } ],\n    \"timestamp_start_index\" : 0,\n    \"call_methods\" : [ \"eth_call\", \"eth_call\" ],\n    \"errors\" : [ {\n      \"retriable\" : true,\n      \"code\" : 12,\n      \"description\" : \"This error is returned when the requested AccountIdentifier is improperly formatted.\",\n      \"details\" : {\n        \"address\" : \"0x1dcc4de8dec75d7aab85b567b6\",\n        \"error\" : \"not base64\"\n      },\n      \"message\" : \"Invalid account format\"\n    }, {\n      \"retriable\" : true,\n      \"code\" : 12,\n      \"description\" : \"This error is returned when the requested AccountIdentifier is improperly formatted.\",\n      \"details\" : {\n        \"address\" : \"0x1dcc4de8dec75d7aab85b567b6\",\n        \"error\" : \"not base64\"\n      },\n      \"message\" : \"Invalid account format\"\n    } ]\n  },\n  \"version\" : {\n    \"metadata\" : { },\n    \"rosetta_version\" : \"1.2.5\",\n    \"node_version\" : \"1.0.2\",\n    \"middleware_version\" : \"0.2.7\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<NetworkOptionsResponse>(exampleJson)
                        : default(NetworkOptionsResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Network Status
        /// </summary>
        /// <remarks>This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/network/status")]
        [ValidateModelState]
        [SwaggerOperation("NetworkStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(NetworkStatusResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult NetworkStatus([FromBody]NetworkRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NetworkStatusResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"current_block_identifier\" : {\n    \"index\" : 1123941,\n    \"hash\" : \"0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85\"\n  },\n  \"peers\" : [ {\n    \"metadata\" : { },\n    \"peer_id\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\"\n  }, {\n    \"metadata\" : { },\n    \"peer_id\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\"\n  } ],\n  \"sync_status\" : {\n    \"target_index\" : 150,\n    \"synced\" : true,\n    \"stage\" : \"header sync\",\n    \"current_index\" : 100\n  },\n  \"current_block_timestamp\" : 1582833600000\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<NetworkStatusResponse>(exampleJson)
                        : default(NetworkStatusResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
