/*
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ConstructionApiController : ControllerBase
    { 
        /// <summary>
        /// Create Network Transaction from Signatures
        /// </summary>
        /// <remarks>Combine creates a network-specific transaction from an unsigned transaction and an array of provided signatures. The signed transaction returned from this method will be sent to the &#x60;/construction/submit&#x60; endpoint by the caller.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/construction/combine")]
        [ValidateModelState]
        [SwaggerOperation("ConstructionCombine")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConstructionCombineResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult ConstructionCombine([FromBody]ConstructionCombineRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConstructionCombineResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"signed_transaction\" : \"signed_transaction\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ConstructionCombineResponse>(exampleJson)
                        : default(ConstructionCombineResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Derive an AccountIdentifier from a PublicKey
        /// </summary>
        /// <remarks>Derive returns the AccountIdentifier associated with a public key. Blockchains that require an on-chain action to create an account should not implement this method.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/construction/derive")]
        [ValidateModelState]
        [SwaggerOperation("ConstructionDerive")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConstructionDeriveResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult ConstructionDerive([FromBody]ConstructionDeriveRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConstructionDeriveResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : { },\n  \"address\" : \"address\",\n  \"account_identifier\" : {\n    \"metadata\" : { },\n    \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\",\n    \"sub_account\" : {\n      \"metadata\" : { },\n      \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n    }\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ConstructionDeriveResponse>(exampleJson)
                        : default(ConstructionDeriveResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the Hash of a Signed Transaction
        /// </summary>
        /// <remarks>TransactionHash returns the network-specific transaction hash for a signed transaction.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/construction/hash")]
        [ValidateModelState]
        [SwaggerOperation("ConstructionHash")]
        [SwaggerResponse(statusCode: 200, type: typeof(TransactionIdentifierResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult ConstructionHash([FromBody]ConstructionHashRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TransactionIdentifierResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : { },\n  \"transaction_identifier\" : {\n    \"hash\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<TransactionIdentifierResponse>(exampleJson)
                        : default(TransactionIdentifierResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Metadata for Transaction Construction
        /// </summary>
        /// <remarks>Get any information required to construct a transaction for a specific network. Metadata returned here could be a recent hash to use, an account sequence number, or even arbitrary chain state. The request used when calling this endpoint is created by calling &#x60;/construction/preprocess&#x60; in an offline environment. You should NEVER assume that the request sent to this endpoint will be created by the caller or populated with any custom parameters. This must occur in &#x60;/construction/preprocess&#x60;. It is important to clarify that this endpoint should not pre-construct any transactions for the client (this should happen in &#x60;/construction/payloads&#x60;). This endpoint is left purposely unstructured because of the wide scope of metadata that could be required.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/construction/metadata")]
        [ValidateModelState]
        [SwaggerOperation("ConstructionMetadata")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConstructionMetadataResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult ConstructionMetadata([FromBody]ConstructionMetadataRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConstructionMetadataResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : {\n    \"account_sequence\" : 23,\n    \"recent_block_hash\" : \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\"\n  },\n  \"suggested_fee\" : [ {\n    \"metadata\" : { },\n    \"currency\" : {\n      \"symbol\" : \"BTC\",\n      \"metadata\" : {\n        \"Issuer\" : \"Satoshi\"\n      },\n      \"decimals\" : 8\n    },\n    \"value\" : \"1238089899992\"\n  }, {\n    \"metadata\" : { },\n    \"currency\" : {\n      \"symbol\" : \"BTC\",\n      \"metadata\" : {\n        \"Issuer\" : \"Satoshi\"\n      },\n      \"decimals\" : 8\n    },\n    \"value\" : \"1238089899992\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ConstructionMetadataResponse>(exampleJson)
                        : default(ConstructionMetadataResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Parse a Transaction
        /// </summary>
        /// <remarks>Parse is called on both unsigned and signed transactions to understand the intent of the formulated transaction. This is run as a sanity check before signing (after &#x60;/construction/payloads&#x60;) and before broadcast (after &#x60;/construction/combine&#x60;). </remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/construction/parse")]
        [ValidateModelState]
        [SwaggerOperation("ConstructionParse")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConstructionParseResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult ConstructionParse([FromBody]ConstructionParseRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConstructionParseResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"signers\" : [ \"signers\", \"signers\" ],\n  \"metadata\" : { },\n  \"operations\" : [ {\n    \"amount\" : {\n      \"metadata\" : { },\n      \"currency\" : {\n        \"symbol\" : \"BTC\",\n        \"metadata\" : {\n          \"Issuer\" : \"Satoshi\"\n        },\n        \"decimals\" : 8\n      },\n      \"value\" : \"1238089899992\"\n    },\n    \"metadata\" : {\n      \"asm\" : \"304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01 03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\",\n      \"hex\" : \"48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\"\n    },\n    \"related_operations\" : [ {\n      \"index\" : 1\n    }, {\n      \"index\" : 2\n    } ],\n    \"type\" : \"Transfer\",\n    \"coin_change\" : {\n      \"coin_identifier\" : {\n        \"identifier\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\"\n      },\n      \"coin_action\" : \"coin_created\"\n    },\n    \"account\" : {\n      \"metadata\" : { },\n      \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\",\n      \"sub_account\" : {\n        \"metadata\" : { },\n        \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n      }\n    },\n    \"operation_identifier\" : {\n      \"index\" : 5,\n      \"network_index\" : 0\n    },\n    \"status\" : \"Reverted\"\n  }, {\n    \"amount\" : {\n      \"metadata\" : { },\n      \"currency\" : {\n        \"symbol\" : \"BTC\",\n        \"metadata\" : {\n          \"Issuer\" : \"Satoshi\"\n        },\n        \"decimals\" : 8\n      },\n      \"value\" : \"1238089899992\"\n    },\n    \"metadata\" : {\n      \"asm\" : \"304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd01 03301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\",\n      \"hex\" : \"48304502201fd8abb11443f8b1b9a04e0495e0543d05611473a790c8939f089d073f90509a022100f4677825136605d732e2126d09a2d38c20c75946cd9fc239c0497e84c634e3dd012103301a8259a12e35694cc22ebc45fee635f4993064190f6ce96e7fb19a03bb6be2\"\n    },\n    \"related_operations\" : [ {\n      \"index\" : 1\n    }, {\n      \"index\" : 2\n    } ],\n    \"type\" : \"Transfer\",\n    \"coin_change\" : {\n      \"coin_identifier\" : {\n        \"identifier\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1\"\n      },\n      \"coin_action\" : \"coin_created\"\n    },\n    \"account\" : {\n      \"metadata\" : { },\n      \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\",\n      \"sub_account\" : {\n        \"metadata\" : { },\n        \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n      }\n    },\n    \"operation_identifier\" : {\n      \"index\" : 5,\n      \"network_index\" : 0\n    },\n    \"status\" : \"Reverted\"\n  } ],\n  \"account_identifier_signers\" : [ {\n    \"metadata\" : { },\n    \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\",\n    \"sub_account\" : {\n      \"metadata\" : { },\n      \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n    }\n  }, {\n    \"metadata\" : { },\n    \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\",\n    \"sub_account\" : {\n      \"metadata\" : { },\n      \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n    }\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ConstructionParseResponse>(exampleJson)
                        : default(ConstructionParseResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Generate an Unsigned Transaction and Signing Payloads
        /// </summary>
        /// <remarks>Payloads is called with an array of operations and the response from &#x60;/construction/metadata&#x60;. It returns an unsigned transaction blob and a collection of payloads that must be signed by particular AccountIdentifiers using a certain SignatureType. The array of operations provided in transaction construction often times can not specify all \&quot;effects\&quot; of a transaction (consider invoked transactions in Ethereum). However, they can deterministically specify the \&quot;intent\&quot; of the transaction, which is sufficient for construction. For this reason, parsing the corresponding transaction in the Data API (when it lands on chain) will contain a superset of whatever operations were provided during construction.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/construction/payloads")]
        [ValidateModelState]
        [SwaggerOperation("ConstructionPayloads")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConstructionPayloadsResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult ConstructionPayloads([FromBody]ConstructionPayloadsRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConstructionPayloadsResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"unsigned_transaction\" : \"unsigned_transaction\",\n  \"payloads\" : [ {\n    \"address\" : \"address\",\n    \"account_identifier\" : {\n      \"metadata\" : { },\n      \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\",\n      \"sub_account\" : {\n        \"metadata\" : { },\n        \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n      }\n    },\n    \"hex_bytes\" : \"hex_bytes\",\n    \"signature_type\" : \"ecdsa\"\n  }, {\n    \"address\" : \"address\",\n    \"account_identifier\" : {\n      \"metadata\" : { },\n      \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\",\n      \"sub_account\" : {\n        \"metadata\" : { },\n        \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n      }\n    },\n    \"hex_bytes\" : \"hex_bytes\",\n    \"signature_type\" : \"ecdsa\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ConstructionPayloadsResponse>(exampleJson)
                        : default(ConstructionPayloadsResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a Request to Fetch Metadata
        /// </summary>
        /// <remarks>Preprocess is called prior to &#x60;/construction/payloads&#x60; to construct a request for any metadata that is needed for transaction construction given (i.e. account nonce). The &#x60;options&#x60; object returned from this endpoint will be sent to the &#x60;/construction/metadata&#x60; endpoint UNMODIFIED by the caller (in an offline execution environment). If your Construction API implementation has configuration options, they MUST be specified in the &#x60;/construction/preprocess&#x60; request (in the &#x60;metadata&#x60; field).</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/construction/preprocess")]
        [ValidateModelState]
        [SwaggerOperation("ConstructionPreprocess")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConstructionPreprocessResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult ConstructionPreprocess([FromBody]ConstructionPreprocessRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConstructionPreprocessResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"options\" : { },\n  \"required_public_keys\" : [ {\n    \"metadata\" : { },\n    \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\",\n    \"sub_account\" : {\n      \"metadata\" : { },\n      \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n    }\n  }, {\n    \"metadata\" : { },\n    \"address\" : \"0x3a065000ab4183c6bf581dc1e55a605455fc6d61\",\n    \"sub_account\" : {\n      \"metadata\" : { },\n      \"address\" : \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n    }\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ConstructionPreprocessResponse>(exampleJson)
                        : default(ConstructionPreprocessResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Submit a Signed Transaction
        /// </summary>
        /// <remarks>Submit a pre-signed transaction to the node. This call should not block on the transaction being included in a block. Rather, it should return immediately with an indication of whether or not the transaction was included in the mempool. The transaction submission response should only return a 200 status if the submitted transaction could be included in the mempool. Otherwise, it should return an error.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/construction/submit")]
        [ValidateModelState]
        [SwaggerOperation("ConstructionSubmit")]
        [SwaggerResponse(statusCode: 200, type: typeof(TransactionIdentifierResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult ConstructionSubmit([FromBody]ConstructionSubmitRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TransactionIdentifierResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : { },\n  \"transaction_identifier\" : {\n    \"hash\" : \"0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<TransactionIdentifierResponse>(exampleJson)
                        : default(TransactionIdentifierResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
