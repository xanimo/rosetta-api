/*
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CallApiController : ControllerBase
    { 
        /// <summary>
        /// Make a Network-Specific Procedure Call
        /// </summary>
        /// <remarks>Call invokes an arbitrary, network-specific procedure call with network-specific parameters. The guidance for what this endpoint should or could do is purposely left vague. In Ethereum, this could be used to invoke &#x60;eth_call&#x60; to implement an entire Rosetta API interface for some smart contract that is not parsed by the implementation creator (like a DEX). This endpoint could also be used to provide access to data that does not map to any Rosetta models instead of requiring an integrator to use some network-specific SDK and call some network-specific endpoint (like surfacing staking parameters). Call is NOT a replacement for implementing Rosetta API endpoints or mapping network-specific data to Rosetta models. Rather, it enables developers to build additional Rosetta API interfaces for things they care about without introducing complexity into a base-level Rosetta implementation. Simply put, imagine that the average integrator will use layered Rosetta API implementations that each surfaces unique data.</remarks>
        /// <param name="body"></param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="500">unexpected error</response>
        [HttpPost]
        [Route("/call")]
        [ValidateModelState]
        [SwaggerOperation("Call")]
        [SwaggerResponse(statusCode: 200, type: typeof(CallResponse), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult Call([FromBody]CallRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CallResponse));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"count\" : 1000\n  },\n  \"idempotent\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<CallResponse>(exampleJson)
                        : default(CallResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
