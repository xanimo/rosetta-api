# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.allow import Allow  # noqa: F401,E501
from swagger_server.models.version import Version  # noqa: F401,E501
from swagger_server import util


class NetworkOptionsResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, version: Version=None, allow: Allow=None):  # noqa: E501
        """NetworkOptionsResponse - a model defined in Swagger

        :param version: The version of this NetworkOptionsResponse.  # noqa: E501
        :type version: Version
        :param allow: The allow of this NetworkOptionsResponse.  # noqa: E501
        :type allow: Allow
        """
        self.swagger_types = {
            'version': Version,
            'allow': Allow
        }

        self.attribute_map = {
            'version': 'version',
            'allow': 'allow'
        }
        self._version = version
        self._allow = allow

    @classmethod
    def from_dict(cls, dikt) -> 'NetworkOptionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NetworkOptionsResponse of this NetworkOptionsResponse.  # noqa: E501
        :rtype: NetworkOptionsResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self) -> Version:
        """Gets the version of this NetworkOptionsResponse.


        :return: The version of this NetworkOptionsResponse.
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version: Version):
        """Sets the version of this NetworkOptionsResponse.


        :param version: The version of this NetworkOptionsResponse.
        :type version: Version
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def allow(self) -> Allow:
        """Gets the allow of this NetworkOptionsResponse.


        :return: The allow of this NetworkOptionsResponse.
        :rtype: Allow
        """
        return self._allow

    @allow.setter
    def allow(self, allow: Allow):
        """Sets the allow of this NetworkOptionsResponse.


        :param allow: The allow of this NetworkOptionsResponse.
        :type allow: Allow
        """
        if allow is None:
            raise ValueError("Invalid value for `allow`, must not be `None`")  # noqa: E501

        self._allow = allow
