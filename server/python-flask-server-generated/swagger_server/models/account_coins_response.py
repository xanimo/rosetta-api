# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.block_identifier import BlockIdentifier  # noqa: F401,E501
from swagger_server.models.coin import Coin  # noqa: F401,E501
from swagger_server import util


class AccountCoinsResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, block_identifier: BlockIdentifier=None, coins: List[Coin]=None, metadata: object=None):  # noqa: E501
        """AccountCoinsResponse - a model defined in Swagger

        :param block_identifier: The block_identifier of this AccountCoinsResponse.  # noqa: E501
        :type block_identifier: BlockIdentifier
        :param coins: The coins of this AccountCoinsResponse.  # noqa: E501
        :type coins: List[Coin]
        :param metadata: The metadata of this AccountCoinsResponse.  # noqa: E501
        :type metadata: object
        """
        self.swagger_types = {
            'block_identifier': BlockIdentifier,
            'coins': List[Coin],
            'metadata': object
        }

        self.attribute_map = {
            'block_identifier': 'block_identifier',
            'coins': 'coins',
            'metadata': 'metadata'
        }
        self._block_identifier = block_identifier
        self._coins = coins
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'AccountCoinsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountCoinsResponse of this AccountCoinsResponse.  # noqa: E501
        :rtype: AccountCoinsResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_identifier(self) -> BlockIdentifier:
        """Gets the block_identifier of this AccountCoinsResponse.


        :return: The block_identifier of this AccountCoinsResponse.
        :rtype: BlockIdentifier
        """
        return self._block_identifier

    @block_identifier.setter
    def block_identifier(self, block_identifier: BlockIdentifier):
        """Sets the block_identifier of this AccountCoinsResponse.


        :param block_identifier: The block_identifier of this AccountCoinsResponse.
        :type block_identifier: BlockIdentifier
        """
        if block_identifier is None:
            raise ValueError("Invalid value for `block_identifier`, must not be `None`")  # noqa: E501

        self._block_identifier = block_identifier

    @property
    def coins(self) -> List[Coin]:
        """Gets the coins of this AccountCoinsResponse.

        If a blockchain is UTXO-based, all unspent Coins owned by an account_identifier should be returned alongside the balance. It is highly recommended to populate this field so that users of the Rosetta API implementation don't need to maintain their own indexer to track their UTXOs.  # noqa: E501

        :return: The coins of this AccountCoinsResponse.
        :rtype: List[Coin]
        """
        return self._coins

    @coins.setter
    def coins(self, coins: List[Coin]):
        """Sets the coins of this AccountCoinsResponse.

        If a blockchain is UTXO-based, all unspent Coins owned by an account_identifier should be returned alongside the balance. It is highly recommended to populate this field so that users of the Rosetta API implementation don't need to maintain their own indexer to track their UTXOs.  # noqa: E501

        :param coins: The coins of this AccountCoinsResponse.
        :type coins: List[Coin]
        """
        if coins is None:
            raise ValueError("Invalid value for `coins`, must not be `None`")  # noqa: E501

        self._coins = coins

    @property
    def metadata(self) -> object:
        """Gets the metadata of this AccountCoinsResponse.

        Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.  # noqa: E501

        :return: The metadata of this AccountCoinsResponse.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this AccountCoinsResponse.

        Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.  # noqa: E501

        :param metadata: The metadata of this AccountCoinsResponse.
        :type metadata: object
        """

        self._metadata = metadata
