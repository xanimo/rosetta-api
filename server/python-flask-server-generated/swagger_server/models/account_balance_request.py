# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_identifier import AccountIdentifier  # noqa: F401,E501
from swagger_server.models.currency import Currency  # noqa: F401,E501
from swagger_server.models.network_identifier import NetworkIdentifier  # noqa: F401,E501
from swagger_server.models.partial_block_identifier import PartialBlockIdentifier  # noqa: F401,E501
from swagger_server import util


class AccountBalanceRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, network_identifier: NetworkIdentifier=None, account_identifier: AccountIdentifier=None, block_identifier: PartialBlockIdentifier=None, currencies: List[Currency]=None):  # noqa: E501
        """AccountBalanceRequest - a model defined in Swagger

        :param network_identifier: The network_identifier of this AccountBalanceRequest.  # noqa: E501
        :type network_identifier: NetworkIdentifier
        :param account_identifier: The account_identifier of this AccountBalanceRequest.  # noqa: E501
        :type account_identifier: AccountIdentifier
        :param block_identifier: The block_identifier of this AccountBalanceRequest.  # noqa: E501
        :type block_identifier: PartialBlockIdentifier
        :param currencies: The currencies of this AccountBalanceRequest.  # noqa: E501
        :type currencies: List[Currency]
        """
        self.swagger_types = {
            'network_identifier': NetworkIdentifier,
            'account_identifier': AccountIdentifier,
            'block_identifier': PartialBlockIdentifier,
            'currencies': List[Currency]
        }

        self.attribute_map = {
            'network_identifier': 'network_identifier',
            'account_identifier': 'account_identifier',
            'block_identifier': 'block_identifier',
            'currencies': 'currencies'
        }
        self._network_identifier = network_identifier
        self._account_identifier = account_identifier
        self._block_identifier = block_identifier
        self._currencies = currencies

    @classmethod
    def from_dict(cls, dikt) -> 'AccountBalanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountBalanceRequest of this AccountBalanceRequest.  # noqa: E501
        :rtype: AccountBalanceRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_identifier(self) -> NetworkIdentifier:
        """Gets the network_identifier of this AccountBalanceRequest.


        :return: The network_identifier of this AccountBalanceRequest.
        :rtype: NetworkIdentifier
        """
        return self._network_identifier

    @network_identifier.setter
    def network_identifier(self, network_identifier: NetworkIdentifier):
        """Sets the network_identifier of this AccountBalanceRequest.


        :param network_identifier: The network_identifier of this AccountBalanceRequest.
        :type network_identifier: NetworkIdentifier
        """
        if network_identifier is None:
            raise ValueError("Invalid value for `network_identifier`, must not be `None`")  # noqa: E501

        self._network_identifier = network_identifier

    @property
    def account_identifier(self) -> AccountIdentifier:
        """Gets the account_identifier of this AccountBalanceRequest.


        :return: The account_identifier of this AccountBalanceRequest.
        :rtype: AccountIdentifier
        """
        return self._account_identifier

    @account_identifier.setter
    def account_identifier(self, account_identifier: AccountIdentifier):
        """Sets the account_identifier of this AccountBalanceRequest.


        :param account_identifier: The account_identifier of this AccountBalanceRequest.
        :type account_identifier: AccountIdentifier
        """
        if account_identifier is None:
            raise ValueError("Invalid value for `account_identifier`, must not be `None`")  # noqa: E501

        self._account_identifier = account_identifier

    @property
    def block_identifier(self) -> PartialBlockIdentifier:
        """Gets the block_identifier of this AccountBalanceRequest.


        :return: The block_identifier of this AccountBalanceRequest.
        :rtype: PartialBlockIdentifier
        """
        return self._block_identifier

    @block_identifier.setter
    def block_identifier(self, block_identifier: PartialBlockIdentifier):
        """Sets the block_identifier of this AccountBalanceRequest.


        :param block_identifier: The block_identifier of this AccountBalanceRequest.
        :type block_identifier: PartialBlockIdentifier
        """

        self._block_identifier = block_identifier

    @property
    def currencies(self) -> List[Currency]:
        """Gets the currencies of this AccountBalanceRequest.

        In some cases, the caller may not want to retrieve all available balances for an AccountIdentifier. If the currencies field is populated, only balances for the specified currencies will be returned. If not populated, all available balances will be returned.  # noqa: E501

        :return: The currencies of this AccountBalanceRequest.
        :rtype: List[Currency]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies: List[Currency]):
        """Sets the currencies of this AccountBalanceRequest.

        In some cases, the caller may not want to retrieve all available balances for an AccountIdentifier. If the currencies field is populated, only balances for the specified currencies will be returned. If not populated, all available balances will be returned.  # noqa: E501

        :param currencies: The currencies of this AccountBalanceRequest.
        :type currencies: List[Currency]
        """

        self._currencies = currencies
