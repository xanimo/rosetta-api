# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.amount import Amount  # noqa: F401,E501
from swagger_server.models.coin_identifier import CoinIdentifier  # noqa: F401,E501
from swagger_server import util


class Coin(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, coin_identifier: CoinIdentifier=None, amount: Amount=None):  # noqa: E501
        """Coin - a model defined in Swagger

        :param coin_identifier: The coin_identifier of this Coin.  # noqa: E501
        :type coin_identifier: CoinIdentifier
        :param amount: The amount of this Coin.  # noqa: E501
        :type amount: Amount
        """
        self.swagger_types = {
            'coin_identifier': CoinIdentifier,
            'amount': Amount
        }

        self.attribute_map = {
            'coin_identifier': 'coin_identifier',
            'amount': 'amount'
        }
        self._coin_identifier = coin_identifier
        self._amount = amount

    @classmethod
    def from_dict(cls, dikt) -> 'Coin':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Coin of this Coin.  # noqa: E501
        :rtype: Coin
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coin_identifier(self) -> CoinIdentifier:
        """Gets the coin_identifier of this Coin.


        :return: The coin_identifier of this Coin.
        :rtype: CoinIdentifier
        """
        return self._coin_identifier

    @coin_identifier.setter
    def coin_identifier(self, coin_identifier: CoinIdentifier):
        """Sets the coin_identifier of this Coin.


        :param coin_identifier: The coin_identifier of this Coin.
        :type coin_identifier: CoinIdentifier
        """
        if coin_identifier is None:
            raise ValueError("Invalid value for `coin_identifier`, must not be `None`")  # noqa: E501

        self._coin_identifier = coin_identifier

    @property
    def amount(self) -> Amount:
        """Gets the amount of this Coin.


        :return: The amount of this Coin.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount: Amount):
        """Sets the amount of this Coin.


        :param amount: The amount of this Coin.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount
