# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.amount import Amount  # noqa: F401,E501
from swagger_server.models.network_identifier import NetworkIdentifier  # noqa: F401,E501
from swagger_server.models.operation import Operation  # noqa: F401,E501
from swagger_server import util


class ConstructionPreprocessRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, network_identifier: NetworkIdentifier=None, operations: List[Operation]=None, metadata: object=None, max_fee: List[Amount]=None, suggested_fee_multiplier: float=None):  # noqa: E501
        """ConstructionPreprocessRequest - a model defined in Swagger

        :param network_identifier: The network_identifier of this ConstructionPreprocessRequest.  # noqa: E501
        :type network_identifier: NetworkIdentifier
        :param operations: The operations of this ConstructionPreprocessRequest.  # noqa: E501
        :type operations: List[Operation]
        :param metadata: The metadata of this ConstructionPreprocessRequest.  # noqa: E501
        :type metadata: object
        :param max_fee: The max_fee of this ConstructionPreprocessRequest.  # noqa: E501
        :type max_fee: List[Amount]
        :param suggested_fee_multiplier: The suggested_fee_multiplier of this ConstructionPreprocessRequest.  # noqa: E501
        :type suggested_fee_multiplier: float
        """
        self.swagger_types = {
            'network_identifier': NetworkIdentifier,
            'operations': List[Operation],
            'metadata': object,
            'max_fee': List[Amount],
            'suggested_fee_multiplier': float
        }

        self.attribute_map = {
            'network_identifier': 'network_identifier',
            'operations': 'operations',
            'metadata': 'metadata',
            'max_fee': 'max_fee',
            'suggested_fee_multiplier': 'suggested_fee_multiplier'
        }
        self._network_identifier = network_identifier
        self._operations = operations
        self._metadata = metadata
        self._max_fee = max_fee
        self._suggested_fee_multiplier = suggested_fee_multiplier

    @classmethod
    def from_dict(cls, dikt) -> 'ConstructionPreprocessRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConstructionPreprocessRequest of this ConstructionPreprocessRequest.  # noqa: E501
        :rtype: ConstructionPreprocessRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_identifier(self) -> NetworkIdentifier:
        """Gets the network_identifier of this ConstructionPreprocessRequest.


        :return: The network_identifier of this ConstructionPreprocessRequest.
        :rtype: NetworkIdentifier
        """
        return self._network_identifier

    @network_identifier.setter
    def network_identifier(self, network_identifier: NetworkIdentifier):
        """Sets the network_identifier of this ConstructionPreprocessRequest.


        :param network_identifier: The network_identifier of this ConstructionPreprocessRequest.
        :type network_identifier: NetworkIdentifier
        """
        if network_identifier is None:
            raise ValueError("Invalid value for `network_identifier`, must not be `None`")  # noqa: E501

        self._network_identifier = network_identifier

    @property
    def operations(self) -> List[Operation]:
        """Gets the operations of this ConstructionPreprocessRequest.


        :return: The operations of this ConstructionPreprocessRequest.
        :rtype: List[Operation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations: List[Operation]):
        """Sets the operations of this ConstructionPreprocessRequest.


        :param operations: The operations of this ConstructionPreprocessRequest.
        :type operations: List[Operation]
        """
        if operations is None:
            raise ValueError("Invalid value for `operations`, must not be `None`")  # noqa: E501

        self._operations = operations

    @property
    def metadata(self) -> object:
        """Gets the metadata of this ConstructionPreprocessRequest.


        :return: The metadata of this ConstructionPreprocessRequest.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this ConstructionPreprocessRequest.


        :param metadata: The metadata of this ConstructionPreprocessRequest.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def max_fee(self) -> List[Amount]:
        """Gets the max_fee of this ConstructionPreprocessRequest.


        :return: The max_fee of this ConstructionPreprocessRequest.
        :rtype: List[Amount]
        """
        return self._max_fee

    @max_fee.setter
    def max_fee(self, max_fee: List[Amount]):
        """Sets the max_fee of this ConstructionPreprocessRequest.


        :param max_fee: The max_fee of this ConstructionPreprocessRequest.
        :type max_fee: List[Amount]
        """

        self._max_fee = max_fee

    @property
    def suggested_fee_multiplier(self) -> float:
        """Gets the suggested_fee_multiplier of this ConstructionPreprocessRequest.


        :return: The suggested_fee_multiplier of this ConstructionPreprocessRequest.
        :rtype: float
        """
        return self._suggested_fee_multiplier

    @suggested_fee_multiplier.setter
    def suggested_fee_multiplier(self, suggested_fee_multiplier: float):
        """Sets the suggested_fee_multiplier of this ConstructionPreprocessRequest.


        :param suggested_fee_multiplier: The suggested_fee_multiplier of this ConstructionPreprocessRequest.
        :type suggested_fee_multiplier: float
        """

        self._suggested_fee_multiplier = suggested_fee_multiplier
