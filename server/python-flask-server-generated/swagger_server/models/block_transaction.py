# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.block_identifier import BlockIdentifier  # noqa: F401,E501
from swagger_server.models.transaction import Transaction  # noqa: F401,E501
from swagger_server import util


class BlockTransaction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, block_identifier: BlockIdentifier=None, transaction: Transaction=None):  # noqa: E501
        """BlockTransaction - a model defined in Swagger

        :param block_identifier: The block_identifier of this BlockTransaction.  # noqa: E501
        :type block_identifier: BlockIdentifier
        :param transaction: The transaction of this BlockTransaction.  # noqa: E501
        :type transaction: Transaction
        """
        self.swagger_types = {
            'block_identifier': BlockIdentifier,
            'transaction': Transaction
        }

        self.attribute_map = {
            'block_identifier': 'block_identifier',
            'transaction': 'transaction'
        }
        self._block_identifier = block_identifier
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt) -> 'BlockTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BlockTransaction of this BlockTransaction.  # noqa: E501
        :rtype: BlockTransaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_identifier(self) -> BlockIdentifier:
        """Gets the block_identifier of this BlockTransaction.


        :return: The block_identifier of this BlockTransaction.
        :rtype: BlockIdentifier
        """
        return self._block_identifier

    @block_identifier.setter
    def block_identifier(self, block_identifier: BlockIdentifier):
        """Sets the block_identifier of this BlockTransaction.


        :param block_identifier: The block_identifier of this BlockTransaction.
        :type block_identifier: BlockIdentifier
        """
        if block_identifier is None:
            raise ValueError("Invalid value for `block_identifier`, must not be `None`")  # noqa: E501

        self._block_identifier = block_identifier

    @property
    def transaction(self) -> Transaction:
        """Gets the transaction of this BlockTransaction.


        :return: The transaction of this BlockTransaction.
        :rtype: Transaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction: Transaction):
        """Sets the transaction of this BlockTransaction.


        :param transaction: The transaction of this BlockTransaction.
        :type transaction: Transaction
        """
        if transaction is None:
            raise ValueError("Invalid value for `transaction`, must not be `None`")  # noqa: E501

        self._transaction = transaction
