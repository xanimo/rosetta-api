# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Currency(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, symbol: str=None, decimals: int=None, metadata: object=None):  # noqa: E501
        """Currency - a model defined in Swagger

        :param symbol: The symbol of this Currency.  # noqa: E501
        :type symbol: str
        :param decimals: The decimals of this Currency.  # noqa: E501
        :type decimals: int
        :param metadata: The metadata of this Currency.  # noqa: E501
        :type metadata: object
        """
        self.swagger_types = {
            'symbol': str,
            'decimals': int,
            'metadata': object
        }

        self.attribute_map = {
            'symbol': 'symbol',
            'decimals': 'decimals',
            'metadata': 'metadata'
        }
        self._symbol = symbol
        self._decimals = decimals
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Currency of this Currency.  # noqa: E501
        :rtype: Currency
        """
        return util.deserialize_model(dikt, cls)

    @property
    def symbol(self) -> str:
        """Gets the symbol of this Currency.

        Canonical symbol associated with a currency.  # noqa: E501

        :return: The symbol of this Currency.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this Currency.

        Canonical symbol associated with a currency.  # noqa: E501

        :param symbol: The symbol of this Currency.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def decimals(self) -> int:
        """Gets the decimals of this Currency.

        Number of decimal places in the standard unit representation of the amount. For example, BTC has 8 decimals. Note that it is not possible to represent the value of some currency in atomic units that is not base 10.  # noqa: E501

        :return: The decimals of this Currency.
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals: int):
        """Sets the decimals of this Currency.

        Number of decimal places in the standard unit representation of the amount. For example, BTC has 8 decimals. Note that it is not possible to represent the value of some currency in atomic units that is not base 10.  # noqa: E501

        :param decimals: The decimals of this Currency.
        :type decimals: int
        """
        if decimals is None:
            raise ValueError("Invalid value for `decimals`, must not be `None`")  # noqa: E501

        self._decimals = decimals

    @property
    def metadata(self) -> object:
        """Gets the metadata of this Currency.

        Any additional information related to the currency itself. For example, it would be useful to populate this object with the contract address of an ERC-20 token.  # noqa: E501

        :return: The metadata of this Currency.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this Currency.

        Any additional information related to the currency itself. For example, it would be useful to populate this object with the contract address of an ERC-20 token.  # noqa: E501

        :param metadata: The metadata of this Currency.
        :type metadata: object
        """

        self._metadata = metadata
