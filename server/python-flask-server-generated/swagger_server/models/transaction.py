# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.operation import Operation  # noqa: F401,E501
from swagger_server.models.related_transaction import RelatedTransaction  # noqa: F401,E501
from swagger_server.models.transaction_identifier import TransactionIdentifier  # noqa: F401,E501
from swagger_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, transaction_identifier: TransactionIdentifier=None, operations: List[Operation]=None, related_transactions: List[RelatedTransaction]=None, metadata: object=None):  # noqa: E501
        """Transaction - a model defined in Swagger

        :param transaction_identifier: The transaction_identifier of this Transaction.  # noqa: E501
        :type transaction_identifier: TransactionIdentifier
        :param operations: The operations of this Transaction.  # noqa: E501
        :type operations: List[Operation]
        :param related_transactions: The related_transactions of this Transaction.  # noqa: E501
        :type related_transactions: List[RelatedTransaction]
        :param metadata: The metadata of this Transaction.  # noqa: E501
        :type metadata: object
        """
        self.swagger_types = {
            'transaction_identifier': TransactionIdentifier,
            'operations': List[Operation],
            'related_transactions': List[RelatedTransaction],
            'metadata': object
        }

        self.attribute_map = {
            'transaction_identifier': 'transaction_identifier',
            'operations': 'operations',
            'related_transactions': 'related_transactions',
            'metadata': 'metadata'
        }
        self._transaction_identifier = transaction_identifier
        self._operations = operations
        self._related_transactions = related_transactions
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transaction of this Transaction.  # noqa: E501
        :rtype: Transaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_identifier(self) -> TransactionIdentifier:
        """Gets the transaction_identifier of this Transaction.


        :return: The transaction_identifier of this Transaction.
        :rtype: TransactionIdentifier
        """
        return self._transaction_identifier

    @transaction_identifier.setter
    def transaction_identifier(self, transaction_identifier: TransactionIdentifier):
        """Sets the transaction_identifier of this Transaction.


        :param transaction_identifier: The transaction_identifier of this Transaction.
        :type transaction_identifier: TransactionIdentifier
        """
        if transaction_identifier is None:
            raise ValueError("Invalid value for `transaction_identifier`, must not be `None`")  # noqa: E501

        self._transaction_identifier = transaction_identifier

    @property
    def operations(self) -> List[Operation]:
        """Gets the operations of this Transaction.


        :return: The operations of this Transaction.
        :rtype: List[Operation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations: List[Operation]):
        """Sets the operations of this Transaction.


        :param operations: The operations of this Transaction.
        :type operations: List[Operation]
        """
        if operations is None:
            raise ValueError("Invalid value for `operations`, must not be `None`")  # noqa: E501

        self._operations = operations

    @property
    def related_transactions(self) -> List[RelatedTransaction]:
        """Gets the related_transactions of this Transaction.


        :return: The related_transactions of this Transaction.
        :rtype: List[RelatedTransaction]
        """
        return self._related_transactions

    @related_transactions.setter
    def related_transactions(self, related_transactions: List[RelatedTransaction]):
        """Sets the related_transactions of this Transaction.


        :param related_transactions: The related_transactions of this Transaction.
        :type related_transactions: List[RelatedTransaction]
        """

        self._related_transactions = related_transactions

    @property
    def metadata(self) -> object:
        """Gets the metadata of this Transaction.

        Transactions that are related to other transactions (like a cross-shard transaction) should include the tranaction_identifier of these transactions in the metadata.  # noqa: E501

        :return: The metadata of this Transaction.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this Transaction.

        Transactions that are related to other transactions (like a cross-shard transaction) should include the tranaction_identifier of these transactions in the metadata.  # noqa: E501

        :param metadata: The metadata of this Transaction.
        :type metadata: object
        """

        self._metadata = metadata
