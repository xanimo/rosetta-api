# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_identifier import AccountIdentifier  # noqa: F401,E501
from swagger_server.models.coin_identifier import CoinIdentifier  # noqa: F401,E501
from swagger_server.models.currency import Currency  # noqa: F401,E501
from swagger_server.models.network_identifier import NetworkIdentifier  # noqa: F401,E501
from swagger_server.models.operator import Operator  # noqa: F401,E501
from swagger_server.models.transaction_identifier import TransactionIdentifier  # noqa: F401,E501
from swagger_server import util


class SearchTransactionsRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, network_identifier: NetworkIdentifier=None, operator: Operator=None, max_block: int=None, offset: int=None, limit: int=None, transaction_identifier: TransactionIdentifier=None, account_identifier: AccountIdentifier=None, coin_identifier: CoinIdentifier=None, currency: Currency=None, status: str=None, type: str=None, address: str=None, success: bool=None):  # noqa: E501
        """SearchTransactionsRequest - a model defined in Swagger

        :param network_identifier: The network_identifier of this SearchTransactionsRequest.  # noqa: E501
        :type network_identifier: NetworkIdentifier
        :param operator: The operator of this SearchTransactionsRequest.  # noqa: E501
        :type operator: Operator
        :param max_block: The max_block of this SearchTransactionsRequest.  # noqa: E501
        :type max_block: int
        :param offset: The offset of this SearchTransactionsRequest.  # noqa: E501
        :type offset: int
        :param limit: The limit of this SearchTransactionsRequest.  # noqa: E501
        :type limit: int
        :param transaction_identifier: The transaction_identifier of this SearchTransactionsRequest.  # noqa: E501
        :type transaction_identifier: TransactionIdentifier
        :param account_identifier: The account_identifier of this SearchTransactionsRequest.  # noqa: E501
        :type account_identifier: AccountIdentifier
        :param coin_identifier: The coin_identifier of this SearchTransactionsRequest.  # noqa: E501
        :type coin_identifier: CoinIdentifier
        :param currency: The currency of this SearchTransactionsRequest.  # noqa: E501
        :type currency: Currency
        :param status: The status of this SearchTransactionsRequest.  # noqa: E501
        :type status: str
        :param type: The type of this SearchTransactionsRequest.  # noqa: E501
        :type type: str
        :param address: The address of this SearchTransactionsRequest.  # noqa: E501
        :type address: str
        :param success: The success of this SearchTransactionsRequest.  # noqa: E501
        :type success: bool
        """
        self.swagger_types = {
            'network_identifier': NetworkIdentifier,
            'operator': Operator,
            'max_block': int,
            'offset': int,
            'limit': int,
            'transaction_identifier': TransactionIdentifier,
            'account_identifier': AccountIdentifier,
            'coin_identifier': CoinIdentifier,
            'currency': Currency,
            'status': str,
            'type': str,
            'address': str,
            'success': bool
        }

        self.attribute_map = {
            'network_identifier': 'network_identifier',
            'operator': 'operator',
            'max_block': 'max_block',
            'offset': 'offset',
            'limit': 'limit',
            'transaction_identifier': 'transaction_identifier',
            'account_identifier': 'account_identifier',
            'coin_identifier': 'coin_identifier',
            'currency': 'currency',
            'status': 'status',
            'type': 'type',
            'address': 'address',
            'success': 'success'
        }
        self._network_identifier = network_identifier
        self._operator = operator
        self._max_block = max_block
        self._offset = offset
        self._limit = limit
        self._transaction_identifier = transaction_identifier
        self._account_identifier = account_identifier
        self._coin_identifier = coin_identifier
        self._currency = currency
        self._status = status
        self._type = type
        self._address = address
        self._success = success

    @classmethod
    def from_dict(cls, dikt) -> 'SearchTransactionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SearchTransactionsRequest of this SearchTransactionsRequest.  # noqa: E501
        :rtype: SearchTransactionsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_identifier(self) -> NetworkIdentifier:
        """Gets the network_identifier of this SearchTransactionsRequest.


        :return: The network_identifier of this SearchTransactionsRequest.
        :rtype: NetworkIdentifier
        """
        return self._network_identifier

    @network_identifier.setter
    def network_identifier(self, network_identifier: NetworkIdentifier):
        """Sets the network_identifier of this SearchTransactionsRequest.


        :param network_identifier: The network_identifier of this SearchTransactionsRequest.
        :type network_identifier: NetworkIdentifier
        """
        if network_identifier is None:
            raise ValueError("Invalid value for `network_identifier`, must not be `None`")  # noqa: E501

        self._network_identifier = network_identifier

    @property
    def operator(self) -> Operator:
        """Gets the operator of this SearchTransactionsRequest.


        :return: The operator of this SearchTransactionsRequest.
        :rtype: Operator
        """
        return self._operator

    @operator.setter
    def operator(self, operator: Operator):
        """Sets the operator of this SearchTransactionsRequest.


        :param operator: The operator of this SearchTransactionsRequest.
        :type operator: Operator
        """

        self._operator = operator

    @property
    def max_block(self) -> int:
        """Gets the max_block of this SearchTransactionsRequest.

        max_block is the largest block index to consider when searching for transactions. If this field is not populated, the current block is considered the max_block. If you do not specify a max_block, it is possible a newly synced block will interfere with paginated transaction queries (as the offset could become invalid with newly added rows).  # noqa: E501

        :return: The max_block of this SearchTransactionsRequest.
        :rtype: int
        """
        return self._max_block

    @max_block.setter
    def max_block(self, max_block: int):
        """Sets the max_block of this SearchTransactionsRequest.

        max_block is the largest block index to consider when searching for transactions. If this field is not populated, the current block is considered the max_block. If you do not specify a max_block, it is possible a newly synced block will interfere with paginated transaction queries (as the offset could become invalid with newly added rows).  # noqa: E501

        :param max_block: The max_block of this SearchTransactionsRequest.
        :type max_block: int
        """

        self._max_block = max_block

    @property
    def offset(self) -> int:
        """Gets the offset of this SearchTransactionsRequest.

        offset is the offset into the query result to start returning transactions. If any search conditions are changed, the query offset will change and you must restart your search iteration.  # noqa: E501

        :return: The offset of this SearchTransactionsRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset: int):
        """Sets the offset of this SearchTransactionsRequest.

        offset is the offset into the query result to start returning transactions. If any search conditions are changed, the query offset will change and you must restart your search iteration.  # noqa: E501

        :param offset: The offset of this SearchTransactionsRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def limit(self) -> int:
        """Gets the limit of this SearchTransactionsRequest.

        limit is the maximum number of transactions to return in one call. The implementation may return <= limit transactions.  # noqa: E501

        :return: The limit of this SearchTransactionsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit: int):
        """Sets the limit of this SearchTransactionsRequest.

        limit is the maximum number of transactions to return in one call. The implementation may return <= limit transactions.  # noqa: E501

        :param limit: The limit of this SearchTransactionsRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def transaction_identifier(self) -> TransactionIdentifier:
        """Gets the transaction_identifier of this SearchTransactionsRequest.


        :return: The transaction_identifier of this SearchTransactionsRequest.
        :rtype: TransactionIdentifier
        """
        return self._transaction_identifier

    @transaction_identifier.setter
    def transaction_identifier(self, transaction_identifier: TransactionIdentifier):
        """Sets the transaction_identifier of this SearchTransactionsRequest.


        :param transaction_identifier: The transaction_identifier of this SearchTransactionsRequest.
        :type transaction_identifier: TransactionIdentifier
        """

        self._transaction_identifier = transaction_identifier

    @property
    def account_identifier(self) -> AccountIdentifier:
        """Gets the account_identifier of this SearchTransactionsRequest.


        :return: The account_identifier of this SearchTransactionsRequest.
        :rtype: AccountIdentifier
        """
        return self._account_identifier

    @account_identifier.setter
    def account_identifier(self, account_identifier: AccountIdentifier):
        """Sets the account_identifier of this SearchTransactionsRequest.


        :param account_identifier: The account_identifier of this SearchTransactionsRequest.
        :type account_identifier: AccountIdentifier
        """

        self._account_identifier = account_identifier

    @property
    def coin_identifier(self) -> CoinIdentifier:
        """Gets the coin_identifier of this SearchTransactionsRequest.


        :return: The coin_identifier of this SearchTransactionsRequest.
        :rtype: CoinIdentifier
        """
        return self._coin_identifier

    @coin_identifier.setter
    def coin_identifier(self, coin_identifier: CoinIdentifier):
        """Sets the coin_identifier of this SearchTransactionsRequest.


        :param coin_identifier: The coin_identifier of this SearchTransactionsRequest.
        :type coin_identifier: CoinIdentifier
        """

        self._coin_identifier = coin_identifier

    @property
    def currency(self) -> Currency:
        """Gets the currency of this SearchTransactionsRequest.


        :return: The currency of this SearchTransactionsRequest.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency: Currency):
        """Sets the currency of this SearchTransactionsRequest.


        :param currency: The currency of this SearchTransactionsRequest.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def status(self) -> str:
        """Gets the status of this SearchTransactionsRequest.

        status is the network-specific operation type.  # noqa: E501

        :return: The status of this SearchTransactionsRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this SearchTransactionsRequest.

        status is the network-specific operation type.  # noqa: E501

        :param status: The status of this SearchTransactionsRequest.
        :type status: str
        """

        self._status = status

    @property
    def type(self) -> str:
        """Gets the type of this SearchTransactionsRequest.

        type is the network-specific operation type.  # noqa: E501

        :return: The type of this SearchTransactionsRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this SearchTransactionsRequest.

        type is the network-specific operation type.  # noqa: E501

        :param type: The type of this SearchTransactionsRequest.
        :type type: str
        """

        self._type = type

    @property
    def address(self) -> str:
        """Gets the address of this SearchTransactionsRequest.

        address is AccountIdentifier.Address. This is used to get all transactions related to an AccountIdentifier.Address, regardless of SubAccountIdentifier.  # noqa: E501

        :return: The address of this SearchTransactionsRequest.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this SearchTransactionsRequest.

        address is AccountIdentifier.Address. This is used to get all transactions related to an AccountIdentifier.Address, regardless of SubAccountIdentifier.  # noqa: E501

        :param address: The address of this SearchTransactionsRequest.
        :type address: str
        """

        self._address = address

    @property
    def success(self) -> bool:
        """Gets the success of this SearchTransactionsRequest.

        success is a synthetic condition populated by parsing network-specific operation statuses (using the mapping provided in `/network/options`).  # noqa: E501

        :return: The success of this SearchTransactionsRequest.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success: bool):
        """Sets the success of this SearchTransactionsRequest.

        success is a synthetic condition populated by parsing network-specific operation statuses (using the mapping provided in `/network/options`).  # noqa: E501

        :param success: The success of this SearchTransactionsRequest.
        :type success: bool
        """

        self._success = success
