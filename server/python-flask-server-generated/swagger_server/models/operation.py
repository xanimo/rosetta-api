# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_identifier import AccountIdentifier  # noqa: F401,E501
from swagger_server.models.amount import Amount  # noqa: F401,E501
from swagger_server.models.coin_change import CoinChange  # noqa: F401,E501
from swagger_server.models.operation_identifier import OperationIdentifier  # noqa: F401,E501
from swagger_server import util


class Operation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, operation_identifier: OperationIdentifier=None, related_operations: List[OperationIdentifier]=None, type: str=None, status: str=None, account: AccountIdentifier=None, amount: Amount=None, coin_change: CoinChange=None, metadata: object=None):  # noqa: E501
        """Operation - a model defined in Swagger

        :param operation_identifier: The operation_identifier of this Operation.  # noqa: E501
        :type operation_identifier: OperationIdentifier
        :param related_operations: The related_operations of this Operation.  # noqa: E501
        :type related_operations: List[OperationIdentifier]
        :param type: The type of this Operation.  # noqa: E501
        :type type: str
        :param status: The status of this Operation.  # noqa: E501
        :type status: str
        :param account: The account of this Operation.  # noqa: E501
        :type account: AccountIdentifier
        :param amount: The amount of this Operation.  # noqa: E501
        :type amount: Amount
        :param coin_change: The coin_change of this Operation.  # noqa: E501
        :type coin_change: CoinChange
        :param metadata: The metadata of this Operation.  # noqa: E501
        :type metadata: object
        """
        self.swagger_types = {
            'operation_identifier': OperationIdentifier,
            'related_operations': List[OperationIdentifier],
            'type': str,
            'status': str,
            'account': AccountIdentifier,
            'amount': Amount,
            'coin_change': CoinChange,
            'metadata': object
        }

        self.attribute_map = {
            'operation_identifier': 'operation_identifier',
            'related_operations': 'related_operations',
            'type': 'type',
            'status': 'status',
            'account': 'account',
            'amount': 'amount',
            'coin_change': 'coin_change',
            'metadata': 'metadata'
        }
        self._operation_identifier = operation_identifier
        self._related_operations = related_operations
        self._type = type
        self._status = status
        self._account = account
        self._amount = amount
        self._coin_change = coin_change
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Operation of this Operation.  # noqa: E501
        :rtype: Operation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation_identifier(self) -> OperationIdentifier:
        """Gets the operation_identifier of this Operation.


        :return: The operation_identifier of this Operation.
        :rtype: OperationIdentifier
        """
        return self._operation_identifier

    @operation_identifier.setter
    def operation_identifier(self, operation_identifier: OperationIdentifier):
        """Sets the operation_identifier of this Operation.


        :param operation_identifier: The operation_identifier of this Operation.
        :type operation_identifier: OperationIdentifier
        """
        if operation_identifier is None:
            raise ValueError("Invalid value for `operation_identifier`, must not be `None`")  # noqa: E501

        self._operation_identifier = operation_identifier

    @property
    def related_operations(self) -> List[OperationIdentifier]:
        """Gets the related_operations of this Operation.

        Restrict referenced related_operations to identifier indices < the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.  # noqa: E501

        :return: The related_operations of this Operation.
        :rtype: List[OperationIdentifier]
        """
        return self._related_operations

    @related_operations.setter
    def related_operations(self, related_operations: List[OperationIdentifier]):
        """Sets the related_operations of this Operation.

        Restrict referenced related_operations to identifier indices < the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.  # noqa: E501

        :param related_operations: The related_operations of this Operation.
        :type related_operations: List[OperationIdentifier]
        """

        self._related_operations = related_operations

    @property
    def type(self) -> str:
        """Gets the type of this Operation.

        Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data.  # noqa: E501

        :return: The type of this Operation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Operation.

        Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data.  # noqa: E501

        :param type: The type of this Operation.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def status(self) -> str:
        """Gets the status of this Operation.

        Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the `/block` and `/block/transaction` endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called \"intent\" in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed).  # noqa: E501

        :return: The status of this Operation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Operation.

        Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the `/block` and `/block/transaction` endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called \"intent\" in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed).  # noqa: E501

        :param status: The status of this Operation.
        :type status: str
        """

        self._status = status

    @property
    def account(self) -> AccountIdentifier:
        """Gets the account of this Operation.


        :return: The account of this Operation.
        :rtype: AccountIdentifier
        """
        return self._account

    @account.setter
    def account(self, account: AccountIdentifier):
        """Sets the account of this Operation.


        :param account: The account of this Operation.
        :type account: AccountIdentifier
        """

        self._account = account

    @property
    def amount(self) -> Amount:
        """Gets the amount of this Operation.


        :return: The amount of this Operation.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount: Amount):
        """Sets the amount of this Operation.


        :param amount: The amount of this Operation.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def coin_change(self) -> CoinChange:
        """Gets the coin_change of this Operation.


        :return: The coin_change of this Operation.
        :rtype: CoinChange
        """
        return self._coin_change

    @coin_change.setter
    def coin_change(self, coin_change: CoinChange):
        """Sets the coin_change of this Operation.


        :param coin_change: The coin_change of this Operation.
        :type coin_change: CoinChange
        """

        self._coin_change = coin_change

    @property
    def metadata(self) -> object:
        """Gets the metadata of this Operation.


        :return: The metadata of this Operation.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this Operation.


        :param metadata: The metadata of this Operation.
        :type metadata: object
        """

        self._metadata = metadata
