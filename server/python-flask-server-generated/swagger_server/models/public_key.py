# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.curve_type import CurveType  # noqa: F401,E501
from swagger_server import util


class PublicKey(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, hex_bytes: str=None, curve_type: CurveType=None):  # noqa: E501
        """PublicKey - a model defined in Swagger

        :param hex_bytes: The hex_bytes of this PublicKey.  # noqa: E501
        :type hex_bytes: str
        :param curve_type: The curve_type of this PublicKey.  # noqa: E501
        :type curve_type: CurveType
        """
        self.swagger_types = {
            'hex_bytes': str,
            'curve_type': CurveType
        }

        self.attribute_map = {
            'hex_bytes': 'hex_bytes',
            'curve_type': 'curve_type'
        }
        self._hex_bytes = hex_bytes
        self._curve_type = curve_type

    @classmethod
    def from_dict(cls, dikt) -> 'PublicKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PublicKey of this PublicKey.  # noqa: E501
        :rtype: PublicKey
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hex_bytes(self) -> str:
        """Gets the hex_bytes of this PublicKey.

        Hex-encoded public key bytes in the format specified by the CurveType.  # noqa: E501

        :return: The hex_bytes of this PublicKey.
        :rtype: str
        """
        return self._hex_bytes

    @hex_bytes.setter
    def hex_bytes(self, hex_bytes: str):
        """Sets the hex_bytes of this PublicKey.

        Hex-encoded public key bytes in the format specified by the CurveType.  # noqa: E501

        :param hex_bytes: The hex_bytes of this PublicKey.
        :type hex_bytes: str
        """
        if hex_bytes is None:
            raise ValueError("Invalid value for `hex_bytes`, must not be `None`")  # noqa: E501

        self._hex_bytes = hex_bytes

    @property
    def curve_type(self) -> CurveType:
        """Gets the curve_type of this PublicKey.


        :return: The curve_type of this PublicKey.
        :rtype: CurveType
        """
        return self._curve_type

    @curve_type.setter
    def curve_type(self, curve_type: CurveType):
        """Sets the curve_type of this PublicKey.


        :param curve_type: The curve_type of this PublicKey.
        :type curve_type: CurveType
        """
        if curve_type is None:
            raise ValueError("Invalid value for `curve_type`, must not be `None`")  # noqa: E501

        self._curve_type = curve_type
