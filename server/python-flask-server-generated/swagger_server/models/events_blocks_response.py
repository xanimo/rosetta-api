# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.block_event import BlockEvent  # noqa: F401,E501
from swagger_server import util


class EventsBlocksResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, max_sequence: int=None, events: List[BlockEvent]=None):  # noqa: E501
        """EventsBlocksResponse - a model defined in Swagger

        :param max_sequence: The max_sequence of this EventsBlocksResponse.  # noqa: E501
        :type max_sequence: int
        :param events: The events of this EventsBlocksResponse.  # noqa: E501
        :type events: List[BlockEvent]
        """
        self.swagger_types = {
            'max_sequence': int,
            'events': List[BlockEvent]
        }

        self.attribute_map = {
            'max_sequence': 'max_sequence',
            'events': 'events'
        }
        self._max_sequence = max_sequence
        self._events = events

    @classmethod
    def from_dict(cls, dikt) -> 'EventsBlocksResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventsBlocksResponse of this EventsBlocksResponse.  # noqa: E501
        :rtype: EventsBlocksResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_sequence(self) -> int:
        """Gets the max_sequence of this EventsBlocksResponse.

        max_sequence is the maximum available sequence number to fetch.  # noqa: E501

        :return: The max_sequence of this EventsBlocksResponse.
        :rtype: int
        """
        return self._max_sequence

    @max_sequence.setter
    def max_sequence(self, max_sequence: int):
        """Sets the max_sequence of this EventsBlocksResponse.

        max_sequence is the maximum available sequence number to fetch.  # noqa: E501

        :param max_sequence: The max_sequence of this EventsBlocksResponse.
        :type max_sequence: int
        """
        if max_sequence is None:
            raise ValueError("Invalid value for `max_sequence`, must not be `None`")  # noqa: E501

        self._max_sequence = max_sequence

    @property
    def events(self) -> List[BlockEvent]:
        """Gets the events of this EventsBlocksResponse.

        events is an array of BlockEvents indicating the order to add and remove blocks to maintain a canonical view of blockchain state. Lightweight clients can use this event stream to update state without implementing their own block syncing logic.  # noqa: E501

        :return: The events of this EventsBlocksResponse.
        :rtype: List[BlockEvent]
        """
        return self._events

    @events.setter
    def events(self, events: List[BlockEvent]):
        """Sets the events of this EventsBlocksResponse.

        events is an array of BlockEvents indicating the order to add and remove blocks to maintain a canonical view of blockchain state. Lightweight clients can use this event stream to update state without implementing their own block syncing logic.  # noqa: E501

        :param events: The events of this EventsBlocksResponse.
        :type events: List[BlockEvent]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")  # noqa: E501

        self._events = events
