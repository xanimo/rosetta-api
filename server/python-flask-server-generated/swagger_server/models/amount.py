# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.currency import Currency  # noqa: F401,E501
from swagger_server import util


class Amount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, value: str=None, currency: Currency=None, metadata: object=None):  # noqa: E501
        """Amount - a model defined in Swagger

        :param value: The value of this Amount.  # noqa: E501
        :type value: str
        :param currency: The currency of this Amount.  # noqa: E501
        :type currency: Currency
        :param metadata: The metadata of this Amount.  # noqa: E501
        :type metadata: object
        """
        self.swagger_types = {
            'value': str,
            'currency': Currency,
            'metadata': object
        }

        self.attribute_map = {
            'value': 'value',
            'currency': 'currency',
            'metadata': 'metadata'
        }
        self._value = value
        self._currency = currency
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'Amount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Amount of this Amount.  # noqa: E501
        :rtype: Amount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> str:
        """Gets the value of this Amount.

        Value of the transaction in atomic units represented as an arbitrary-sized signed integer. For example, 1 BTC would be represented by a value of 100000000.  # noqa: E501

        :return: The value of this Amount.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this Amount.

        Value of the transaction in atomic units represented as an arbitrary-sized signed integer. For example, 1 BTC would be represented by a value of 100000000.  # noqa: E501

        :param value: The value of this Amount.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def currency(self) -> Currency:
        """Gets the currency of this Amount.


        :return: The currency of this Amount.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency: Currency):
        """Sets the currency of this Amount.


        :param currency: The currency of this Amount.
        :type currency: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def metadata(self) -> object:
        """Gets the metadata of this Amount.


        :return: The metadata of this Amount.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this Amount.


        :param metadata: The metadata of this Amount.
        :type metadata: object
        """

        self._metadata = metadata
