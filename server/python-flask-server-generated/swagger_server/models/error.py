# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Error(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, code: int=None, message: str=None, description: str=None, retriable: bool=None, details: object=None):  # noqa: E501
        """Error - a model defined in Swagger

        :param code: The code of this Error.  # noqa: E501
        :type code: int
        :param message: The message of this Error.  # noqa: E501
        :type message: str
        :param description: The description of this Error.  # noqa: E501
        :type description: str
        :param retriable: The retriable of this Error.  # noqa: E501
        :type retriable: bool
        :param details: The details of this Error.  # noqa: E501
        :type details: object
        """
        self.swagger_types = {
            'code': int,
            'message': str,
            'description': str,
            'retriable': bool,
            'details': object
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message',
            'description': 'description',
            'retriable': 'retriable',
            'details': 'details'
        }
        self._code = code
        self._message = message
        self._description = description
        self._retriable = retriable
        self._details = details

    @classmethod
    def from_dict(cls, dikt) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error of this Error.  # noqa: E501
        :rtype: Error
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> int:
        """Gets the code of this Error.

        Code is a network-specific error code. If desired, this code can be equivalent to an HTTP status code.  # noqa: E501

        :return: The code of this Error.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code: int):
        """Sets the code of this Error.

        Code is a network-specific error code. If desired, this code can be equivalent to an HTTP status code.  # noqa: E501

        :param code: The code of this Error.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def message(self) -> str:
        """Gets the message of this Error.

        Message is a network-specific error message. The message MUST NOT change for a given code. In particular, this means that any contextual information should be included in the details field.  # noqa: E501

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Error.

        Message is a network-specific error message. The message MUST NOT change for a given code. In particular, this means that any contextual information should be included in the details field.  # noqa: E501

        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def description(self) -> str:
        """Gets the description of this Error.

        Description allows the implementer to optionally provide additional information about an error. In many cases, the content of this field will be a copy-and-paste from existing developer documentation. Description can ONLY be populated with generic information about a particular type of error. It MUST NOT be populated with information about a particular instantiation of an error (use `details` for this). Whereas the content of Error.Message should stay stable across releases, the content of Error.Description will likely change across releases (as implementers improve error documentation). For this reason, the content in this field is not part of any type assertion (unlike Error.Message).  # noqa: E501

        :return: The description of this Error.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Error.

        Description allows the implementer to optionally provide additional information about an error. In many cases, the content of this field will be a copy-and-paste from existing developer documentation. Description can ONLY be populated with generic information about a particular type of error. It MUST NOT be populated with information about a particular instantiation of an error (use `details` for this). Whereas the content of Error.Message should stay stable across releases, the content of Error.Description will likely change across releases (as implementers improve error documentation). For this reason, the content in this field is not part of any type assertion (unlike Error.Message).  # noqa: E501

        :param description: The description of this Error.
        :type description: str
        """

        self._description = description

    @property
    def retriable(self) -> bool:
        """Gets the retriable of this Error.

        An error is retriable if the same request may succeed if submitted again.  # noqa: E501

        :return: The retriable of this Error.
        :rtype: bool
        """
        return self._retriable

    @retriable.setter
    def retriable(self, retriable: bool):
        """Sets the retriable of this Error.

        An error is retriable if the same request may succeed if submitted again.  # noqa: E501

        :param retriable: The retriable of this Error.
        :type retriable: bool
        """
        if retriable is None:
            raise ValueError("Invalid value for `retriable`, must not be `None`")  # noqa: E501

        self._retriable = retriable

    @property
    def details(self) -> object:
        """Gets the details of this Error.

        Often times it is useful to return context specific to the request that caused the error (i.e. a sample of the stack trace or impacted account) in addition to the standard error message.  # noqa: E501

        :return: The details of this Error.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details: object):
        """Sets the details of this Error.

        Often times it is useful to return context specific to the request that caused the error (i.e. a sample of the stack trace or impacted account) in addition to the standard error message.  # noqa: E501

        :param details: The details of this Error.
        :type details: object
        """

        self._details = details
