# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.sub_network_identifier import SubNetworkIdentifier  # noqa: F401,E501
from swagger_server import util


class NetworkIdentifier(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, blockchain: str=None, network: str=None, sub_network_identifier: SubNetworkIdentifier=None):  # noqa: E501
        """NetworkIdentifier - a model defined in Swagger

        :param blockchain: The blockchain of this NetworkIdentifier.  # noqa: E501
        :type blockchain: str
        :param network: The network of this NetworkIdentifier.  # noqa: E501
        :type network: str
        :param sub_network_identifier: The sub_network_identifier of this NetworkIdentifier.  # noqa: E501
        :type sub_network_identifier: SubNetworkIdentifier
        """
        self.swagger_types = {
            'blockchain': str,
            'network': str,
            'sub_network_identifier': SubNetworkIdentifier
        }

        self.attribute_map = {
            'blockchain': 'blockchain',
            'network': 'network',
            'sub_network_identifier': 'sub_network_identifier'
        }
        self._blockchain = blockchain
        self._network = network
        self._sub_network_identifier = sub_network_identifier

    @classmethod
    def from_dict(cls, dikt) -> 'NetworkIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NetworkIdentifier of this NetworkIdentifier.  # noqa: E501
        :rtype: NetworkIdentifier
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blockchain(self) -> str:
        """Gets the blockchain of this NetworkIdentifier.


        :return: The blockchain of this NetworkIdentifier.
        :rtype: str
        """
        return self._blockchain

    @blockchain.setter
    def blockchain(self, blockchain: str):
        """Sets the blockchain of this NetworkIdentifier.


        :param blockchain: The blockchain of this NetworkIdentifier.
        :type blockchain: str
        """
        if blockchain is None:
            raise ValueError("Invalid value for `blockchain`, must not be `None`")  # noqa: E501

        self._blockchain = blockchain

    @property
    def network(self) -> str:
        """Gets the network of this NetworkIdentifier.

        If a blockchain has a specific chain-id or network identifier, it should go in this field. It is up to the client to determine which network-specific identifier is mainnet or testnet.  # noqa: E501

        :return: The network of this NetworkIdentifier.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network: str):
        """Sets the network of this NetworkIdentifier.

        If a blockchain has a specific chain-id or network identifier, it should go in this field. It is up to the client to determine which network-specific identifier is mainnet or testnet.  # noqa: E501

        :param network: The network of this NetworkIdentifier.
        :type network: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def sub_network_identifier(self) -> SubNetworkIdentifier:
        """Gets the sub_network_identifier of this NetworkIdentifier.


        :return: The sub_network_identifier of this NetworkIdentifier.
        :rtype: SubNetworkIdentifier
        """
        return self._sub_network_identifier

    @sub_network_identifier.setter
    def sub_network_identifier(self, sub_network_identifier: SubNetworkIdentifier):
        """Sets the sub_network_identifier of this NetworkIdentifier.


        :param sub_network_identifier: The sub_network_identifier of this NetworkIdentifier.
        :type sub_network_identifier: SubNetworkIdentifier
        """

        self._sub_network_identifier = sub_network_identifier
