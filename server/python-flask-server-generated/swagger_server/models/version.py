# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Version(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, rosetta_version: str=None, node_version: str=None, middleware_version: str=None, metadata: object=None):  # noqa: E501
        """Version - a model defined in Swagger

        :param rosetta_version: The rosetta_version of this Version.  # noqa: E501
        :type rosetta_version: str
        :param node_version: The node_version of this Version.  # noqa: E501
        :type node_version: str
        :param middleware_version: The middleware_version of this Version.  # noqa: E501
        :type middleware_version: str
        :param metadata: The metadata of this Version.  # noqa: E501
        :type metadata: object
        """
        self.swagger_types = {
            'rosetta_version': str,
            'node_version': str,
            'middleware_version': str,
            'metadata': object
        }

        self.attribute_map = {
            'rosetta_version': 'rosetta_version',
            'node_version': 'node_version',
            'middleware_version': 'middleware_version',
            'metadata': 'metadata'
        }
        self._rosetta_version = rosetta_version
        self._node_version = node_version
        self._middleware_version = middleware_version
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Version of this Version.  # noqa: E501
        :rtype: Version
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rosetta_version(self) -> str:
        """Gets the rosetta_version of this Version.

        The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.  # noqa: E501

        :return: The rosetta_version of this Version.
        :rtype: str
        """
        return self._rosetta_version

    @rosetta_version.setter
    def rosetta_version(self, rosetta_version: str):
        """Sets the rosetta_version of this Version.

        The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.  # noqa: E501

        :param rosetta_version: The rosetta_version of this Version.
        :type rosetta_version: str
        """
        if rosetta_version is None:
            raise ValueError("Invalid value for `rosetta_version`, must not be `None`")  # noqa: E501

        self._rosetta_version = rosetta_version

    @property
    def node_version(self) -> str:
        """Gets the node_version of this Version.

        The node_version is the canonical version of the node runtime. This can help clients manage deployments.  # noqa: E501

        :return: The node_version of this Version.
        :rtype: str
        """
        return self._node_version

    @node_version.setter
    def node_version(self, node_version: str):
        """Sets the node_version of this Version.

        The node_version is the canonical version of the node runtime. This can help clients manage deployments.  # noqa: E501

        :param node_version: The node_version of this Version.
        :type node_version: str
        """
        if node_version is None:
            raise ValueError("Invalid value for `node_version`, must not be `None`")  # noqa: E501

        self._node_version = node_version

    @property
    def middleware_version(self) -> str:
        """Gets the middleware_version of this Version.

        When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.  # noqa: E501

        :return: The middleware_version of this Version.
        :rtype: str
        """
        return self._middleware_version

    @middleware_version.setter
    def middleware_version(self, middleware_version: str):
        """Sets the middleware_version of this Version.

        When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.  # noqa: E501

        :param middleware_version: The middleware_version of this Version.
        :type middleware_version: str
        """

        self._middleware_version = middleware_version

    @property
    def metadata(self) -> object:
        """Gets the metadata of this Version.

        Any other information that may be useful about versioning of dependent services should be returned here.  # noqa: E501

        :return: The metadata of this Version.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this Version.

        Any other information that may be useful about versioning of dependent services should be returned here.  # noqa: E501

        :param metadata: The metadata of this Version.
        :type metadata: object
        """

        self._metadata = metadata
