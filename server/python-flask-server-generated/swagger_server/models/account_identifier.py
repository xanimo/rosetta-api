# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.sub_account_identifier import SubAccountIdentifier  # noqa: F401,E501
from swagger_server import util


class AccountIdentifier(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, address: str=None, sub_account: SubAccountIdentifier=None, metadata: object=None):  # noqa: E501
        """AccountIdentifier - a model defined in Swagger

        :param address: The address of this AccountIdentifier.  # noqa: E501
        :type address: str
        :param sub_account: The sub_account of this AccountIdentifier.  # noqa: E501
        :type sub_account: SubAccountIdentifier
        :param metadata: The metadata of this AccountIdentifier.  # noqa: E501
        :type metadata: object
        """
        self.swagger_types = {
            'address': str,
            'sub_account': SubAccountIdentifier,
            'metadata': object
        }

        self.attribute_map = {
            'address': 'address',
            'sub_account': 'sub_account',
            'metadata': 'metadata'
        }
        self._address = address
        self._sub_account = sub_account
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'AccountIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountIdentifier of this AccountIdentifier.  # noqa: E501
        :rtype: AccountIdentifier
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this AccountIdentifier.

        The address may be a cryptographic public key (or some encoding of it) or a provided username.  # noqa: E501

        :return: The address of this AccountIdentifier.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this AccountIdentifier.

        The address may be a cryptographic public key (or some encoding of it) or a provided username.  # noqa: E501

        :param address: The address of this AccountIdentifier.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def sub_account(self) -> SubAccountIdentifier:
        """Gets the sub_account of this AccountIdentifier.


        :return: The sub_account of this AccountIdentifier.
        :rtype: SubAccountIdentifier
        """
        return self._sub_account

    @sub_account.setter
    def sub_account(self, sub_account: SubAccountIdentifier):
        """Sets the sub_account of this AccountIdentifier.


        :param sub_account: The sub_account of this AccountIdentifier.
        :type sub_account: SubAccountIdentifier
        """

        self._sub_account = sub_account

    @property
    def metadata(self) -> object:
        """Gets the metadata of this AccountIdentifier.

        Blockchains that utilize a username model (where the address is not a derivative of a cryptographic public key) should specify the public key(s) owned by the address in metadata.  # noqa: E501

        :return: The metadata of this AccountIdentifier.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this AccountIdentifier.

        Blockchains that utilize a username model (where the address is not a derivative of a cryptographic public key) should specify the public key(s) owned by the address in metadata.  # noqa: E501

        :param metadata: The metadata of this AccountIdentifier.
        :type metadata: object
        """

        self._metadata = metadata
