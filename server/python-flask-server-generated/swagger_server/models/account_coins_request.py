# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_identifier import AccountIdentifier  # noqa: F401,E501
from swagger_server.models.currency import Currency  # noqa: F401,E501
from swagger_server.models.network_identifier import NetworkIdentifier  # noqa: F401,E501
from swagger_server import util


class AccountCoinsRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, network_identifier: NetworkIdentifier=None, account_identifier: AccountIdentifier=None, include_mempool: bool=None, currencies: List[Currency]=None):  # noqa: E501
        """AccountCoinsRequest - a model defined in Swagger

        :param network_identifier: The network_identifier of this AccountCoinsRequest.  # noqa: E501
        :type network_identifier: NetworkIdentifier
        :param account_identifier: The account_identifier of this AccountCoinsRequest.  # noqa: E501
        :type account_identifier: AccountIdentifier
        :param include_mempool: The include_mempool of this AccountCoinsRequest.  # noqa: E501
        :type include_mempool: bool
        :param currencies: The currencies of this AccountCoinsRequest.  # noqa: E501
        :type currencies: List[Currency]
        """
        self.swagger_types = {
            'network_identifier': NetworkIdentifier,
            'account_identifier': AccountIdentifier,
            'include_mempool': bool,
            'currencies': List[Currency]
        }

        self.attribute_map = {
            'network_identifier': 'network_identifier',
            'account_identifier': 'account_identifier',
            'include_mempool': 'include_mempool',
            'currencies': 'currencies'
        }
        self._network_identifier = network_identifier
        self._account_identifier = account_identifier
        self._include_mempool = include_mempool
        self._currencies = currencies

    @classmethod
    def from_dict(cls, dikt) -> 'AccountCoinsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccountCoinsRequest of this AccountCoinsRequest.  # noqa: E501
        :rtype: AccountCoinsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_identifier(self) -> NetworkIdentifier:
        """Gets the network_identifier of this AccountCoinsRequest.


        :return: The network_identifier of this AccountCoinsRequest.
        :rtype: NetworkIdentifier
        """
        return self._network_identifier

    @network_identifier.setter
    def network_identifier(self, network_identifier: NetworkIdentifier):
        """Sets the network_identifier of this AccountCoinsRequest.


        :param network_identifier: The network_identifier of this AccountCoinsRequest.
        :type network_identifier: NetworkIdentifier
        """
        if network_identifier is None:
            raise ValueError("Invalid value for `network_identifier`, must not be `None`")  # noqa: E501

        self._network_identifier = network_identifier

    @property
    def account_identifier(self) -> AccountIdentifier:
        """Gets the account_identifier of this AccountCoinsRequest.


        :return: The account_identifier of this AccountCoinsRequest.
        :rtype: AccountIdentifier
        """
        return self._account_identifier

    @account_identifier.setter
    def account_identifier(self, account_identifier: AccountIdentifier):
        """Sets the account_identifier of this AccountCoinsRequest.


        :param account_identifier: The account_identifier of this AccountCoinsRequest.
        :type account_identifier: AccountIdentifier
        """
        if account_identifier is None:
            raise ValueError("Invalid value for `account_identifier`, must not be `None`")  # noqa: E501

        self._account_identifier = account_identifier

    @property
    def include_mempool(self) -> bool:
        """Gets the include_mempool of this AccountCoinsRequest.

        Include state from the mempool when looking up an account's unspent coins. Note, using this functionality breaks any guarantee of idempotency.  # noqa: E501

        :return: The include_mempool of this AccountCoinsRequest.
        :rtype: bool
        """
        return self._include_mempool

    @include_mempool.setter
    def include_mempool(self, include_mempool: bool):
        """Sets the include_mempool of this AccountCoinsRequest.

        Include state from the mempool when looking up an account's unspent coins. Note, using this functionality breaks any guarantee of idempotency.  # noqa: E501

        :param include_mempool: The include_mempool of this AccountCoinsRequest.
        :type include_mempool: bool
        """
        if include_mempool is None:
            raise ValueError("Invalid value for `include_mempool`, must not be `None`")  # noqa: E501

        self._include_mempool = include_mempool

    @property
    def currencies(self) -> List[Currency]:
        """Gets the currencies of this AccountCoinsRequest.

        In some cases, the caller may not want to retrieve coins for all currencies for an AccountIdentifier. If the currencies field is populated, only coins for the specified currencies will be returned. If not populated, all unspent coins will be returned.  # noqa: E501

        :return: The currencies of this AccountCoinsRequest.
        :rtype: List[Currency]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies: List[Currency]):
        """Sets the currencies of this AccountCoinsRequest.

        In some cases, the caller may not want to retrieve coins for all currencies for an AccountIdentifier. If the currencies field is populated, only coins for the specified currencies will be returned. If not populated, all unspent coins will be returned.  # noqa: E501

        :param currencies: The currencies of this AccountCoinsRequest.
        :type currencies: List[Currency]
        """

        self._currencies = currencies
