# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_identifier import AccountIdentifier  # noqa: F401,E501
from swagger_server.models.signature_type import SignatureType  # noqa: F401,E501
from swagger_server import util


class SigningPayload(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, address: str=None, account_identifier: AccountIdentifier=None, hex_bytes: str=None, signature_type: SignatureType=None):  # noqa: E501
        """SigningPayload - a model defined in Swagger

        :param address: The address of this SigningPayload.  # noqa: E501
        :type address: str
        :param account_identifier: The account_identifier of this SigningPayload.  # noqa: E501
        :type account_identifier: AccountIdentifier
        :param hex_bytes: The hex_bytes of this SigningPayload.  # noqa: E501
        :type hex_bytes: str
        :param signature_type: The signature_type of this SigningPayload.  # noqa: E501
        :type signature_type: SignatureType
        """
        self.swagger_types = {
            'address': str,
            'account_identifier': AccountIdentifier,
            'hex_bytes': str,
            'signature_type': SignatureType
        }

        self.attribute_map = {
            'address': 'address',
            'account_identifier': 'account_identifier',
            'hex_bytes': 'hex_bytes',
            'signature_type': 'signature_type'
        }
        self._address = address
        self._account_identifier = account_identifier
        self._hex_bytes = hex_bytes
        self._signature_type = signature_type

    @classmethod
    def from_dict(cls, dikt) -> 'SigningPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SigningPayload of this SigningPayload.  # noqa: E501
        :rtype: SigningPayload
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this SigningPayload.

        [DEPRECATED by `account_identifier` in `v1.4.4`] The network-specific address of the account that should sign the payload.  # noqa: E501

        :return: The address of this SigningPayload.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this SigningPayload.

        [DEPRECATED by `account_identifier` in `v1.4.4`] The network-specific address of the account that should sign the payload.  # noqa: E501

        :param address: The address of this SigningPayload.
        :type address: str
        """

        self._address = address

    @property
    def account_identifier(self) -> AccountIdentifier:
        """Gets the account_identifier of this SigningPayload.


        :return: The account_identifier of this SigningPayload.
        :rtype: AccountIdentifier
        """
        return self._account_identifier

    @account_identifier.setter
    def account_identifier(self, account_identifier: AccountIdentifier):
        """Sets the account_identifier of this SigningPayload.


        :param account_identifier: The account_identifier of this SigningPayload.
        :type account_identifier: AccountIdentifier
        """

        self._account_identifier = account_identifier

    @property
    def hex_bytes(self) -> str:
        """Gets the hex_bytes of this SigningPayload.


        :return: The hex_bytes of this SigningPayload.
        :rtype: str
        """
        return self._hex_bytes

    @hex_bytes.setter
    def hex_bytes(self, hex_bytes: str):
        """Sets the hex_bytes of this SigningPayload.


        :param hex_bytes: The hex_bytes of this SigningPayload.
        :type hex_bytes: str
        """
        if hex_bytes is None:
            raise ValueError("Invalid value for `hex_bytes`, must not be `None`")  # noqa: E501

        self._hex_bytes = hex_bytes

    @property
    def signature_type(self) -> SignatureType:
        """Gets the signature_type of this SigningPayload.


        :return: The signature_type of this SigningPayload.
        :rtype: SignatureType
        """
        return self._signature_type

    @signature_type.setter
    def signature_type(self, signature_type: SignatureType):
        """Sets the signature_type of this SigningPayload.


        :param signature_type: The signature_type of this SigningPayload.
        :type signature_type: SignatureType
        """

        self._signature_type = signature_type
