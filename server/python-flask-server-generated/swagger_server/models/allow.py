# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.balance_exemption import BalanceExemption  # noqa: F401,E501
from swagger_server.models.error import Error  # noqa: F401,E501
from swagger_server.models.operation_status import OperationStatus  # noqa: F401,E501
from swagger_server import util


class Allow(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, operation_statuses: List[OperationStatus]=None, operation_types: List[str]=None, errors: List[Error]=None, historical_balance_lookup: bool=None, timestamp_start_index: int=None, call_methods: List[str]=None, balance_exemptions: List[BalanceExemption]=None, mempool_coins: bool=None):  # noqa: E501
        """Allow - a model defined in Swagger

        :param operation_statuses: The operation_statuses of this Allow.  # noqa: E501
        :type operation_statuses: List[OperationStatus]
        :param operation_types: The operation_types of this Allow.  # noqa: E501
        :type operation_types: List[str]
        :param errors: The errors of this Allow.  # noqa: E501
        :type errors: List[Error]
        :param historical_balance_lookup: The historical_balance_lookup of this Allow.  # noqa: E501
        :type historical_balance_lookup: bool
        :param timestamp_start_index: The timestamp_start_index of this Allow.  # noqa: E501
        :type timestamp_start_index: int
        :param call_methods: The call_methods of this Allow.  # noqa: E501
        :type call_methods: List[str]
        :param balance_exemptions: The balance_exemptions of this Allow.  # noqa: E501
        :type balance_exemptions: List[BalanceExemption]
        :param mempool_coins: The mempool_coins of this Allow.  # noqa: E501
        :type mempool_coins: bool
        """
        self.swagger_types = {
            'operation_statuses': List[OperationStatus],
            'operation_types': List[str],
            'errors': List[Error],
            'historical_balance_lookup': bool,
            'timestamp_start_index': int,
            'call_methods': List[str],
            'balance_exemptions': List[BalanceExemption],
            'mempool_coins': bool
        }

        self.attribute_map = {
            'operation_statuses': 'operation_statuses',
            'operation_types': 'operation_types',
            'errors': 'errors',
            'historical_balance_lookup': 'historical_balance_lookup',
            'timestamp_start_index': 'timestamp_start_index',
            'call_methods': 'call_methods',
            'balance_exemptions': 'balance_exemptions',
            'mempool_coins': 'mempool_coins'
        }
        self._operation_statuses = operation_statuses
        self._operation_types = operation_types
        self._errors = errors
        self._historical_balance_lookup = historical_balance_lookup
        self._timestamp_start_index = timestamp_start_index
        self._call_methods = call_methods
        self._balance_exemptions = balance_exemptions
        self._mempool_coins = mempool_coins

    @classmethod
    def from_dict(cls, dikt) -> 'Allow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Allow of this Allow.  # noqa: E501
        :rtype: Allow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation_statuses(self) -> List[OperationStatus]:
        """Gets the operation_statuses of this Allow.

        All Operation.Status this implementation supports. Any status that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :return: The operation_statuses of this Allow.
        :rtype: List[OperationStatus]
        """
        return self._operation_statuses

    @operation_statuses.setter
    def operation_statuses(self, operation_statuses: List[OperationStatus]):
        """Sets the operation_statuses of this Allow.

        All Operation.Status this implementation supports. Any status that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :param operation_statuses: The operation_statuses of this Allow.
        :type operation_statuses: List[OperationStatus]
        """
        if operation_statuses is None:
            raise ValueError("Invalid value for `operation_statuses`, must not be `None`")  # noqa: E501

        self._operation_statuses = operation_statuses

    @property
    def operation_types(self) -> List[str]:
        """Gets the operation_types of this Allow.

        All Operation.Type this implementation supports. Any type that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :return: The operation_types of this Allow.
        :rtype: List[str]
        """
        return self._operation_types

    @operation_types.setter
    def operation_types(self, operation_types: List[str]):
        """Sets the operation_types of this Allow.

        All Operation.Type this implementation supports. Any type that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :param operation_types: The operation_types of this Allow.
        :type operation_types: List[str]
        """
        if operation_types is None:
            raise ValueError("Invalid value for `operation_types`, must not be `None`")  # noqa: E501

        self._operation_types = operation_types

    @property
    def errors(self) -> List[Error]:
        """Gets the errors of this Allow.

        All Errors that this implementation could return. Any error that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :return: The errors of this Allow.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[Error]):
        """Sets the errors of this Allow.

        All Errors that this implementation could return. Any error that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :param errors: The errors of this Allow.
        :type errors: List[Error]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def historical_balance_lookup(self) -> bool:
        """Gets the historical_balance_lookup of this Allow.

        Any Rosetta implementation that supports querying the balance of an account at any height in the past should set this to true.  # noqa: E501

        :return: The historical_balance_lookup of this Allow.
        :rtype: bool
        """
        return self._historical_balance_lookup

    @historical_balance_lookup.setter
    def historical_balance_lookup(self, historical_balance_lookup: bool):
        """Sets the historical_balance_lookup of this Allow.

        Any Rosetta implementation that supports querying the balance of an account at any height in the past should set this to true.  # noqa: E501

        :param historical_balance_lookup: The historical_balance_lookup of this Allow.
        :type historical_balance_lookup: bool
        """
        if historical_balance_lookup is None:
            raise ValueError("Invalid value for `historical_balance_lookup`, must not be `None`")  # noqa: E501

        self._historical_balance_lookup = historical_balance_lookup

    @property
    def timestamp_start_index(self) -> int:
        """Gets the timestamp_start_index of this Allow.

        If populated, `timestamp_start_index` indicates the first block index where block timestamps are considered valid (i.e. all blocks less than `timestamp_start_index` could have invalid timestamps). This is useful when the genesis block (or blocks) of a network have timestamp 0. If not populated, block timestamps are assumed to be valid for all available blocks.  # noqa: E501

        :return: The timestamp_start_index of this Allow.
        :rtype: int
        """
        return self._timestamp_start_index

    @timestamp_start_index.setter
    def timestamp_start_index(self, timestamp_start_index: int):
        """Sets the timestamp_start_index of this Allow.

        If populated, `timestamp_start_index` indicates the first block index where block timestamps are considered valid (i.e. all blocks less than `timestamp_start_index` could have invalid timestamps). This is useful when the genesis block (or blocks) of a network have timestamp 0. If not populated, block timestamps are assumed to be valid for all available blocks.  # noqa: E501

        :param timestamp_start_index: The timestamp_start_index of this Allow.
        :type timestamp_start_index: int
        """

        self._timestamp_start_index = timestamp_start_index

    @property
    def call_methods(self) -> List[str]:
        """Gets the call_methods of this Allow.

        All methods that are supported by the /call endpoint. Communicating which parameters should be provided to /call is the responsibility of the implementer (this is en lieu of defining an entire type system and requiring the implementer to define that in Allow).  # noqa: E501

        :return: The call_methods of this Allow.
        :rtype: List[str]
        """
        return self._call_methods

    @call_methods.setter
    def call_methods(self, call_methods: List[str]):
        """Sets the call_methods of this Allow.

        All methods that are supported by the /call endpoint. Communicating which parameters should be provided to /call is the responsibility of the implementer (this is en lieu of defining an entire type system and requiring the implementer to define that in Allow).  # noqa: E501

        :param call_methods: The call_methods of this Allow.
        :type call_methods: List[str]
        """
        if call_methods is None:
            raise ValueError("Invalid value for `call_methods`, must not be `None`")  # noqa: E501

        self._call_methods = call_methods

    @property
    def balance_exemptions(self) -> List[BalanceExemption]:
        """Gets the balance_exemptions of this Allow.

        BalanceExemptions is an array of BalanceExemption indicating which account balances could change without a corresponding Operation. BalanceExemptions should be used sparingly as they may introduce significant complexity for integrators that attempt to reconcile all account balance changes. If your implementation relies on any BalanceExemptions, you MUST implement historical balance lookup (the ability to query an account balance at any BlockIdentifier).  # noqa: E501

        :return: The balance_exemptions of this Allow.
        :rtype: List[BalanceExemption]
        """
        return self._balance_exemptions

    @balance_exemptions.setter
    def balance_exemptions(self, balance_exemptions: List[BalanceExemption]):
        """Sets the balance_exemptions of this Allow.

        BalanceExemptions is an array of BalanceExemption indicating which account balances could change without a corresponding Operation. BalanceExemptions should be used sparingly as they may introduce significant complexity for integrators that attempt to reconcile all account balance changes. If your implementation relies on any BalanceExemptions, you MUST implement historical balance lookup (the ability to query an account balance at any BlockIdentifier).  # noqa: E501

        :param balance_exemptions: The balance_exemptions of this Allow.
        :type balance_exemptions: List[BalanceExemption]
        """
        if balance_exemptions is None:
            raise ValueError("Invalid value for `balance_exemptions`, must not be `None`")  # noqa: E501

        self._balance_exemptions = balance_exemptions

    @property
    def mempool_coins(self) -> bool:
        """Gets the mempool_coins of this Allow.

        Any Rosetta implementation that can update an AccountIdentifier's unspent coins based on the contents of the mempool should populate this field as true. If false, requests to `/account/coins` that set `include_mempool` as true will be automatically rejected.  # noqa: E501

        :return: The mempool_coins of this Allow.
        :rtype: bool
        """
        return self._mempool_coins

    @mempool_coins.setter
    def mempool_coins(self, mempool_coins: bool):
        """Sets the mempool_coins of this Allow.

        Any Rosetta implementation that can update an AccountIdentifier's unspent coins based on the contents of the mempool should populate this field as true. If false, requests to `/account/coins` that set `include_mempool` as true will be automatically rejected.  # noqa: E501

        :param mempool_coins: The mempool_coins of this Allow.
        :type mempool_coins: bool
        """
        if mempool_coins is None:
            raise ValueError("Invalid value for `mempool_coins`, must not be `None`")  # noqa: E501

        self._mempool_coins = mempool_coins
