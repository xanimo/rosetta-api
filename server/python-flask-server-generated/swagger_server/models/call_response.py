# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CallResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, result: object=None, idempotent: bool=None):  # noqa: E501
        """CallResponse - a model defined in Swagger

        :param result: The result of this CallResponse.  # noqa: E501
        :type result: object
        :param idempotent: The idempotent of this CallResponse.  # noqa: E501
        :type idempotent: bool
        """
        self.swagger_types = {
            'result': object,
            'idempotent': bool
        }

        self.attribute_map = {
            'result': 'result',
            'idempotent': 'idempotent'
        }
        self._result = result
        self._idempotent = idempotent

    @classmethod
    def from_dict(cls, dikt) -> 'CallResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CallResponse of this CallResponse.  # noqa: E501
        :rtype: CallResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self) -> object:
        """Gets the result of this CallResponse.

        Result contains the result of the `/call` invocation. This result will not be inspected or interpreted by Rosetta tooling and is left to the caller to decode.  # noqa: E501

        :return: The result of this CallResponse.
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result: object):
        """Sets the result of this CallResponse.

        Result contains the result of the `/call` invocation. This result will not be inspected or interpreted by Rosetta tooling and is left to the caller to decode.  # noqa: E501

        :param result: The result of this CallResponse.
        :type result: object
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def idempotent(self) -> bool:
        """Gets the idempotent of this CallResponse.

        Idempotent indicates that if `/call` is invoked with the same CallRequest again, at any point in time, it will return the same CallResponse. Integrators may cache the CallResponse if this is set to true to avoid making unnecessary calls to the Rosetta implementation. For this reason, implementers should be very conservative about returning true here or they could cause issues for the caller.  # noqa: E501

        :return: The idempotent of this CallResponse.
        :rtype: bool
        """
        return self._idempotent

    @idempotent.setter
    def idempotent(self, idempotent: bool):
        """Sets the idempotent of this CallResponse.

        Idempotent indicates that if `/call` is invoked with the same CallRequest again, at any point in time, it will return the same CallResponse. Integrators may cache the CallResponse if this is set to true to avoid making unnecessary calls to the Rosetta implementation. For this reason, implementers should be very conservative about returning true here or they could cause issues for the caller.  # noqa: E501

        :param idempotent: The idempotent of this CallResponse.
        :type idempotent: bool
        """
        if idempotent is None:
            raise ValueError("Invalid value for `idempotent`, must not be `None`")  # noqa: E501

        self._idempotent = idempotent
