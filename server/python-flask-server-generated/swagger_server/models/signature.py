# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.public_key import PublicKey  # noqa: F401,E501
from swagger_server.models.signature_type import SignatureType  # noqa: F401,E501
from swagger_server.models.signing_payload import SigningPayload  # noqa: F401,E501
from swagger_server import util


class Signature(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, signing_payload: SigningPayload=None, public_key: PublicKey=None, signature_type: SignatureType=None, hex_bytes: str=None):  # noqa: E501
        """Signature - a model defined in Swagger

        :param signing_payload: The signing_payload of this Signature.  # noqa: E501
        :type signing_payload: SigningPayload
        :param public_key: The public_key of this Signature.  # noqa: E501
        :type public_key: PublicKey
        :param signature_type: The signature_type of this Signature.  # noqa: E501
        :type signature_type: SignatureType
        :param hex_bytes: The hex_bytes of this Signature.  # noqa: E501
        :type hex_bytes: str
        """
        self.swagger_types = {
            'signing_payload': SigningPayload,
            'public_key': PublicKey,
            'signature_type': SignatureType,
            'hex_bytes': str
        }

        self.attribute_map = {
            'signing_payload': 'signing_payload',
            'public_key': 'public_key',
            'signature_type': 'signature_type',
            'hex_bytes': 'hex_bytes'
        }
        self._signing_payload = signing_payload
        self._public_key = public_key
        self._signature_type = signature_type
        self._hex_bytes = hex_bytes

    @classmethod
    def from_dict(cls, dikt) -> 'Signature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Signature of this Signature.  # noqa: E501
        :rtype: Signature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def signing_payload(self) -> SigningPayload:
        """Gets the signing_payload of this Signature.


        :return: The signing_payload of this Signature.
        :rtype: SigningPayload
        """
        return self._signing_payload

    @signing_payload.setter
    def signing_payload(self, signing_payload: SigningPayload):
        """Sets the signing_payload of this Signature.


        :param signing_payload: The signing_payload of this Signature.
        :type signing_payload: SigningPayload
        """
        if signing_payload is None:
            raise ValueError("Invalid value for `signing_payload`, must not be `None`")  # noqa: E501

        self._signing_payload = signing_payload

    @property
    def public_key(self) -> PublicKey:
        """Gets the public_key of this Signature.


        :return: The public_key of this Signature.
        :rtype: PublicKey
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key: PublicKey):
        """Sets the public_key of this Signature.


        :param public_key: The public_key of this Signature.
        :type public_key: PublicKey
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")  # noqa: E501

        self._public_key = public_key

    @property
    def signature_type(self) -> SignatureType:
        """Gets the signature_type of this Signature.


        :return: The signature_type of this Signature.
        :rtype: SignatureType
        """
        return self._signature_type

    @signature_type.setter
    def signature_type(self, signature_type: SignatureType):
        """Sets the signature_type of this Signature.


        :param signature_type: The signature_type of this Signature.
        :type signature_type: SignatureType
        """
        if signature_type is None:
            raise ValueError("Invalid value for `signature_type`, must not be `None`")  # noqa: E501

        self._signature_type = signature_type

    @property
    def hex_bytes(self) -> str:
        """Gets the hex_bytes of this Signature.


        :return: The hex_bytes of this Signature.
        :rtype: str
        """
        return self._hex_bytes

    @hex_bytes.setter
    def hex_bytes(self, hex_bytes: str):
        """Sets the hex_bytes of this Signature.


        :param hex_bytes: The hex_bytes of this Signature.
        :type hex_bytes: str
        """
        if hex_bytes is None:
            raise ValueError("Invalid value for `hex_bytes`, must not be `None`")  # noqa: E501

        self._hex_bytes = hex_bytes
