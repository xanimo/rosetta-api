# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.currency import Currency  # noqa: F401,E501
from swagger_server.models.exemption_type import ExemptionType  # noqa: F401,E501
from swagger_server import util


class BalanceExemption(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sub_account_address: str=None, currency: Currency=None, exemption_type: ExemptionType=None):  # noqa: E501
        """BalanceExemption - a model defined in Swagger

        :param sub_account_address: The sub_account_address of this BalanceExemption.  # noqa: E501
        :type sub_account_address: str
        :param currency: The currency of this BalanceExemption.  # noqa: E501
        :type currency: Currency
        :param exemption_type: The exemption_type of this BalanceExemption.  # noqa: E501
        :type exemption_type: ExemptionType
        """
        self.swagger_types = {
            'sub_account_address': str,
            'currency': Currency,
            'exemption_type': ExemptionType
        }

        self.attribute_map = {
            'sub_account_address': 'sub_account_address',
            'currency': 'currency',
            'exemption_type': 'exemption_type'
        }
        self._sub_account_address = sub_account_address
        self._currency = currency
        self._exemption_type = exemption_type

    @classmethod
    def from_dict(cls, dikt) -> 'BalanceExemption':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BalanceExemption of this BalanceExemption.  # noqa: E501
        :rtype: BalanceExemption
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sub_account_address(self) -> str:
        """Gets the sub_account_address of this BalanceExemption.

        SubAccountAddress is the SubAccountIdentifier.Address that the BalanceExemption applies to (regardless of the value of SubAccountIdentifier.Metadata).  # noqa: E501

        :return: The sub_account_address of this BalanceExemption.
        :rtype: str
        """
        return self._sub_account_address

    @sub_account_address.setter
    def sub_account_address(self, sub_account_address: str):
        """Sets the sub_account_address of this BalanceExemption.

        SubAccountAddress is the SubAccountIdentifier.Address that the BalanceExemption applies to (regardless of the value of SubAccountIdentifier.Metadata).  # noqa: E501

        :param sub_account_address: The sub_account_address of this BalanceExemption.
        :type sub_account_address: str
        """

        self._sub_account_address = sub_account_address

    @property
    def currency(self) -> Currency:
        """Gets the currency of this BalanceExemption.


        :return: The currency of this BalanceExemption.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency: Currency):
        """Sets the currency of this BalanceExemption.


        :param currency: The currency of this BalanceExemption.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def exemption_type(self) -> ExemptionType:
        """Gets the exemption_type of this BalanceExemption.


        :return: The exemption_type of this BalanceExemption.
        :rtype: ExemptionType
        """
        return self._exemption_type

    @exemption_type.setter
    def exemption_type(self, exemption_type: ExemptionType):
        """Sets the exemption_type of this BalanceExemption.


        :param exemption_type: The exemption_type of this BalanceExemption.
        :type exemption_type: ExemptionType
        """

        self._exemption_type = exemption_type
