# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.network_identifier import NetworkIdentifier  # noqa: F401,E501
from swagger_server import util


class CallRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, network_identifier: NetworkIdentifier=None, method: str=None, parameters: object=None):  # noqa: E501
        """CallRequest - a model defined in Swagger

        :param network_identifier: The network_identifier of this CallRequest.  # noqa: E501
        :type network_identifier: NetworkIdentifier
        :param method: The method of this CallRequest.  # noqa: E501
        :type method: str
        :param parameters: The parameters of this CallRequest.  # noqa: E501
        :type parameters: object
        """
        self.swagger_types = {
            'network_identifier': NetworkIdentifier,
            'method': str,
            'parameters': object
        }

        self.attribute_map = {
            'network_identifier': 'network_identifier',
            'method': 'method',
            'parameters': 'parameters'
        }
        self._network_identifier = network_identifier
        self._method = method
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'CallRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CallRequest of this CallRequest.  # noqa: E501
        :rtype: CallRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_identifier(self) -> NetworkIdentifier:
        """Gets the network_identifier of this CallRequest.


        :return: The network_identifier of this CallRequest.
        :rtype: NetworkIdentifier
        """
        return self._network_identifier

    @network_identifier.setter
    def network_identifier(self, network_identifier: NetworkIdentifier):
        """Sets the network_identifier of this CallRequest.


        :param network_identifier: The network_identifier of this CallRequest.
        :type network_identifier: NetworkIdentifier
        """
        if network_identifier is None:
            raise ValueError("Invalid value for `network_identifier`, must not be `None`")  # noqa: E501

        self._network_identifier = network_identifier

    @property
    def method(self) -> str:
        """Gets the method of this CallRequest.

        Method is some network-specific procedure call. This method could map to a network-specific RPC endpoint, a method in an SDK generated from a smart contract, or some hybrid of the two. The implementation must define all available methods in the Allow object. However, it is up to the caller to determine which parameters to provide when invoking `/call`.  # noqa: E501

        :return: The method of this CallRequest.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method: str):
        """Sets the method of this CallRequest.

        Method is some network-specific procedure call. This method could map to a network-specific RPC endpoint, a method in an SDK generated from a smart contract, or some hybrid of the two. The implementation must define all available methods in the Allow object. However, it is up to the caller to determine which parameters to provide when invoking `/call`.  # noqa: E501

        :param method: The method of this CallRequest.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def parameters(self) -> object:
        """Gets the parameters of this CallRequest.

        Parameters is some network-specific argument for a method. It is up to the caller to determine which parameters to provide when invoking `/call`.  # noqa: E501

        :return: The parameters of this CallRequest.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: object):
        """Sets the parameters of this CallRequest.

        Parameters is some network-specific argument for a method. It is up to the caller to determine which parameters to provide when invoking `/call`.  # noqa: E501

        :param parameters: The parameters of this CallRequest.
        :type parameters: object
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters
