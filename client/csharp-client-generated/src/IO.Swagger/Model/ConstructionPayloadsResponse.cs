/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ConstructionTransactionResponse is returned by &#x60;/construction/payloads&#x60;. It contains an unsigned transaction blob (that is usually needed to construct the a network transaction from a collection of signatures) and an array of payloads that must be signed by the caller.
    /// </summary>
    [DataContract]
        public partial class ConstructionPayloadsResponse :  IEquatable<ConstructionPayloadsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionPayloadsResponse" /> class.
        /// </summary>
        /// <param name="unsignedTransaction">unsignedTransaction (required).</param>
        /// <param name="payloads">payloads (required).</param>
        public ConstructionPayloadsResponse(string unsignedTransaction = default(string), List<SigningPayload> payloads = default(List<SigningPayload>))
        {
            // to ensure "unsignedTransaction" is required (not null)
            if (unsignedTransaction == null)
            {
                throw new InvalidDataException("unsignedTransaction is a required property for ConstructionPayloadsResponse and cannot be null");
            }
            else
            {
                this.UnsignedTransaction = unsignedTransaction;
            }
            // to ensure "payloads" is required (not null)
            if (payloads == null)
            {
                throw new InvalidDataException("payloads is a required property for ConstructionPayloadsResponse and cannot be null");
            }
            else
            {
                this.Payloads = payloads;
            }
        }
        
        /// <summary>
        /// Gets or Sets UnsignedTransaction
        /// </summary>
        [DataMember(Name="unsigned_transaction", EmitDefaultValue=false)]
        public string UnsignedTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Payloads
        /// </summary>
        [DataMember(Name="payloads", EmitDefaultValue=false)]
        public List<SigningPayload> Payloads { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConstructionPayloadsResponse {\n");
            sb.Append("  UnsignedTransaction: ").Append(UnsignedTransaction).Append("\n");
            sb.Append("  Payloads: ").Append(Payloads).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstructionPayloadsResponse);
        }

        /// <summary>
        /// Returns true if ConstructionPayloadsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstructionPayloadsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstructionPayloadsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnsignedTransaction == input.UnsignedTransaction ||
                    (this.UnsignedTransaction != null &&
                    this.UnsignedTransaction.Equals(input.UnsignedTransaction))
                ) && 
                (
                    this.Payloads == input.Payloads ||
                    this.Payloads != null &&
                    input.Payloads != null &&
                    this.Payloads.SequenceEqual(input.Payloads)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnsignedTransaction != null)
                    hashCode = hashCode * 59 + this.UnsignedTransaction.GetHashCode();
                if (this.Payloads != null)
                    hashCode = hashCode * 59 + this.Payloads.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
