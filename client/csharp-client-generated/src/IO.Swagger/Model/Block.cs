/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Blocks contain an array of Transactions that occurred at a particular BlockIdentifier. A hard requirement for blocks returned by Rosetta implementations is that they MUST be _inalterable_: once a client has requested and received a block identified by a specific BlockIndentifier, all future calls for that same BlockIdentifier must return the same block contents.
    /// </summary>
    [DataContract]
        public partial class Block :  IEquatable<Block>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Block" /> class.
        /// </summary>
        /// <param name="blockIdentifier">blockIdentifier (required).</param>
        /// <param name="parentBlockIdentifier">parentBlockIdentifier (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="transactions">transactions (required).</param>
        /// <param name="metadata">metadata.</param>
        public Block(BlockIdentifier blockIdentifier = default(BlockIdentifier), BlockIdentifier parentBlockIdentifier = default(BlockIdentifier), long? timestamp = default(long?), List<Transaction> transactions = default(List<Transaction>), Object metadata = default(Object))
        {
            // to ensure "blockIdentifier" is required (not null)
            if (blockIdentifier == null)
            {
                throw new InvalidDataException("blockIdentifier is a required property for Block and cannot be null");
            }
            else
            {
                this.BlockIdentifier = blockIdentifier;
            }
            // to ensure "parentBlockIdentifier" is required (not null)
            if (parentBlockIdentifier == null)
            {
                throw new InvalidDataException("parentBlockIdentifier is a required property for Block and cannot be null");
            }
            else
            {
                this.ParentBlockIdentifier = parentBlockIdentifier;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for Block and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "transactions" is required (not null)
            if (transactions == null)
            {
                throw new InvalidDataException("transactions is a required property for Block and cannot be null");
            }
            else
            {
                this.Transactions = transactions;
            }
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Gets or Sets BlockIdentifier
        /// </summary>
        [DataMember(Name="block_identifier", EmitDefaultValue=false)]
        public BlockIdentifier BlockIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ParentBlockIdentifier
        /// </summary>
        [DataMember(Name="parent_block_identifier", EmitDefaultValue=false)]
        public BlockIdentifier ParentBlockIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<Transaction> Transactions { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Block {\n");
            sb.Append("  BlockIdentifier: ").Append(BlockIdentifier).Append("\n");
            sb.Append("  ParentBlockIdentifier: ").Append(ParentBlockIdentifier).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Block);
        }

        /// <summary>
        /// Returns true if Block instances are equal
        /// </summary>
        /// <param name="input">Instance of Block to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Block input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BlockIdentifier == input.BlockIdentifier ||
                    (this.BlockIdentifier != null &&
                    this.BlockIdentifier.Equals(input.BlockIdentifier))
                ) && 
                (
                    this.ParentBlockIdentifier == input.ParentBlockIdentifier ||
                    (this.ParentBlockIdentifier != null &&
                    this.ParentBlockIdentifier.Equals(input.ParentBlockIdentifier))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockIdentifier != null)
                    hashCode = hashCode * 59 + this.BlockIdentifier.GetHashCode();
                if (this.ParentBlockIdentifier != null)
                    hashCode = hashCode * 59 + this.ParentBlockIdentifier.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
