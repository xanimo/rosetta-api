/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AccountCoinsRequest is utilized to make a request on the /account/coins endpoint.
    /// </summary>
    [DataContract]
        public partial class AccountCoinsRequest :  IEquatable<AccountCoinsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountCoinsRequest" /> class.
        /// </summary>
        /// <param name="networkIdentifier">networkIdentifier (required).</param>
        /// <param name="accountIdentifier">accountIdentifier (required).</param>
        /// <param name="includeMempool">Include state from the mempool when looking up an account&#x27;s unspent coins. Note, using this functionality breaks any guarantee of idempotency. (required).</param>
        /// <param name="currencies">In some cases, the caller may not want to retrieve coins for all currencies for an AccountIdentifier. If the currencies field is populated, only coins for the specified currencies will be returned. If not populated, all unspent coins will be returned..</param>
        public AccountCoinsRequest(NetworkIdentifier networkIdentifier = default(NetworkIdentifier), AccountIdentifier accountIdentifier = default(AccountIdentifier), bool? includeMempool = default(bool?), List<Currency> currencies = default(List<Currency>))
        {
            // to ensure "networkIdentifier" is required (not null)
            if (networkIdentifier == null)
            {
                throw new InvalidDataException("networkIdentifier is a required property for AccountCoinsRequest and cannot be null");
            }
            else
            {
                this.NetworkIdentifier = networkIdentifier;
            }
            // to ensure "accountIdentifier" is required (not null)
            if (accountIdentifier == null)
            {
                throw new InvalidDataException("accountIdentifier is a required property for AccountCoinsRequest and cannot be null");
            }
            else
            {
                this.AccountIdentifier = accountIdentifier;
            }
            // to ensure "includeMempool" is required (not null)
            if (includeMempool == null)
            {
                throw new InvalidDataException("includeMempool is a required property for AccountCoinsRequest and cannot be null");
            }
            else
            {
                this.IncludeMempool = includeMempool;
            }
            this.Currencies = currencies;
        }
        
        /// <summary>
        /// Gets or Sets NetworkIdentifier
        /// </summary>
        [DataMember(Name="network_identifier", EmitDefaultValue=false)]
        public NetworkIdentifier NetworkIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdentifier
        /// </summary>
        [DataMember(Name="account_identifier", EmitDefaultValue=false)]
        public AccountIdentifier AccountIdentifier { get; set; }

        /// <summary>
        /// Include state from the mempool when looking up an account&#x27;s unspent coins. Note, using this functionality breaks any guarantee of idempotency.
        /// </summary>
        /// <value>Include state from the mempool when looking up an account&#x27;s unspent coins. Note, using this functionality breaks any guarantee of idempotency.</value>
        [DataMember(Name="include_mempool", EmitDefaultValue=false)]
        public bool? IncludeMempool { get; set; }

        /// <summary>
        /// In some cases, the caller may not want to retrieve coins for all currencies for an AccountIdentifier. If the currencies field is populated, only coins for the specified currencies will be returned. If not populated, all unspent coins will be returned.
        /// </summary>
        /// <value>In some cases, the caller may not want to retrieve coins for all currencies for an AccountIdentifier. If the currencies field is populated, only coins for the specified currencies will be returned. If not populated, all unspent coins will be returned.</value>
        [DataMember(Name="currencies", EmitDefaultValue=false)]
        public List<Currency> Currencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountCoinsRequest {\n");
            sb.Append("  NetworkIdentifier: ").Append(NetworkIdentifier).Append("\n");
            sb.Append("  AccountIdentifier: ").Append(AccountIdentifier).Append("\n");
            sb.Append("  IncludeMempool: ").Append(IncludeMempool).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountCoinsRequest);
        }

        /// <summary>
        /// Returns true if AccountCoinsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountCoinsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountCoinsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkIdentifier == input.NetworkIdentifier ||
                    (this.NetworkIdentifier != null &&
                    this.NetworkIdentifier.Equals(input.NetworkIdentifier))
                ) && 
                (
                    this.AccountIdentifier == input.AccountIdentifier ||
                    (this.AccountIdentifier != null &&
                    this.AccountIdentifier.Equals(input.AccountIdentifier))
                ) && 
                (
                    this.IncludeMempool == input.IncludeMempool ||
                    (this.IncludeMempool != null &&
                    this.IncludeMempool.Equals(input.IncludeMempool))
                ) && 
                (
                    this.Currencies == input.Currencies ||
                    this.Currencies != null &&
                    input.Currencies != null &&
                    this.Currencies.SequenceEqual(input.Currencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkIdentifier != null)
                    hashCode = hashCode * 59 + this.NetworkIdentifier.GetHashCode();
                if (this.AccountIdentifier != null)
                    hashCode = hashCode * 59 + this.AccountIdentifier.GetHashCode();
                if (this.IncludeMempool != null)
                    hashCode = hashCode * 59 + this.IncludeMempool.GetHashCode();
                if (this.Currencies != null)
                    hashCode = hashCode * 59 + this.Currencies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
