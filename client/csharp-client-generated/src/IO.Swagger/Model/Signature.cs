/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Signature contains the payload that was signed, the public keys of the keypairs used to produce the signature, the signature (encoded in hex), and the SignatureType. PublicKey is often times not known during construction of the signing payloads but may be needed to combine signatures properly.
    /// </summary>
    [DataContract]
        public partial class Signature :  IEquatable<Signature>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Signature" /> class.
        /// </summary>
        /// <param name="signingPayload">signingPayload (required).</param>
        /// <param name="publicKey">publicKey (required).</param>
        /// <param name="signatureType">signatureType (required).</param>
        /// <param name="hexBytes">hexBytes (required).</param>
        public Signature(SigningPayload signingPayload = default(SigningPayload), PublicKey publicKey = default(PublicKey), SignatureType signatureType = default(SignatureType), string hexBytes = default(string))
        {
            // to ensure "signingPayload" is required (not null)
            if (signingPayload == null)
            {
                throw new InvalidDataException("signingPayload is a required property for Signature and cannot be null");
            }
            else
            {
                this.SigningPayload = signingPayload;
            }
            // to ensure "publicKey" is required (not null)
            if (publicKey == null)
            {
                throw new InvalidDataException("publicKey is a required property for Signature and cannot be null");
            }
            else
            {
                this.PublicKey = publicKey;
            }
            // to ensure "signatureType" is required (not null)
            if (signatureType == null)
            {
                throw new InvalidDataException("signatureType is a required property for Signature and cannot be null");
            }
            else
            {
                this.SignatureType = signatureType;
            }
            // to ensure "hexBytes" is required (not null)
            if (hexBytes == null)
            {
                throw new InvalidDataException("hexBytes is a required property for Signature and cannot be null");
            }
            else
            {
                this.HexBytes = hexBytes;
            }
        }
        
        /// <summary>
        /// Gets or Sets SigningPayload
        /// </summary>
        [DataMember(Name="signing_payload", EmitDefaultValue=false)]
        public SigningPayload SigningPayload { get; set; }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [DataMember(Name="public_key", EmitDefaultValue=false)]
        public PublicKey PublicKey { get; set; }

        /// <summary>
        /// Gets or Sets SignatureType
        /// </summary>
        [DataMember(Name="signature_type", EmitDefaultValue=false)]
        public SignatureType SignatureType { get; set; }

        /// <summary>
        /// Gets or Sets HexBytes
        /// </summary>
        [DataMember(Name="hex_bytes", EmitDefaultValue=false)]
        public string HexBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Signature {\n");
            sb.Append("  SigningPayload: ").Append(SigningPayload).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  SignatureType: ").Append(SignatureType).Append("\n");
            sb.Append("  HexBytes: ").Append(HexBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Signature);
        }

        /// <summary>
        /// Returns true if Signature instances are equal
        /// </summary>
        /// <param name="input">Instance of Signature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Signature input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SigningPayload == input.SigningPayload ||
                    (this.SigningPayload != null &&
                    this.SigningPayload.Equals(input.SigningPayload))
                ) && 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                ) && 
                (
                    this.SignatureType == input.SignatureType ||
                    (this.SignatureType != null &&
                    this.SignatureType.Equals(input.SignatureType))
                ) && 
                (
                    this.HexBytes == input.HexBytes ||
                    (this.HexBytes != null &&
                    this.HexBytes.Equals(input.HexBytes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SigningPayload != null)
                    hashCode = hashCode * 59 + this.SigningPayload.GetHashCode();
                if (this.PublicKey != null)
                    hashCode = hashCode * 59 + this.PublicKey.GetHashCode();
                if (this.SignatureType != null)
                    hashCode = hashCode * 59 + this.SignatureType.GetHashCode();
                if (this.HexBytes != null)
                    hashCode = hashCode * 59 + this.HexBytes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
