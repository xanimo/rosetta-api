/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ConstructionParseRequest is the input to the &#x60;/construction/parse&#x60; endpoint. It allows the caller to parse either an unsigned or signed transaction.
    /// </summary>
    [DataContract]
        public partial class ConstructionParseRequest :  IEquatable<ConstructionParseRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionParseRequest" /> class.
        /// </summary>
        /// <param name="networkIdentifier">networkIdentifier (required).</param>
        /// <param name="signed">Signed is a boolean indicating whether the transaction is signed. (required).</param>
        /// <param name="transaction">This must be either the unsigned transaction blob returned by &#x60;/construction/payloads&#x60; or the signed transaction blob returned by &#x60;/construction/combine&#x60;. (required).</param>
        public ConstructionParseRequest(NetworkIdentifier networkIdentifier = default(NetworkIdentifier), bool? signed = default(bool?), string transaction = default(string))
        {
            // to ensure "networkIdentifier" is required (not null)
            if (networkIdentifier == null)
            {
                throw new InvalidDataException("networkIdentifier is a required property for ConstructionParseRequest and cannot be null");
            }
            else
            {
                this.NetworkIdentifier = networkIdentifier;
            }
            // to ensure "signed" is required (not null)
            if (signed == null)
            {
                throw new InvalidDataException("signed is a required property for ConstructionParseRequest and cannot be null");
            }
            else
            {
                this.Signed = signed;
            }
            // to ensure "transaction" is required (not null)
            if (transaction == null)
            {
                throw new InvalidDataException("transaction is a required property for ConstructionParseRequest and cannot be null");
            }
            else
            {
                this.Transaction = transaction;
            }
        }
        
        /// <summary>
        /// Gets or Sets NetworkIdentifier
        /// </summary>
        [DataMember(Name="network_identifier", EmitDefaultValue=false)]
        public NetworkIdentifier NetworkIdentifier { get; set; }

        /// <summary>
        /// Signed is a boolean indicating whether the transaction is signed.
        /// </summary>
        /// <value>Signed is a boolean indicating whether the transaction is signed.</value>
        [DataMember(Name="signed", EmitDefaultValue=false)]
        public bool? Signed { get; set; }

        /// <summary>
        /// This must be either the unsigned transaction blob returned by &#x60;/construction/payloads&#x60; or the signed transaction blob returned by &#x60;/construction/combine&#x60;.
        /// </summary>
        /// <value>This must be either the unsigned transaction blob returned by &#x60;/construction/payloads&#x60; or the signed transaction blob returned by &#x60;/construction/combine&#x60;.</value>
        [DataMember(Name="transaction", EmitDefaultValue=false)]
        public string Transaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConstructionParseRequest {\n");
            sb.Append("  NetworkIdentifier: ").Append(NetworkIdentifier).Append("\n");
            sb.Append("  Signed: ").Append(Signed).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstructionParseRequest);
        }

        /// <summary>
        /// Returns true if ConstructionParseRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstructionParseRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstructionParseRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkIdentifier == input.NetworkIdentifier ||
                    (this.NetworkIdentifier != null &&
                    this.NetworkIdentifier.Equals(input.NetworkIdentifier))
                ) && 
                (
                    this.Signed == input.Signed ||
                    (this.Signed != null &&
                    this.Signed.Equals(input.Signed))
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkIdentifier != null)
                    hashCode = hashCode * 59 + this.NetworkIdentifier.GetHashCode();
                if (this.Signed != null)
                    hashCode = hashCode * 59 + this.Signed.GetHashCode();
                if (this.Transaction != null)
                    hashCode = hashCode * 59 + this.Transaction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
