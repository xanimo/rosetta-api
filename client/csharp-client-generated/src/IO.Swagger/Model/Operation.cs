/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Operations contain all balance-changing information within a transaction. They are always one-sided (only affect 1 AccountIdentifier) and can succeed or fail independently from a Transaction. Operations are used both to represent on-chain data (Data API) and to construct new transactions (Construction API), creating a standard interface for reading and writing to blockchains.
    /// </summary>
    [DataContract]
        public partial class Operation :  IEquatable<Operation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Operation" /> class.
        /// </summary>
        /// <param name="operationIdentifier">operationIdentifier (required).</param>
        /// <param name="relatedOperations">Restrict referenced related_operations to identifier indices &lt; the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree..</param>
        /// <param name="type">Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data. (required).</param>
        /// <param name="status">Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the &#x60;/block&#x60; and &#x60;/block/transaction&#x60; endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called \&quot;intent\&quot; in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed)..</param>
        /// <param name="account">account.</param>
        /// <param name="amount">amount.</param>
        /// <param name="coinChange">coinChange.</param>
        /// <param name="metadata">metadata.</param>
        public Operation(OperationIdentifier operationIdentifier = default(OperationIdentifier), List<OperationIdentifier> relatedOperations = default(List<OperationIdentifier>), string type = default(string), string status = default(string), AccountIdentifier account = default(AccountIdentifier), Amount amount = default(Amount), CoinChange coinChange = default(CoinChange), Object metadata = default(Object))
        {
            // to ensure "operationIdentifier" is required (not null)
            if (operationIdentifier == null)
            {
                throw new InvalidDataException("operationIdentifier is a required property for Operation and cannot be null");
            }
            else
            {
                this.OperationIdentifier = operationIdentifier;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Operation and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.RelatedOperations = relatedOperations;
            this.Status = status;
            this.Account = account;
            this.Amount = amount;
            this.CoinChange = coinChange;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Gets or Sets OperationIdentifier
        /// </summary>
        [DataMember(Name="operation_identifier", EmitDefaultValue=false)]
        public OperationIdentifier OperationIdentifier { get; set; }

        /// <summary>
        /// Restrict referenced related_operations to identifier indices &lt; the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.
        /// </summary>
        /// <value>Restrict referenced related_operations to identifier indices &lt; the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.</value>
        [DataMember(Name="related_operations", EmitDefaultValue=false)]
        public List<OperationIdentifier> RelatedOperations { get; set; }

        /// <summary>
        /// Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data.
        /// </summary>
        /// <value>Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the &#x60;/block&#x60; and &#x60;/block/transaction&#x60; endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called \&quot;intent\&quot; in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed).
        /// </summary>
        /// <value>Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the &#x60;/block&#x60; and &#x60;/block/transaction&#x60; endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called \&quot;intent\&quot; in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed).</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public AccountIdentifier Account { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets CoinChange
        /// </summary>
        [DataMember(Name="coin_change", EmitDefaultValue=false)]
        public CoinChange CoinChange { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Operation {\n");
            sb.Append("  OperationIdentifier: ").Append(OperationIdentifier).Append("\n");
            sb.Append("  RelatedOperations: ").Append(RelatedOperations).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CoinChange: ").Append(CoinChange).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Operation);
        }

        /// <summary>
        /// Returns true if Operation instances are equal
        /// </summary>
        /// <param name="input">Instance of Operation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Operation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OperationIdentifier == input.OperationIdentifier ||
                    (this.OperationIdentifier != null &&
                    this.OperationIdentifier.Equals(input.OperationIdentifier))
                ) && 
                (
                    this.RelatedOperations == input.RelatedOperations ||
                    this.RelatedOperations != null &&
                    input.RelatedOperations != null &&
                    this.RelatedOperations.SequenceEqual(input.RelatedOperations)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CoinChange == input.CoinChange ||
                    (this.CoinChange != null &&
                    this.CoinChange.Equals(input.CoinChange))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OperationIdentifier != null)
                    hashCode = hashCode * 59 + this.OperationIdentifier.GetHashCode();
                if (this.RelatedOperations != null)
                    hashCode = hashCode * 59 + this.RelatedOperations.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CoinChange != null)
                    hashCode = hashCode * 59 + this.CoinChange.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
