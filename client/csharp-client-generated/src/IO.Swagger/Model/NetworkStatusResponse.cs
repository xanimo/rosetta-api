/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NetworkStatusResponse contains basic information about the node&#x27;s view of a blockchain network. It is assumed that any BlockIdentifier.Index less than or equal to CurrentBlockIdentifier.Index can be queried. If a Rosetta implementation prunes historical state, it should populate the optional &#x60;oldest_block_identifier&#x60; field with the oldest block available to query. If this is not populated, it is assumed that the &#x60;genesis_block_identifier&#x60; is the oldest queryable block. If a Rosetta implementation performs some pre-sync before it is possible to query blocks, sync_status should be populated so that clients can still monitor healthiness. Without this field, it may appear that the implementation is stuck syncing and needs to be terminated.
    /// </summary>
    [DataContract]
        public partial class NetworkStatusResponse :  IEquatable<NetworkStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkStatusResponse" /> class.
        /// </summary>
        /// <param name="currentBlockIdentifier">currentBlockIdentifier (required).</param>
        /// <param name="currentBlockTimestamp">currentBlockTimestamp (required).</param>
        /// <param name="genesisBlockIdentifier">genesisBlockIdentifier (required).</param>
        /// <param name="oldestBlockIdentifier">oldestBlockIdentifier.</param>
        /// <param name="syncStatus">syncStatus.</param>
        /// <param name="peers">peers (required).</param>
        public NetworkStatusResponse(BlockIdentifier currentBlockIdentifier = default(BlockIdentifier), long? currentBlockTimestamp = default(long?), BlockIdentifier genesisBlockIdentifier = default(BlockIdentifier), BlockIdentifier oldestBlockIdentifier = default(BlockIdentifier), SyncStatus syncStatus = default(SyncStatus), List<Peer> peers = default(List<Peer>))
        {
            // to ensure "currentBlockIdentifier" is required (not null)
            if (currentBlockIdentifier == null)
            {
                throw new InvalidDataException("currentBlockIdentifier is a required property for NetworkStatusResponse and cannot be null");
            }
            else
            {
                this.CurrentBlockIdentifier = currentBlockIdentifier;
            }
            // to ensure "currentBlockTimestamp" is required (not null)
            if (currentBlockTimestamp == null)
            {
                throw new InvalidDataException("currentBlockTimestamp is a required property for NetworkStatusResponse and cannot be null");
            }
            else
            {
                this.CurrentBlockTimestamp = currentBlockTimestamp;
            }
            // to ensure "genesisBlockIdentifier" is required (not null)
            if (genesisBlockIdentifier == null)
            {
                throw new InvalidDataException("genesisBlockIdentifier is a required property for NetworkStatusResponse and cannot be null");
            }
            else
            {
                this.GenesisBlockIdentifier = genesisBlockIdentifier;
            }
            // to ensure "peers" is required (not null)
            if (peers == null)
            {
                throw new InvalidDataException("peers is a required property for NetworkStatusResponse and cannot be null");
            }
            else
            {
                this.Peers = peers;
            }
            this.OldestBlockIdentifier = oldestBlockIdentifier;
            this.SyncStatus = syncStatus;
        }
        
        /// <summary>
        /// Gets or Sets CurrentBlockIdentifier
        /// </summary>
        [DataMember(Name="current_block_identifier", EmitDefaultValue=false)]
        public BlockIdentifier CurrentBlockIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBlockTimestamp
        /// </summary>
        [DataMember(Name="current_block_timestamp", EmitDefaultValue=false)]
        public long? CurrentBlockTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets GenesisBlockIdentifier
        /// </summary>
        [DataMember(Name="genesis_block_identifier", EmitDefaultValue=false)]
        public BlockIdentifier GenesisBlockIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets OldestBlockIdentifier
        /// </summary>
        [DataMember(Name="oldest_block_identifier", EmitDefaultValue=false)]
        public BlockIdentifier OldestBlockIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SyncStatus
        /// </summary>
        [DataMember(Name="sync_status", EmitDefaultValue=false)]
        public SyncStatus SyncStatus { get; set; }

        /// <summary>
        /// Gets or Sets Peers
        /// </summary>
        [DataMember(Name="peers", EmitDefaultValue=false)]
        public List<Peer> Peers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkStatusResponse {\n");
            sb.Append("  CurrentBlockIdentifier: ").Append(CurrentBlockIdentifier).Append("\n");
            sb.Append("  CurrentBlockTimestamp: ").Append(CurrentBlockTimestamp).Append("\n");
            sb.Append("  GenesisBlockIdentifier: ").Append(GenesisBlockIdentifier).Append("\n");
            sb.Append("  OldestBlockIdentifier: ").Append(OldestBlockIdentifier).Append("\n");
            sb.Append("  SyncStatus: ").Append(SyncStatus).Append("\n");
            sb.Append("  Peers: ").Append(Peers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkStatusResponse);
        }

        /// <summary>
        /// Returns true if NetworkStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkStatusResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentBlockIdentifier == input.CurrentBlockIdentifier ||
                    (this.CurrentBlockIdentifier != null &&
                    this.CurrentBlockIdentifier.Equals(input.CurrentBlockIdentifier))
                ) && 
                (
                    this.CurrentBlockTimestamp == input.CurrentBlockTimestamp ||
                    (this.CurrentBlockTimestamp != null &&
                    this.CurrentBlockTimestamp.Equals(input.CurrentBlockTimestamp))
                ) && 
                (
                    this.GenesisBlockIdentifier == input.GenesisBlockIdentifier ||
                    (this.GenesisBlockIdentifier != null &&
                    this.GenesisBlockIdentifier.Equals(input.GenesisBlockIdentifier))
                ) && 
                (
                    this.OldestBlockIdentifier == input.OldestBlockIdentifier ||
                    (this.OldestBlockIdentifier != null &&
                    this.OldestBlockIdentifier.Equals(input.OldestBlockIdentifier))
                ) && 
                (
                    this.SyncStatus == input.SyncStatus ||
                    (this.SyncStatus != null &&
                    this.SyncStatus.Equals(input.SyncStatus))
                ) && 
                (
                    this.Peers == input.Peers ||
                    this.Peers != null &&
                    input.Peers != null &&
                    this.Peers.SequenceEqual(input.Peers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentBlockIdentifier != null)
                    hashCode = hashCode * 59 + this.CurrentBlockIdentifier.GetHashCode();
                if (this.CurrentBlockTimestamp != null)
                    hashCode = hashCode * 59 + this.CurrentBlockTimestamp.GetHashCode();
                if (this.GenesisBlockIdentifier != null)
                    hashCode = hashCode * 59 + this.GenesisBlockIdentifier.GetHashCode();
                if (this.OldestBlockIdentifier != null)
                    hashCode = hashCode * 59 + this.OldestBlockIdentifier.GetHashCode();
                if (this.SyncStatus != null)
                    hashCode = hashCode * 59 + this.SyncStatus.GetHashCode();
                if (this.Peers != null)
                    hashCode = hashCode * 59 + this.Peers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
