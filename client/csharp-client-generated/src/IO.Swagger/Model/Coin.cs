/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Coin contains its unique identifier and the amount it represents.
    /// </summary>
    [DataContract]
        public partial class Coin :  IEquatable<Coin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Coin" /> class.
        /// </summary>
        /// <param name="coinIdentifier">coinIdentifier (required).</param>
        /// <param name="amount">amount (required).</param>
        public Coin(CoinIdentifier coinIdentifier = default(CoinIdentifier), Amount amount = default(Amount))
        {
            // to ensure "coinIdentifier" is required (not null)
            if (coinIdentifier == null)
            {
                throw new InvalidDataException("coinIdentifier is a required property for Coin and cannot be null");
            }
            else
            {
                this.CoinIdentifier = coinIdentifier;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for Coin and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
        }
        
        /// <summary>
        /// Gets or Sets CoinIdentifier
        /// </summary>
        [DataMember(Name="coin_identifier", EmitDefaultValue=false)]
        public CoinIdentifier CoinIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Coin {\n");
            sb.Append("  CoinIdentifier: ").Append(CoinIdentifier).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Coin);
        }

        /// <summary>
        /// Returns true if Coin instances are equal
        /// </summary>
        /// <param name="input">Instance of Coin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Coin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CoinIdentifier == input.CoinIdentifier ||
                    (this.CoinIdentifier != null &&
                    this.CoinIdentifier.Equals(input.CoinIdentifier))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CoinIdentifier != null)
                    hashCode = hashCode * 59 + this.CoinIdentifier.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
