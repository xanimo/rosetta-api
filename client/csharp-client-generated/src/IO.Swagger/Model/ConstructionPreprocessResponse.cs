/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ConstructionPreprocessResponse contains &#x60;options&#x60; that will be sent unmodified to &#x60;/construction/metadata&#x60;. If it is not necessary to make a request to &#x60;/construction/metadata&#x60;, &#x60;options&#x60; should be omitted.  Some blockchains require the PublicKey of particular AccountIdentifiers to construct a valid transaction. To fetch these PublicKeys, populate &#x60;required_public_keys&#x60; with the AccountIdentifiers associated with the desired PublicKeys. If it is not necessary to retrieve any PublicKeys for construction, &#x60;required_public_keys&#x60; should be omitted.
    /// </summary>
    [DataContract]
        public partial class ConstructionPreprocessResponse :  IEquatable<ConstructionPreprocessResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionPreprocessResponse" /> class.
        /// </summary>
        /// <param name="options">The options that will be sent directly to &#x60;/construction/metadata&#x60; by the caller..</param>
        /// <param name="requiredPublicKeys">requiredPublicKeys.</param>
        public ConstructionPreprocessResponse(Object options = default(Object), List<AccountIdentifier> requiredPublicKeys = default(List<AccountIdentifier>))
        {
            this.Options = options;
            this.RequiredPublicKeys = requiredPublicKeys;
        }
        
        /// <summary>
        /// The options that will be sent directly to &#x60;/construction/metadata&#x60; by the caller.
        /// </summary>
        /// <value>The options that will be sent directly to &#x60;/construction/metadata&#x60; by the caller.</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public Object Options { get; set; }

        /// <summary>
        /// Gets or Sets RequiredPublicKeys
        /// </summary>
        [DataMember(Name="required_public_keys", EmitDefaultValue=false)]
        public List<AccountIdentifier> RequiredPublicKeys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConstructionPreprocessResponse {\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  RequiredPublicKeys: ").Append(RequiredPublicKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstructionPreprocessResponse);
        }

        /// <summary>
        /// Returns true if ConstructionPreprocessResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstructionPreprocessResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstructionPreprocessResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.RequiredPublicKeys == input.RequiredPublicKeys ||
                    this.RequiredPublicKeys != null &&
                    input.RequiredPublicKeys != null &&
                    this.RequiredPublicKeys.SequenceEqual(input.RequiredPublicKeys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.RequiredPublicKeys != null)
                    hashCode = hashCode * 59 + this.RequiredPublicKeys.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
