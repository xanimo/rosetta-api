/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A NetworkListResponse contains all NetworkIdentifiers that the node can serve information for.
    /// </summary>
    [DataContract]
        public partial class NetworkListResponse :  IEquatable<NetworkListResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkListResponse" /> class.
        /// </summary>
        /// <param name="networkIdentifiers">networkIdentifiers (required).</param>
        public NetworkListResponse(List<NetworkIdentifier> networkIdentifiers = default(List<NetworkIdentifier>))
        {
            // to ensure "networkIdentifiers" is required (not null)
            if (networkIdentifiers == null)
            {
                throw new InvalidDataException("networkIdentifiers is a required property for NetworkListResponse and cannot be null");
            }
            else
            {
                this.NetworkIdentifiers = networkIdentifiers;
            }
        }
        
        /// <summary>
        /// Gets or Sets NetworkIdentifiers
        /// </summary>
        [DataMember(Name="network_identifiers", EmitDefaultValue=false)]
        public List<NetworkIdentifier> NetworkIdentifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkListResponse {\n");
            sb.Append("  NetworkIdentifiers: ").Append(NetworkIdentifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkListResponse);
        }

        /// <summary>
        /// Returns true if NetworkListResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkListResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkListResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkIdentifiers == input.NetworkIdentifiers ||
                    this.NetworkIdentifiers != null &&
                    input.NetworkIdentifiers != null &&
                    this.NetworkIdentifiers.SequenceEqual(input.NetworkIdentifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkIdentifiers != null)
                    hashCode = hashCode * 59 + this.NetworkIdentifiers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
