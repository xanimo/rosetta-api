/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PublicKey contains a public key byte array for a particular CurveType encoded in hex. Note that there is no PrivateKey struct as this is NEVER the concern of an implementation.
    /// </summary>
    [DataContract]
        public partial class PublicKey :  IEquatable<PublicKey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicKey" /> class.
        /// </summary>
        /// <param name="hexBytes">Hex-encoded public key bytes in the format specified by the CurveType. (required).</param>
        /// <param name="curveType">curveType (required).</param>
        public PublicKey(string hexBytes = default(string), CurveType curveType = default(CurveType))
        {
            // to ensure "hexBytes" is required (not null)
            if (hexBytes == null)
            {
                throw new InvalidDataException("hexBytes is a required property for PublicKey and cannot be null");
            }
            else
            {
                this.HexBytes = hexBytes;
            }
            // to ensure "curveType" is required (not null)
            if (curveType == null)
            {
                throw new InvalidDataException("curveType is a required property for PublicKey and cannot be null");
            }
            else
            {
                this.CurveType = curveType;
            }
        }
        
        /// <summary>
        /// Hex-encoded public key bytes in the format specified by the CurveType.
        /// </summary>
        /// <value>Hex-encoded public key bytes in the format specified by the CurveType.</value>
        [DataMember(Name="hex_bytes", EmitDefaultValue=false)]
        public string HexBytes { get; set; }

        /// <summary>
        /// Gets or Sets CurveType
        /// </summary>
        [DataMember(Name="curve_type", EmitDefaultValue=false)]
        public CurveType CurveType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicKey {\n");
            sb.Append("  HexBytes: ").Append(HexBytes).Append("\n");
            sb.Append("  CurveType: ").Append(CurveType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicKey);
        }

        /// <summary>
        /// Returns true if PublicKey instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicKey input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HexBytes == input.HexBytes ||
                    (this.HexBytes != null &&
                    this.HexBytes.Equals(input.HexBytes))
                ) && 
                (
                    this.CurveType == input.CurveType ||
                    (this.CurveType != null &&
                    this.CurveType.Equals(input.CurveType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HexBytes != null)
                    hashCode = hashCode * 59 + this.HexBytes.GetHashCode();
                if (this.CurveType != null)
                    hashCode = hashCode * 59 + this.CurveType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
