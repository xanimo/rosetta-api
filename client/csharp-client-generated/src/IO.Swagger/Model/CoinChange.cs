/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CoinChange is used to represent a change in state of a some coin identified by a coin_identifier. This object is part of the Operation model and must be populated for UTXO-based blockchains. Coincidentally, this abstraction of UTXOs allows for supporting both account-based transfers and UTXO-based transfers on the same blockchain (when a transfer is account-based, don&#x27;t populate this model).
    /// </summary>
    [DataContract]
        public partial class CoinChange :  IEquatable<CoinChange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoinChange" /> class.
        /// </summary>
        /// <param name="coinIdentifier">coinIdentifier (required).</param>
        /// <param name="coinAction">coinAction (required).</param>
        public CoinChange(CoinIdentifier coinIdentifier = default(CoinIdentifier), CoinAction coinAction = default(CoinAction))
        {
            // to ensure "coinIdentifier" is required (not null)
            if (coinIdentifier == null)
            {
                throw new InvalidDataException("coinIdentifier is a required property for CoinChange and cannot be null");
            }
            else
            {
                this.CoinIdentifier = coinIdentifier;
            }
            // to ensure "coinAction" is required (not null)
            if (coinAction == null)
            {
                throw new InvalidDataException("coinAction is a required property for CoinChange and cannot be null");
            }
            else
            {
                this.CoinAction = coinAction;
            }
        }
        
        /// <summary>
        /// Gets or Sets CoinIdentifier
        /// </summary>
        [DataMember(Name="coin_identifier", EmitDefaultValue=false)]
        public CoinIdentifier CoinIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CoinAction
        /// </summary>
        [DataMember(Name="coin_action", EmitDefaultValue=false)]
        public CoinAction CoinAction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoinChange {\n");
            sb.Append("  CoinIdentifier: ").Append(CoinIdentifier).Append("\n");
            sb.Append("  CoinAction: ").Append(CoinAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CoinChange);
        }

        /// <summary>
        /// Returns true if CoinChange instances are equal
        /// </summary>
        /// <param name="input">Instance of CoinChange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoinChange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CoinIdentifier == input.CoinIdentifier ||
                    (this.CoinIdentifier != null &&
                    this.CoinIdentifier.Equals(input.CoinIdentifier))
                ) && 
                (
                    this.CoinAction == input.CoinAction ||
                    (this.CoinAction != null &&
                    this.CoinAction.Equals(input.CoinAction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CoinIdentifier != null)
                    hashCode = hashCode * 59 + this.CoinIdentifier.GetHashCode();
                if (this.CoinAction != null)
                    hashCode = hashCode * 59 + this.CoinAction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
