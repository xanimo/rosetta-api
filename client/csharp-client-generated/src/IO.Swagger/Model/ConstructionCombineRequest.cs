/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ConstructionCombineRequest is the input to the &#x60;/construction/combine&#x60; endpoint. It contains the unsigned transaction blob returned by &#x60;/construction/payloads&#x60; and all required signatures to create a network transaction.
    /// </summary>
    [DataContract]
        public partial class ConstructionCombineRequest :  IEquatable<ConstructionCombineRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstructionCombineRequest" /> class.
        /// </summary>
        /// <param name="networkIdentifier">networkIdentifier (required).</param>
        /// <param name="unsignedTransaction">unsignedTransaction (required).</param>
        /// <param name="signatures">signatures (required).</param>
        public ConstructionCombineRequest(NetworkIdentifier networkIdentifier = default(NetworkIdentifier), string unsignedTransaction = default(string), List<Signature> signatures = default(List<Signature>))
        {
            // to ensure "networkIdentifier" is required (not null)
            if (networkIdentifier == null)
            {
                throw new InvalidDataException("networkIdentifier is a required property for ConstructionCombineRequest and cannot be null");
            }
            else
            {
                this.NetworkIdentifier = networkIdentifier;
            }
            // to ensure "unsignedTransaction" is required (not null)
            if (unsignedTransaction == null)
            {
                throw new InvalidDataException("unsignedTransaction is a required property for ConstructionCombineRequest and cannot be null");
            }
            else
            {
                this.UnsignedTransaction = unsignedTransaction;
            }
            // to ensure "signatures" is required (not null)
            if (signatures == null)
            {
                throw new InvalidDataException("signatures is a required property for ConstructionCombineRequest and cannot be null");
            }
            else
            {
                this.Signatures = signatures;
            }
        }
        
        /// <summary>
        /// Gets or Sets NetworkIdentifier
        /// </summary>
        [DataMember(Name="network_identifier", EmitDefaultValue=false)]
        public NetworkIdentifier NetworkIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets UnsignedTransaction
        /// </summary>
        [DataMember(Name="unsigned_transaction", EmitDefaultValue=false)]
        public string UnsignedTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Signatures
        /// </summary>
        [DataMember(Name="signatures", EmitDefaultValue=false)]
        public List<Signature> Signatures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConstructionCombineRequest {\n");
            sb.Append("  NetworkIdentifier: ").Append(NetworkIdentifier).Append("\n");
            sb.Append("  UnsignedTransaction: ").Append(UnsignedTransaction).Append("\n");
            sb.Append("  Signatures: ").Append(Signatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstructionCombineRequest);
        }

        /// <summary>
        /// Returns true if ConstructionCombineRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstructionCombineRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstructionCombineRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkIdentifier == input.NetworkIdentifier ||
                    (this.NetworkIdentifier != null &&
                    this.NetworkIdentifier.Equals(input.NetworkIdentifier))
                ) && 
                (
                    this.UnsignedTransaction == input.UnsignedTransaction ||
                    (this.UnsignedTransaction != null &&
                    this.UnsignedTransaction.Equals(input.UnsignedTransaction))
                ) && 
                (
                    this.Signatures == input.Signatures ||
                    this.Signatures != null &&
                    input.Signatures != null &&
                    this.Signatures.SequenceEqual(input.Signatures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkIdentifier != null)
                    hashCode = hashCode * 59 + this.NetworkIdentifier.GetHashCode();
                if (this.UnsignedTransaction != null)
                    hashCode = hashCode * 59 + this.UnsignedTransaction.GetHashCode();
                if (this.Signatures != null)
                    hashCode = hashCode * 59 + this.Signatures.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
