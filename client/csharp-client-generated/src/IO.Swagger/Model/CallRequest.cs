/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CallRequest is the input to the &#x60;/call&#x60; endpoint.
    /// </summary>
    [DataContract]
        public partial class CallRequest :  IEquatable<CallRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallRequest" /> class.
        /// </summary>
        /// <param name="networkIdentifier">networkIdentifier (required).</param>
        /// <param name="method">Method is some network-specific procedure call. This method could map to a network-specific RPC endpoint, a method in an SDK generated from a smart contract, or some hybrid of the two. The implementation must define all available methods in the Allow object. However, it is up to the caller to determine which parameters to provide when invoking &#x60;/call&#x60;. (required).</param>
        /// <param name="parameters">Parameters is some network-specific argument for a method. It is up to the caller to determine which parameters to provide when invoking &#x60;/call&#x60;. (required).</param>
        public CallRequest(NetworkIdentifier networkIdentifier = default(NetworkIdentifier), string method = default(string), Object parameters = default(Object))
        {
            // to ensure "networkIdentifier" is required (not null)
            if (networkIdentifier == null)
            {
                throw new InvalidDataException("networkIdentifier is a required property for CallRequest and cannot be null");
            }
            else
            {
                this.NetworkIdentifier = networkIdentifier;
            }
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for CallRequest and cannot be null");
            }
            else
            {
                this.Method = method;
            }
            // to ensure "parameters" is required (not null)
            if (parameters == null)
            {
                throw new InvalidDataException("parameters is a required property for CallRequest and cannot be null");
            }
            else
            {
                this.Parameters = parameters;
            }
        }
        
        /// <summary>
        /// Gets or Sets NetworkIdentifier
        /// </summary>
        [DataMember(Name="network_identifier", EmitDefaultValue=false)]
        public NetworkIdentifier NetworkIdentifier { get; set; }

        /// <summary>
        /// Method is some network-specific procedure call. This method could map to a network-specific RPC endpoint, a method in an SDK generated from a smart contract, or some hybrid of the two. The implementation must define all available methods in the Allow object. However, it is up to the caller to determine which parameters to provide when invoking &#x60;/call&#x60;.
        /// </summary>
        /// <value>Method is some network-specific procedure call. This method could map to a network-specific RPC endpoint, a method in an SDK generated from a smart contract, or some hybrid of the two. The implementation must define all available methods in the Allow object. However, it is up to the caller to determine which parameters to provide when invoking &#x60;/call&#x60;.</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// Parameters is some network-specific argument for a method. It is up to the caller to determine which parameters to provide when invoking &#x60;/call&#x60;.
        /// </summary>
        /// <value>Parameters is some network-specific argument for a method. It is up to the caller to determine which parameters to provide when invoking &#x60;/call&#x60;.</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Object Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRequest {\n");
            sb.Append("  NetworkIdentifier: ").Append(NetworkIdentifier).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallRequest);
        }

        /// <summary>
        /// Returns true if CallRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkIdentifier == input.NetworkIdentifier ||
                    (this.NetworkIdentifier != null &&
                    this.NetworkIdentifier.Equals(input.NetworkIdentifier))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkIdentifier != null)
                    hashCode = hashCode * 59 + this.NetworkIdentifier.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
