/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BalanceExemption indicates that the balance for an exempt account could change without a corresponding Operation. This typically occurs with staking rewards, vesting balances, and Currencies with a dynamic supply. Currently, it is possible to exempt an account from strict reconciliation by SubAccountIdentifier.Address or by Currency. This means that any account with SubAccountIdentifier.Address would be exempt or any balance of a particular Currency would be exempt, respectively. BalanceExemptions should be used sparingly as they may introduce significant complexity for integrators that attempt to reconcile all account balance changes. If your implementation relies on any BalanceExemptions, you MUST implement historical balance lookup (the ability to query an account balance at any BlockIdentifier).
    /// </summary>
    [DataContract]
        public partial class BalanceExemption :  IEquatable<BalanceExemption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceExemption" /> class.
        /// </summary>
        /// <param name="subAccountAddress">SubAccountAddress is the SubAccountIdentifier.Address that the BalanceExemption applies to (regardless of the value of SubAccountIdentifier.Metadata)..</param>
        /// <param name="currency">currency.</param>
        /// <param name="exemptionType">exemptionType.</param>
        public BalanceExemption(string subAccountAddress = default(string), Currency currency = default(Currency), ExemptionType exemptionType = default(ExemptionType))
        {
            this.SubAccountAddress = subAccountAddress;
            this.Currency = currency;
            this.ExemptionType = exemptionType;
        }
        
        /// <summary>
        /// SubAccountAddress is the SubAccountIdentifier.Address that the BalanceExemption applies to (regardless of the value of SubAccountIdentifier.Metadata).
        /// </summary>
        /// <value>SubAccountAddress is the SubAccountIdentifier.Address that the BalanceExemption applies to (regardless of the value of SubAccountIdentifier.Metadata).</value>
        [DataMember(Name="sub_account_address", EmitDefaultValue=false)]
        public string SubAccountAddress { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or Sets ExemptionType
        /// </summary>
        [DataMember(Name="exemption_type", EmitDefaultValue=false)]
        public ExemptionType ExemptionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BalanceExemption {\n");
            sb.Append("  SubAccountAddress: ").Append(SubAccountAddress).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ExemptionType: ").Append(ExemptionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BalanceExemption);
        }

        /// <summary>
        /// Returns true if BalanceExemption instances are equal
        /// </summary>
        /// <param name="input">Instance of BalanceExemption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BalanceExemption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubAccountAddress == input.SubAccountAddress ||
                    (this.SubAccountAddress != null &&
                    this.SubAccountAddress.Equals(input.SubAccountAddress))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ExemptionType == input.ExemptionType ||
                    (this.ExemptionType != null &&
                    this.ExemptionType.Equals(input.ExemptionType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubAccountAddress != null)
                    hashCode = hashCode * 59 + this.SubAccountAddress.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ExemptionType != null)
                    hashCode = hashCode * 59 + this.ExemptionType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
