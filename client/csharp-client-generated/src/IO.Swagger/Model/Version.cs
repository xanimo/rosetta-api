/* 
 * Rosetta
 *
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Version object is utilized to inform the client of the versions of different components of the Rosetta implementation.
    /// </summary>
    [DataContract]
        public partial class Version :  IEquatable<Version>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Version" /> class.
        /// </summary>
        /// <param name="rosettaVersion">The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses. (required).</param>
        /// <param name="nodeVersion">The node_version is the canonical version of the node runtime. This can help clients manage deployments. (required).</param>
        /// <param name="middlewareVersion">When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments..</param>
        /// <param name="metadata">Any other information that may be useful about versioning of dependent services should be returned here..</param>
        public Version(string rosettaVersion = default(string), string nodeVersion = default(string), string middlewareVersion = default(string), Object metadata = default(Object))
        {
            // to ensure "rosettaVersion" is required (not null)
            if (rosettaVersion == null)
            {
                throw new InvalidDataException("rosettaVersion is a required property for Version and cannot be null");
            }
            else
            {
                this.RosettaVersion = rosettaVersion;
            }
            // to ensure "nodeVersion" is required (not null)
            if (nodeVersion == null)
            {
                throw new InvalidDataException("nodeVersion is a required property for Version and cannot be null");
            }
            else
            {
                this.NodeVersion = nodeVersion;
            }
            this.MiddlewareVersion = middlewareVersion;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.
        /// </summary>
        /// <value>The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.</value>
        [DataMember(Name="rosetta_version", EmitDefaultValue=false)]
        public string RosettaVersion { get; set; }

        /// <summary>
        /// The node_version is the canonical version of the node runtime. This can help clients manage deployments.
        /// </summary>
        /// <value>The node_version is the canonical version of the node runtime. This can help clients manage deployments.</value>
        [DataMember(Name="node_version", EmitDefaultValue=false)]
        public string NodeVersion { get; set; }

        /// <summary>
        /// When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.
        /// </summary>
        /// <value>When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.</value>
        [DataMember(Name="middleware_version", EmitDefaultValue=false)]
        public string MiddlewareVersion { get; set; }

        /// <summary>
        /// Any other information that may be useful about versioning of dependent services should be returned here.
        /// </summary>
        /// <value>Any other information that may be useful about versioning of dependent services should be returned here.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Version {\n");
            sb.Append("  RosettaVersion: ").Append(RosettaVersion).Append("\n");
            sb.Append("  NodeVersion: ").Append(NodeVersion).Append("\n");
            sb.Append("  MiddlewareVersion: ").Append(MiddlewareVersion).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Version);
        }

        /// <summary>
        /// Returns true if Version instances are equal
        /// </summary>
        /// <param name="input">Instance of Version to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Version input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RosettaVersion == input.RosettaVersion ||
                    (this.RosettaVersion != null &&
                    this.RosettaVersion.Equals(input.RosettaVersion))
                ) && 
                (
                    this.NodeVersion == input.NodeVersion ||
                    (this.NodeVersion != null &&
                    this.NodeVersion.Equals(input.NodeVersion))
                ) && 
                (
                    this.MiddlewareVersion == input.MiddlewareVersion ||
                    (this.MiddlewareVersion != null &&
                    this.MiddlewareVersion.Equals(input.MiddlewareVersion))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RosettaVersion != null)
                    hashCode = hashCode * 59 + this.RosettaVersion.GetHashCode();
                if (this.NodeVersion != null)
                    hashCode = hashCode * 59 + this.NodeVersion.GetHashCode();
                if (this.MiddlewareVersion != null)
                    hashCode = hashCode * 59 + this.MiddlewareVersion.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
