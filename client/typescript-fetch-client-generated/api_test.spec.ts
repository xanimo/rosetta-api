/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AccountApi", () => {
  let instance: api.AccountApi
  beforeEach(function() {
    instance = new api.AccountApi(config)
  });

  test("accountBalance", () => {
    const body: api.AccountBalanceRequest = undefined
    return expect(instance.accountBalance(body, {})).resolves.toBe(null)
  })
  test("accountCoins", () => {
    const body: api.AccountCoinsRequest = undefined
    return expect(instance.accountCoins(body, {})).resolves.toBe(null)
  })
})

describe("BlockApi", () => {
  let instance: api.BlockApi
  beforeEach(function() {
    instance = new api.BlockApi(config)
  });

  test("block", () => {
    const body: api.BlockRequest = undefined
    return expect(instance.block(body, {})).resolves.toBe(null)
  })
  test("blockTransaction", () => {
    const body: api.BlockTransactionRequest = undefined
    return expect(instance.blockTransaction(body, {})).resolves.toBe(null)
  })
})

describe("CallApi", () => {
  let instance: api.CallApi
  beforeEach(function() {
    instance = new api.CallApi(config)
  });

  test("call", () => {
    const body: api.CallRequest = undefined
    return expect(instance.call(body, {})).resolves.toBe(null)
  })
})

describe("ConstructionApi", () => {
  let instance: api.ConstructionApi
  beforeEach(function() {
    instance = new api.ConstructionApi(config)
  });

  test("constructionCombine", () => {
    const body: api.ConstructionCombineRequest = undefined
    return expect(instance.constructionCombine(body, {})).resolves.toBe(null)
  })
  test("constructionDerive", () => {
    const body: api.ConstructionDeriveRequest = undefined
    return expect(instance.constructionDerive(body, {})).resolves.toBe(null)
  })
  test("constructionHash", () => {
    const body: api.ConstructionHashRequest = undefined
    return expect(instance.constructionHash(body, {})).resolves.toBe(null)
  })
  test("constructionMetadata", () => {
    const body: api.ConstructionMetadataRequest = undefined
    return expect(instance.constructionMetadata(body, {})).resolves.toBe(null)
  })
  test("constructionParse", () => {
    const body: api.ConstructionParseRequest = undefined
    return expect(instance.constructionParse(body, {})).resolves.toBe(null)
  })
  test("constructionPayloads", () => {
    const body: api.ConstructionPayloadsRequest = undefined
    return expect(instance.constructionPayloads(body, {})).resolves.toBe(null)
  })
  test("constructionPreprocess", () => {
    const body: api.ConstructionPreprocessRequest = undefined
    return expect(instance.constructionPreprocess(body, {})).resolves.toBe(null)
  })
  test("constructionSubmit", () => {
    const body: api.ConstructionSubmitRequest = undefined
    return expect(instance.constructionSubmit(body, {})).resolves.toBe(null)
  })
})

describe("EventsApi", () => {
  let instance: api.EventsApi
  beforeEach(function() {
    instance = new api.EventsApi(config)
  });

  test("eventsBlocks", () => {
    const body: api.EventsBlocksRequest = undefined
    return expect(instance.eventsBlocks(body, {})).resolves.toBe(null)
  })
})

describe("MempoolApi", () => {
  let instance: api.MempoolApi
  beforeEach(function() {
    instance = new api.MempoolApi(config)
  });

  test("mempool", () => {
    const body: api.NetworkRequest = undefined
    return expect(instance.mempool(body, {})).resolves.toBe(null)
  })
  test("mempoolTransaction", () => {
    const body: api.MempoolTransactionRequest = undefined
    return expect(instance.mempoolTransaction(body, {})).resolves.toBe(null)
  })
})

describe("NetworkApi", () => {
  let instance: api.NetworkApi
  beforeEach(function() {
    instance = new api.NetworkApi(config)
  });

  test("networkList", () => {
    const body: api.MetadataRequest = undefined
    return expect(instance.networkList(body, {})).resolves.toBe(null)
  })
  test("networkOptions", () => {
    const body: api.NetworkRequest = undefined
    return expect(instance.networkOptions(body, {})).resolves.toBe(null)
  })
  test("networkStatus", () => {
    const body: api.NetworkRequest = undefined
    return expect(instance.networkStatus(body, {})).resolves.toBe(null)
  })
})

describe("SearchApi", () => {
  let instance: api.SearchApi
  beforeEach(function() {
    instance = new api.SearchApi(config)
  });

  test("searchTransactions", () => {
    const body: api.SearchTransactionsRequest = undefined
    return expect(instance.searchTransactions(body, {})).resolves.toBe(null)
  })
})

