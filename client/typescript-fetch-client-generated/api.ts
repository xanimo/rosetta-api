/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * OpenAPI spec version: 1.4.10
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
 * @export
 * @interface AccountBalanceRequest
 */
export interface AccountBalanceRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof AccountBalanceRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {AccountIdentifier}
     * @memberof AccountBalanceRequest
     */
    accountIdentifier: AccountIdentifier;
    /**
     * 
     * @type {PartialBlockIdentifier}
     * @memberof AccountBalanceRequest
     */
    blockIdentifier?: PartialBlockIdentifier;
    /**
     * In some cases, the caller may not want to retrieve all available balances for an AccountIdentifier. If the currencies field is populated, only balances for the specified currencies will be returned. If not populated, all available balances will be returned.
     * @type {Array<Currency>}
     * @memberof AccountBalanceRequest
     */
    currencies?: Array<Currency>;
}
/**
 * An AccountBalanceResponse is returned on the /account/balance endpoint. If an account has a balance for each AccountIdentifier describing it (ex: an ERC-20 token balance on a few smart contracts), an account balance request must be made with each AccountIdentifier. The `coins` field was removed and replaced by by `/account/coins` in `v1.4.7`.
 * @export
 * @interface AccountBalanceResponse
 */
export interface AccountBalanceResponse {
    /**
     * 
     * @type {BlockIdentifier}
     * @memberof AccountBalanceResponse
     */
    blockIdentifier: BlockIdentifier;
    /**
     * A single account may have a balance in multiple currencies.
     * @type {Array<Amount>}
     * @memberof AccountBalanceResponse
     */
    balances: Array<Amount>;
    /**
     * Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.
     * @type {any}
     * @memberof AccountBalanceResponse
     */
    metadata?: any;
}
/**
 * AccountCoinsRequest is utilized to make a request on the /account/coins endpoint.
 * @export
 * @interface AccountCoinsRequest
 */
export interface AccountCoinsRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof AccountCoinsRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {AccountIdentifier}
     * @memberof AccountCoinsRequest
     */
    accountIdentifier: AccountIdentifier;
    /**
     * Include state from the mempool when looking up an account's unspent coins. Note, using this functionality breaks any guarantee of idempotency.
     * @type {boolean}
     * @memberof AccountCoinsRequest
     */
    includeMempool: boolean;
    /**
     * In some cases, the caller may not want to retrieve coins for all currencies for an AccountIdentifier. If the currencies field is populated, only coins for the specified currencies will be returned. If not populated, all unspent coins will be returned.
     * @type {Array<Currency>}
     * @memberof AccountCoinsRequest
     */
    currencies?: Array<Currency>;
}
/**
 * AccountCoinsResponse is returned on the /account/coins endpoint and includes all unspent Coins owned by an AccountIdentifier.
 * @export
 * @interface AccountCoinsResponse
 */
export interface AccountCoinsResponse {
    /**
     * 
     * @type {BlockIdentifier}
     * @memberof AccountCoinsResponse
     */
    blockIdentifier: BlockIdentifier;
    /**
     * If a blockchain is UTXO-based, all unspent Coins owned by an account_identifier should be returned alongside the balance. It is highly recommended to populate this field so that users of the Rosetta API implementation don't need to maintain their own indexer to track their UTXOs.
     * @type {Array<Coin>}
     * @memberof AccountCoinsResponse
     */
    coins: Array<Coin>;
    /**
     * Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.
     * @type {any}
     * @memberof AccountCoinsResponse
     */
    metadata?: any;
}
/**
 * The account_identifier uniquely identifies an account within a network. All fields in the account_identifier are utilized to determine this uniqueness (including the metadata field, if populated).
 * @export
 * @interface AccountIdentifier
 */
export interface AccountIdentifier {
    /**
     * The address may be a cryptographic public key (or some encoding of it) or a provided username.
     * @type {string}
     * @memberof AccountIdentifier
     */
    address: string;
    /**
     * 
     * @type {SubAccountIdentifier}
     * @memberof AccountIdentifier
     */
    subAccount?: SubAccountIdentifier;
    /**
     * Blockchains that utilize a username model (where the address is not a derivative of a cryptographic public key) should specify the public key(s) owned by the address in metadata.
     * @type {any}
     * @memberof AccountIdentifier
     */
    metadata?: any;
}
/**
 * Allow specifies supported Operation status, Operation types, and all possible error statuses. This Allow object is used by clients to validate the correctness of a Rosetta Server implementation. It is expected that these clients will error if they receive some response that contains any of the above information that is not specified here.
 * @export
 * @interface Allow
 */
export interface Allow {
    /**
     * All Operation.Status this implementation supports. Any status that is returned during parsing that is not listed here will cause client validation to error.
     * @type {Array<OperationStatus>}
     * @memberof Allow
     */
    operationStatuses: Array<OperationStatus>;
    /**
     * All Operation.Type this implementation supports. Any type that is returned during parsing that is not listed here will cause client validation to error.
     * @type {Array<string>}
     * @memberof Allow
     */
    operationTypes: Array<string>;
    /**
     * All Errors that this implementation could return. Any error that is returned during parsing that is not listed here will cause client validation to error.
     * @type {Array<Error>}
     * @memberof Allow
     */
    errors: Array<Error>;
    /**
     * Any Rosetta implementation that supports querying the balance of an account at any height in the past should set this to true.
     * @type {boolean}
     * @memberof Allow
     */
    historicalBalanceLookup: boolean;
    /**
     * If populated, `timestamp_start_index` indicates the first block index where block timestamps are considered valid (i.e. all blocks less than `timestamp_start_index` could have invalid timestamps). This is useful when the genesis block (or blocks) of a network have timestamp 0. If not populated, block timestamps are assumed to be valid for all available blocks.
     * @type {number}
     * @memberof Allow
     */
    timestampStartIndex?: number;
    /**
     * All methods that are supported by the /call endpoint. Communicating which parameters should be provided to /call is the responsibility of the implementer (this is en lieu of defining an entire type system and requiring the implementer to define that in Allow).
     * @type {Array<string>}
     * @memberof Allow
     */
    callMethods: Array<string>;
    /**
     * BalanceExemptions is an array of BalanceExemption indicating which account balances could change without a corresponding Operation. BalanceExemptions should be used sparingly as they may introduce significant complexity for integrators that attempt to reconcile all account balance changes. If your implementation relies on any BalanceExemptions, you MUST implement historical balance lookup (the ability to query an account balance at any BlockIdentifier).
     * @type {Array<BalanceExemption>}
     * @memberof Allow
     */
    balanceExemptions: Array<BalanceExemption>;
    /**
     * Any Rosetta implementation that can update an AccountIdentifier's unspent coins based on the contents of the mempool should populate this field as true. If false, requests to `/account/coins` that set `include_mempool` as true will be automatically rejected.
     * @type {boolean}
     * @memberof Allow
     */
    mempoolCoins: boolean;
}
/**
 * Amount is some Value of a Currency. It is considered invalid to specify a Value without a Currency.
 * @export
 * @interface Amount
 */
export interface Amount {
    /**
     * Value of the transaction in atomic units represented as an arbitrary-sized signed integer. For example, 1 BTC would be represented by a value of 100000000.
     * @type {string}
     * @memberof Amount
     */
    value: string;
    /**
     * 
     * @type {Currency}
     * @memberof Amount
     */
    currency: Currency;
    /**
     * 
     * @type {any}
     * @memberof Amount
     */
    metadata?: any;
}
/**
 * BalanceExemption indicates that the balance for an exempt account could change without a corresponding Operation. This typically occurs with staking rewards, vesting balances, and Currencies with a dynamic supply. Currently, it is possible to exempt an account from strict reconciliation by SubAccountIdentifier.Address or by Currency. This means that any account with SubAccountIdentifier.Address would be exempt or any balance of a particular Currency would be exempt, respectively. BalanceExemptions should be used sparingly as they may introduce significant complexity for integrators that attempt to reconcile all account balance changes. If your implementation relies on any BalanceExemptions, you MUST implement historical balance lookup (the ability to query an account balance at any BlockIdentifier).
 * @export
 * @interface BalanceExemption
 */
export interface BalanceExemption {
    /**
     * SubAccountAddress is the SubAccountIdentifier.Address that the BalanceExemption applies to (regardless of the value of SubAccountIdentifier.Metadata).
     * @type {string}
     * @memberof BalanceExemption
     */
    subAccountAddress?: string;
    /**
     * 
     * @type {Currency}
     * @memberof BalanceExemption
     */
    currency?: Currency;
    /**
     * 
     * @type {ExemptionType}
     * @memberof BalanceExemption
     */
    exemptionType?: ExemptionType;
}
/**
 * Blocks contain an array of Transactions that occurred at a particular BlockIdentifier. A hard requirement for blocks returned by Rosetta implementations is that they MUST be _inalterable_: once a client has requested and received a block identified by a specific BlockIndentifier, all future calls for that same BlockIdentifier must return the same block contents.
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * 
     * @type {BlockIdentifier}
     * @memberof Block
     */
    blockIdentifier: BlockIdentifier;
    /**
     * 
     * @type {BlockIdentifier}
     * @memberof Block
     */
    parentBlockIdentifier: BlockIdentifier;
    /**
     * 
     * @type {Timestamp}
     * @memberof Block
     */
    timestamp: Timestamp;
    /**
     * 
     * @type {Array<Transaction>}
     * @memberof Block
     */
    transactions: Array<Transaction>;
    /**
     * 
     * @type {any}
     * @memberof Block
     */
    metadata?: any;
}
/**
 * BlockEvent represents the addition or removal of a BlockIdentifier from storage. Streaming BlockEvents allows lightweight clients to update their own state without needing to implement their own syncing logic.
 * @export
 * @interface BlockEvent
 */
export interface BlockEvent {
    /**
     * sequence is the unique identifier of a BlockEvent within the context of a NetworkIdentifier.
     * @type {number}
     * @memberof BlockEvent
     */
    sequence: number;
    /**
     * 
     * @type {BlockIdentifier}
     * @memberof BlockEvent
     */
    blockIdentifier: BlockIdentifier;
    /**
     * 
     * @type {BlockEventType}
     * @memberof BlockEvent
     */
    type: BlockEventType;
}
/**
 * BlockEventType determines if a BlockEvent represents the addition or removal of a block.
 * @export
 * @enum {string}
 */
export enum BlockEventType {
    Added = <any> 'block_added',
    Removed = <any> 'block_removed'
}
/**
 * The block_identifier uniquely identifies a block in a particular network.
 * @export
 * @interface BlockIdentifier
 */
export interface BlockIdentifier {
    /**
     * This is also known as the block height.
     * @type {number}
     * @memberof BlockIdentifier
     */
    index: number;
    /**
     * 
     * @type {string}
     * @memberof BlockIdentifier
     */
    hash: string;
}
/**
 * A BlockRequest is utilized to make a block request on the /block endpoint.
 * @export
 * @interface BlockRequest
 */
export interface BlockRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof BlockRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {PartialBlockIdentifier}
     * @memberof BlockRequest
     */
    blockIdentifier: PartialBlockIdentifier;
}
/**
 * A BlockResponse includes a fully-populated block or a partially-populated block with a list of other transactions to fetch (other_transactions). As a result of the consensus algorithm of some blockchains, blocks can be omitted (i.e. certain block indices can be skipped). If a query for one of these omitted indices is made, the response should not include a `Block` object. It is VERY important to note that blocks MUST still form a canonical, connected chain of blocks where each block has a unique index. In other words, the `PartialBlockIdentifier` of a block after an omitted block should reference the last non-omitted block.
 * @export
 * @interface BlockResponse
 */
export interface BlockResponse {
    /**
     * 
     * @type {Block}
     * @memberof BlockResponse
     */
    block?: Block;
    /**
     * Some blockchains may require additional transactions to be fetched that weren't returned in the block response (ex: block only returns transaction hashes). For blockchains with a lot of transactions in each block, this can be very useful as consumers can concurrently fetch all transactions returned.
     * @type {Array<TransactionIdentifier>}
     * @memberof BlockResponse
     */
    otherTransactions?: Array<TransactionIdentifier>;
}
/**
 * BlockTransaction contains a populated Transaction and the BlockIdentifier that contains it.
 * @export
 * @interface BlockTransaction
 */
export interface BlockTransaction {
    /**
     * 
     * @type {BlockIdentifier}
     * @memberof BlockTransaction
     */
    blockIdentifier: BlockIdentifier;
    /**
     * 
     * @type {Transaction}
     * @memberof BlockTransaction
     */
    transaction: Transaction;
}
/**
 * A BlockTransactionRequest is used to fetch a Transaction included in a block that is not returned in a BlockResponse.
 * @export
 * @interface BlockTransactionRequest
 */
export interface BlockTransactionRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof BlockTransactionRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {BlockIdentifier}
     * @memberof BlockTransactionRequest
     */
    blockIdentifier: BlockIdentifier;
    /**
     * 
     * @type {TransactionIdentifier}
     * @memberof BlockTransactionRequest
     */
    transactionIdentifier: TransactionIdentifier;
}
/**
 * A BlockTransactionResponse contains information about a block transaction.
 * @export
 * @interface BlockTransactionResponse
 */
export interface BlockTransactionResponse {
    /**
     * 
     * @type {Transaction}
     * @memberof BlockTransactionResponse
     */
    transaction: Transaction;
}
/**
 * CallRequest is the input to the `/call` endpoint.
 * @export
 * @interface CallRequest
 */
export interface CallRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof CallRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * Method is some network-specific procedure call. This method could map to a network-specific RPC endpoint, a method in an SDK generated from a smart contract, or some hybrid of the two. The implementation must define all available methods in the Allow object. However, it is up to the caller to determine which parameters to provide when invoking `/call`.
     * @type {string}
     * @memberof CallRequest
     */
    method: string;
    /**
     * Parameters is some network-specific argument for a method. It is up to the caller to determine which parameters to provide when invoking `/call`.
     * @type {any}
     * @memberof CallRequest
     */
    parameters: any;
}
/**
 * CallResponse contains the result of a `/call` invocation.
 * @export
 * @interface CallResponse
 */
export interface CallResponse {
    /**
     * Result contains the result of the `/call` invocation. This result will not be inspected or interpreted by Rosetta tooling and is left to the caller to decode.
     * @type {any}
     * @memberof CallResponse
     */
    result: any;
    /**
     * Idempotent indicates that if `/call` is invoked with the same CallRequest again, at any point in time, it will return the same CallResponse. Integrators may cache the CallResponse if this is set to true to avoid making unnecessary calls to the Rosetta implementation. For this reason, implementers should be very conservative about returning true here or they could cause issues for the caller.
     * @type {boolean}
     * @memberof CallResponse
     */
    idempotent: boolean;
}
/**
 * Coin contains its unique identifier and the amount it represents.
 * @export
 * @interface Coin
 */
export interface Coin {
    /**
     * 
     * @type {CoinIdentifier}
     * @memberof Coin
     */
    coinIdentifier: CoinIdentifier;
    /**
     * 
     * @type {Amount}
     * @memberof Coin
     */
    amount: Amount;
}
/**
 * CoinActions are different state changes that a Coin can undergo. When a Coin is created, it is coin_created. When a Coin is spent, it is coin_spent. It is assumed that a single Coin cannot be created or spent more than once.
 * @export
 * @enum {string}
 */
export enum CoinAction {
    Created = <any> 'coin_created',
    Spent = <any> 'coin_spent'
}
/**
 * CoinChange is used to represent a change in state of a some coin identified by a coin_identifier. This object is part of the Operation model and must be populated for UTXO-based blockchains. Coincidentally, this abstraction of UTXOs allows for supporting both account-based transfers and UTXO-based transfers on the same blockchain (when a transfer is account-based, don't populate this model).
 * @export
 * @interface CoinChange
 */
export interface CoinChange {
    /**
     * 
     * @type {CoinIdentifier}
     * @memberof CoinChange
     */
    coinIdentifier: CoinIdentifier;
    /**
     * 
     * @type {CoinAction}
     * @memberof CoinChange
     */
    coinAction: CoinAction;
}
/**
 * CoinIdentifier uniquely identifies a Coin.
 * @export
 * @interface CoinIdentifier
 */
export interface CoinIdentifier {
    /**
     * Identifier should be populated with a globally unique identifier of a Coin. In Bitcoin, this identifier would be transaction_hash:index.
     * @type {string}
     * @memberof CoinIdentifier
     */
    identifier: string;
}
/**
 * ConstructionCombineRequest is the input to the `/construction/combine` endpoint. It contains the unsigned transaction blob returned by `/construction/payloads` and all required signatures to create a network transaction.
 * @export
 * @interface ConstructionCombineRequest
 */
export interface ConstructionCombineRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof ConstructionCombineRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {string}
     * @memberof ConstructionCombineRequest
     */
    unsignedTransaction: string;
    /**
     * 
     * @type {Array<Signature>}
     * @memberof ConstructionCombineRequest
     */
    signatures: Array<Signature>;
}
/**
 * ConstructionCombineResponse is returned by `/construction/combine`. The network payload will be sent directly to the `construction/submit` endpoint.
 * @export
 * @interface ConstructionCombineResponse
 */
export interface ConstructionCombineResponse {
    /**
     * 
     * @type {string}
     * @memberof ConstructionCombineResponse
     */
    signedTransaction: string;
}
/**
 * ConstructionDeriveRequest is passed to the `/construction/derive` endpoint. Network is provided in the request because some blockchains have different address formats for different networks. Metadata is provided in the request because some blockchains allow for multiple address types (i.e. different address for validators vs normal accounts).
 * @export
 * @interface ConstructionDeriveRequest
 */
export interface ConstructionDeriveRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof ConstructionDeriveRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {PublicKey}
     * @memberof ConstructionDeriveRequest
     */
    publicKey: PublicKey;
    /**
     * 
     * @type {any}
     * @memberof ConstructionDeriveRequest
     */
    metadata?: any;
}
/**
 * ConstructionDeriveResponse is returned by the `/construction/derive` endpoint.
 * @export
 * @interface ConstructionDeriveResponse
 */
export interface ConstructionDeriveResponse {
    /**
     * [DEPRECATED by `account_identifier` in `v1.4.4`] Address in network-specific format.
     * @type {string}
     * @memberof ConstructionDeriveResponse
     */
    address?: string;
    /**
     * 
     * @type {AccountIdentifier}
     * @memberof ConstructionDeriveResponse
     */
    accountIdentifier?: AccountIdentifier;
    /**
     * 
     * @type {any}
     * @memberof ConstructionDeriveResponse
     */
    metadata?: any;
}
/**
 * ConstructionHashRequest is the input to the `/construction/hash` endpoint.
 * @export
 * @interface ConstructionHashRequest
 */
export interface ConstructionHashRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof ConstructionHashRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {string}
     * @memberof ConstructionHashRequest
     */
    signedTransaction: string;
}
/**
 * A ConstructionMetadataRequest is utilized to get information required to construct a transaction. The Options object used to specify which metadata to return is left purposely unstructured to allow flexibility for implementers. Options is not required in the case that there is network-wide metadata of interest. Optionally, the request can also include an array of PublicKeys associated with the AccountIdentifiers returned in ConstructionPreprocessResponse.
 * @export
 * @interface ConstructionMetadataRequest
 */
export interface ConstructionMetadataRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof ConstructionMetadataRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * Some blockchains require different metadata for different types of transaction construction (ex: delegation versus a transfer). Instead of requiring a blockchain node to return all possible types of metadata for construction (which may require multiple node fetches), the client can populate an options object to limit the metadata returned to only the subset required.
     * @type {any}
     * @memberof ConstructionMetadataRequest
     */
    options?: any;
    /**
     * 
     * @type {Array<PublicKey>}
     * @memberof ConstructionMetadataRequest
     */
    publicKeys?: Array<PublicKey>;
}
/**
 * The ConstructionMetadataResponse returns network-specific metadata used for transaction construction. Optionally, the implementer can return the suggested fee associated with the transaction being constructed. The caller may use this info to adjust the intent of the transaction or to create a transaction with a different account that can pay the suggested fee. Suggested fee is an array in case fee payment must occur in multiple currencies.
 * @export
 * @interface ConstructionMetadataResponse
 */
export interface ConstructionMetadataResponse {
    /**
     * 
     * @type {any}
     * @memberof ConstructionMetadataResponse
     */
    metadata: any;
    /**
     * 
     * @type {Array<Amount>}
     * @memberof ConstructionMetadataResponse
     */
    suggestedFee?: Array<Amount>;
}
/**
 * ConstructionParseRequest is the input to the `/construction/parse` endpoint. It allows the caller to parse either an unsigned or signed transaction.
 * @export
 * @interface ConstructionParseRequest
 */
export interface ConstructionParseRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof ConstructionParseRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * Signed is a boolean indicating whether the transaction is signed.
     * @type {boolean}
     * @memberof ConstructionParseRequest
     */
    signed: boolean;
    /**
     * This must be either the unsigned transaction blob returned by `/construction/payloads` or the signed transaction blob returned by `/construction/combine`.
     * @type {string}
     * @memberof ConstructionParseRequest
     */
    transaction: string;
}
/**
 * ConstructionParseResponse contains an array of operations that occur in a transaction blob. This should match the array of operations provided to `/construction/preprocess` and `/construction/payloads`.
 * @export
 * @interface ConstructionParseResponse
 */
export interface ConstructionParseResponse {
    /**
     * 
     * @type {Array<Operation>}
     * @memberof ConstructionParseResponse
     */
    operations: Array<Operation>;
    /**
     * [DEPRECATED by `account_identifier_signers` in `v1.4.4`] All signers (addresses) of a particular transaction. If the transaction is unsigned, it should be empty.
     * @type {Array<string>}
     * @memberof ConstructionParseResponse
     */
    signers?: Array<string>;
    /**
     * 
     * @type {Array<AccountIdentifier>}
     * @memberof ConstructionParseResponse
     */
    accountIdentifierSigners?: Array<AccountIdentifier>;
    /**
     * 
     * @type {any}
     * @memberof ConstructionParseResponse
     */
    metadata?: any;
}
/**
 * ConstructionPayloadsRequest is the request to `/construction/payloads`. It contains the network, a slice of operations, and arbitrary metadata that was returned by the call to `/construction/metadata`. Optionally, the request can also include an array of PublicKeys associated with the AccountIdentifiers returned in ConstructionPreprocessResponse.
 * @export
 * @interface ConstructionPayloadsRequest
 */
export interface ConstructionPayloadsRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof ConstructionPayloadsRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {Array<Operation>}
     * @memberof ConstructionPayloadsRequest
     */
    operations: Array<Operation>;
    /**
     * 
     * @type {any}
     * @memberof ConstructionPayloadsRequest
     */
    metadata?: any;
    /**
     * 
     * @type {Array<PublicKey>}
     * @memberof ConstructionPayloadsRequest
     */
    publicKeys?: Array<PublicKey>;
}
/**
 * ConstructionTransactionResponse is returned by `/construction/payloads`. It contains an unsigned transaction blob (that is usually needed to construct the a network transaction from a collection of signatures) and an array of payloads that must be signed by the caller.
 * @export
 * @interface ConstructionPayloadsResponse
 */
export interface ConstructionPayloadsResponse {
    /**
     * 
     * @type {string}
     * @memberof ConstructionPayloadsResponse
     */
    unsignedTransaction: string;
    /**
     * 
     * @type {Array<SigningPayload>}
     * @memberof ConstructionPayloadsResponse
     */
    payloads: Array<SigningPayload>;
}
/**
 * ConstructionPreprocessRequest is passed to the `/construction/preprocess` endpoint so that a Rosetta implementation can determine which metadata it needs to request for construction. Metadata provided in this object should NEVER be a product of live data (i.e. the caller must follow some network-specific data fetching strategy outside of the Construction API to populate required Metadata). If live data is required for construction, it MUST be fetched in the call to `/construction/metadata`. The caller can provide a max fee they are willing to pay for a transaction. This is an array in the case fees must be paid in multiple currencies. The caller can also provide a suggested fee multiplier to indicate that the suggested fee should be scaled. This may be used to set higher fees for urgent transactions or to pay lower fees when there is less urgency. It is assumed that providing a very low multiplier (like 0.0001) will never lead to a transaction being created with a fee less than the minimum network fee (if applicable). In the case that the caller provides both a max fee and a suggested fee multiplier, the max fee will set an upper bound on the suggested fee (regardless of the multiplier provided).
 * @export
 * @interface ConstructionPreprocessRequest
 */
export interface ConstructionPreprocessRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof ConstructionPreprocessRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {Array<Operation>}
     * @memberof ConstructionPreprocessRequest
     */
    operations: Array<Operation>;
    /**
     * 
     * @type {any}
     * @memberof ConstructionPreprocessRequest
     */
    metadata?: any;
    /**
     * 
     * @type {Array<Amount>}
     * @memberof ConstructionPreprocessRequest
     */
    maxFee?: Array<Amount>;
    /**
     * 
     * @type {number}
     * @memberof ConstructionPreprocessRequest
     */
    suggestedFeeMultiplier?: number;
}
/**
 * ConstructionPreprocessResponse contains `options` that will be sent unmodified to `/construction/metadata`. If it is not necessary to make a request to `/construction/metadata`, `options` should be omitted.  Some blockchains require the PublicKey of particular AccountIdentifiers to construct a valid transaction. To fetch these PublicKeys, populate `required_public_keys` with the AccountIdentifiers associated with the desired PublicKeys. If it is not necessary to retrieve any PublicKeys for construction, `required_public_keys` should be omitted.
 * @export
 * @interface ConstructionPreprocessResponse
 */
export interface ConstructionPreprocessResponse {
    /**
     * The options that will be sent directly to `/construction/metadata` by the caller.
     * @type {any}
     * @memberof ConstructionPreprocessResponse
     */
    options?: any;
    /**
     * 
     * @type {Array<AccountIdentifier>}
     * @memberof ConstructionPreprocessResponse
     */
    requiredPublicKeys?: Array<AccountIdentifier>;
}
/**
 * The transaction submission request includes a signed transaction.
 * @export
 * @interface ConstructionSubmitRequest
 */
export interface ConstructionSubmitRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof ConstructionSubmitRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {string}
     * @memberof ConstructionSubmitRequest
     */
    signedTransaction: string;
}
/**
 * Currency is composed of a canonical Symbol and Decimals. This Decimals value is used to convert an Amount.Value from atomic units (Satoshis) to standard units (Bitcoins).
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * Canonical symbol associated with a currency.
     * @type {string}
     * @memberof Currency
     */
    symbol: string;
    /**
     * Number of decimal places in the standard unit representation of the amount. For example, BTC has 8 decimals. Note that it is not possible to represent the value of some currency in atomic units that is not base 10.
     * @type {number}
     * @memberof Currency
     */
    decimals: number;
    /**
     * Any additional information related to the currency itself. For example, it would be useful to populate this object with the contract address of an ERC-20 token.
     * @type {any}
     * @memberof Currency
     */
    metadata?: any;
}
/**
 * CurveType is the type of cryptographic curve associated with a PublicKey. * secp256k1: SEC compressed - `33 bytes` (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3) * secp256r1: SEC compressed - `33 bytes` (https://secg.org/sec1-v2.pdf#subsubsection.2.3.3) * edwards25519: `y (255-bits) || x-sign-bit (1-bit)` - `32 bytes` (https://ed25519.cr.yp.to/ed25519-20110926.pdf) * tweedle: 1st pk : Fq.t (32 bytes) || 2nd pk : Fq.t (32 bytes) (https://github.com/CodaProtocol/coda/blob/develop/rfcs/0038-rosetta-construction-api.md#marshal-keys)
 * @export
 * @enum {string}
 */
export enum CurveType {
    Secp256k1 = <any> 'secp256k1',
    Secp256r1 = <any> 'secp256r1',
    Edwards25519 = <any> 'edwards25519',
    Tweedle = <any> 'tweedle'
}
/**
 * Used by RelatedTransaction to indicate the direction of the relation (i.e. cross-shard/cross-network sends may reference `backward` to an earlier transaction and async execution may reference `forward`). Can be used to indicate if a transaction relation is from child to parent or the reverse.
 * @export
 * @enum {string}
 */
export enum Direction {
    Forward = <any> 'forward',
    Backward = <any> 'backward'
}
/**
 * EventsBlocksRequest is utilized to fetch a sequence of BlockEvents indicating which blocks were added and removed from storage to reach the current state.
 * @export
 * @interface EventsBlocksRequest
 */
export interface EventsBlocksRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof EventsBlocksRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * offset is the offset into the event stream to sync events from. If this field is not populated, we return the limit events backwards from tip. If this is set to 0, we start from the beginning.
     * @type {number}
     * @memberof EventsBlocksRequest
     */
    offset?: number;
    /**
     * limit is the maximum number of events to fetch in one call. The implementation may return <= limit events.
     * @type {number}
     * @memberof EventsBlocksRequest
     */
    limit?: number;
}
/**
 * EventsBlocksResponse contains an ordered collection of BlockEvents and the max retrievable sequence.
 * @export
 * @interface EventsBlocksResponse
 */
export interface EventsBlocksResponse {
    /**
     * max_sequence is the maximum available sequence number to fetch.
     * @type {number}
     * @memberof EventsBlocksResponse
     */
    maxSequence: number;
    /**
     * events is an array of BlockEvents indicating the order to add and remove blocks to maintain a canonical view of blockchain state. Lightweight clients can use this event stream to update state without implementing their own block syncing logic.
     * @type {Array<BlockEvent>}
     * @memberof EventsBlocksResponse
     */
    events: Array<BlockEvent>;
}
/**
 * ExemptionType is used to indicate if the live balance for an account subject to a BalanceExemption could increase above, decrease below, or equal the computed balance. * greater_or_equal: The live balance may increase above or equal the computed balance. This typically   occurs with staking rewards that accrue on each block. * less_or_equal: The live balance may decrease below or equal the computed balance. This typically   occurs as balance moves from locked to spendable on a vesting account. * dynamic: The live balance may increase above, decrease below, or equal the computed balance. This   typically occurs with tokens that have a dynamic supply.
 * @export
 * @enum {string}
 */
export enum ExemptionType {
    GreaterOrEqual = <any> 'greater_or_equal',
    LessOrEqual = <any> 'less_or_equal',
    Dynamic = <any> 'dynamic'
}
/**
 * A MempoolResponse contains all transaction identifiers in the mempool for a particular network_identifier.
 * @export
 * @interface MempoolResponse
 */
export interface MempoolResponse {
    /**
     * 
     * @type {Array<TransactionIdentifier>}
     * @memberof MempoolResponse
     */
    transactionIdentifiers: Array<TransactionIdentifier>;
}
/**
 * A MempoolTransactionRequest is utilized to retrieve a transaction from the mempool.
 * @export
 * @interface MempoolTransactionRequest
 */
export interface MempoolTransactionRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof MempoolTransactionRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {TransactionIdentifier}
     * @memberof MempoolTransactionRequest
     */
    transactionIdentifier: TransactionIdentifier;
}
/**
 * A MempoolTransactionResponse contains an estimate of a mempool transaction. It may not be possible to know the full impact of a transaction in the mempool (ex: fee paid).
 * @export
 * @interface MempoolTransactionResponse
 */
export interface MempoolTransactionResponse {
    /**
     * 
     * @type {Transaction}
     * @memberof MempoolTransactionResponse
     */
    transaction: Transaction;
    /**
     * 
     * @type {any}
     * @memberof MempoolTransactionResponse
     */
    metadata?: any;
}
/**
 * A MetadataRequest is utilized in any request where the only argument is optional metadata.
 * @export
 * @interface MetadataRequest
 */
export interface MetadataRequest {
    /**
     * 
     * @type {any}
     * @memberof MetadataRequest
     */
    metadata?: any;
}
/**
 * Instead of utilizing HTTP status codes to describe node errors (which often do not have a good analog), rich errors are returned using this object. Both the code and message fields can be individually used to correctly identify an error. Implementations MUST use unique values for both fields.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Code is a network-specific error code. If desired, this code can be equivalent to an HTTP status code.
     * @type {number}
     * @memberof ModelError
     */
    code: number;
    /**
     * Message is a network-specific error message. The message MUST NOT change for a given code. In particular, this means that any contextual information should be included in the details field.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Description allows the implementer to optionally provide additional information about an error. In many cases, the content of this field will be a copy-and-paste from existing developer documentation. Description can ONLY be populated with generic information about a particular type of error. It MUST NOT be populated with information about a particular instantiation of an error (use `details` for this). Whereas the content of Error.Message should stay stable across releases, the content of Error.Description will likely change across releases (as implementers improve error documentation). For this reason, the content in this field is not part of any type assertion (unlike Error.Message).
     * @type {string}
     * @memberof ModelError
     */
    description?: string;
    /**
     * An error is retriable if the same request may succeed if submitted again.
     * @type {boolean}
     * @memberof ModelError
     */
    retriable: boolean;
    /**
     * Often times it is useful to return context specific to the request that caused the error (i.e. a sample of the stack trace or impacted account) in addition to the standard error message.
     * @type {any}
     * @memberof ModelError
     */
    details?: any;
}
/**
 * The network_identifier specifies which network a particular object is associated with.
 * @export
 * @interface NetworkIdentifier
 */
export interface NetworkIdentifier {
    /**
     * 
     * @type {string}
     * @memberof NetworkIdentifier
     */
    blockchain: string;
    /**
     * If a blockchain has a specific chain-id or network identifier, it should go in this field. It is up to the client to determine which network-specific identifier is mainnet or testnet.
     * @type {string}
     * @memberof NetworkIdentifier
     */
    network: string;
    /**
     * 
     * @type {SubNetworkIdentifier}
     * @memberof NetworkIdentifier
     */
    subNetworkIdentifier?: SubNetworkIdentifier;
}
/**
 * A NetworkListResponse contains all NetworkIdentifiers that the node can serve information for.
 * @export
 * @interface NetworkListResponse
 */
export interface NetworkListResponse {
    /**
     * 
     * @type {Array<NetworkIdentifier>}
     * @memberof NetworkListResponse
     */
    networkIdentifiers: Array<NetworkIdentifier>;
}
/**
 * NetworkOptionsResponse contains information about the versioning of the node and the allowed operation statuses, operation types, and errors.
 * @export
 * @interface NetworkOptionsResponse
 */
export interface NetworkOptionsResponse {
    /**
     * 
     * @type {Version}
     * @memberof NetworkOptionsResponse
     */
    version: Version;
    /**
     * 
     * @type {Allow}
     * @memberof NetworkOptionsResponse
     */
    allow: Allow;
}
/**
 * A NetworkRequest is utilized to retrieve some data specific exclusively to a NetworkIdentifier.
 * @export
 * @interface NetworkRequest
 */
export interface NetworkRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof NetworkRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {any}
     * @memberof NetworkRequest
     */
    metadata?: any;
}
/**
 * NetworkStatusResponse contains basic information about the node's view of a blockchain network. It is assumed that any BlockIdentifier.Index less than or equal to CurrentBlockIdentifier.Index can be queried. If a Rosetta implementation prunes historical state, it should populate the optional `oldest_block_identifier` field with the oldest block available to query. If this is not populated, it is assumed that the `genesis_block_identifier` is the oldest queryable block. If a Rosetta implementation performs some pre-sync before it is possible to query blocks, sync_status should be populated so that clients can still monitor healthiness. Without this field, it may appear that the implementation is stuck syncing and needs to be terminated.
 * @export
 * @interface NetworkStatusResponse
 */
export interface NetworkStatusResponse {
    /**
     * 
     * @type {BlockIdentifier}
     * @memberof NetworkStatusResponse
     */
    currentBlockIdentifier: BlockIdentifier;
    /**
     * 
     * @type {Timestamp}
     * @memberof NetworkStatusResponse
     */
    currentBlockTimestamp: Timestamp;
    /**
     * 
     * @type {BlockIdentifier}
     * @memberof NetworkStatusResponse
     */
    genesisBlockIdentifier: BlockIdentifier;
    /**
     * 
     * @type {BlockIdentifier}
     * @memberof NetworkStatusResponse
     */
    oldestBlockIdentifier?: BlockIdentifier;
    /**
     * 
     * @type {SyncStatus}
     * @memberof NetworkStatusResponse
     */
    syncStatus?: SyncStatus;
    /**
     * 
     * @type {Array<Peer>}
     * @memberof NetworkStatusResponse
     */
    peers: Array<Peer>;
}
/**
 * Operations contain all balance-changing information within a transaction. They are always one-sided (only affect 1 AccountIdentifier) and can succeed or fail independently from a Transaction. Operations are used both to represent on-chain data (Data API) and to construct new transactions (Construction API), creating a standard interface for reading and writing to blockchains.
 * @export
 * @interface Operation
 */
export interface Operation {
    /**
     * 
     * @type {OperationIdentifier}
     * @memberof Operation
     */
    operationIdentifier: OperationIdentifier;
    /**
     * Restrict referenced related_operations to identifier indices < the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.
     * @type {Array<OperationIdentifier>}
     * @memberof Operation
     */
    relatedOperations?: Array<OperationIdentifier>;
    /**
     * Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data.
     * @type {string}
     * @memberof Operation
     */
    type: string;
    /**
     * Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the `/block` and `/block/transaction` endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called \"intent\" in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed).
     * @type {string}
     * @memberof Operation
     */
    status?: string;
    /**
     * 
     * @type {AccountIdentifier}
     * @memberof Operation
     */
    account?: AccountIdentifier;
    /**
     * 
     * @type {Amount}
     * @memberof Operation
     */
    amount?: Amount;
    /**
     * 
     * @type {CoinChange}
     * @memberof Operation
     */
    coinChange?: CoinChange;
    /**
     * 
     * @type {any}
     * @memberof Operation
     */
    metadata?: any;
}
/**
 * The operation_identifier uniquely identifies an operation within a transaction.
 * @export
 * @interface OperationIdentifier
 */
export interface OperationIdentifier {
    /**
     * The operation index is used to ensure each operation has a unique identifier within a transaction. This index is only relative to the transaction and NOT GLOBAL. The operations in each transaction should start from index 0. To clarify, there may not be any notion of an operation index in the blockchain being described.
     * @type {number}
     * @memberof OperationIdentifier
     */
    index: number;
    /**
     * Some blockchains specify an operation index that is essential for client use. For example, Bitcoin uses a network_index to identify which UTXO was used in a transaction. network_index should not be populated if there is no notion of an operation index in a blockchain (typically most account-based blockchains).
     * @type {number}
     * @memberof OperationIdentifier
     */
    networkIndex?: number;
}
/**
 * OperationStatus is utilized to indicate which Operation status are considered successful.
 * @export
 * @interface OperationStatus
 */
export interface OperationStatus {
    /**
     * The status is the network-specific status of the operation.
     * @type {string}
     * @memberof OperationStatus
     */
    status: string;
    /**
     * An Operation is considered successful if the Operation.Amount should affect the Operation.Account. Some blockchains (like Bitcoin) only include successful operations in blocks but other blockchains (like Ethereum) include unsuccessful operations that incur a fee. To reconcile the computed balance from the stream of Operations, it is critical to understand which Operation.Status indicate an Operation is successful and should affect an Account.
     * @type {boolean}
     * @memberof OperationStatus
     */
    successful: boolean;
}
/**
 * Operator is used by query-related endpoints to determine how to apply conditions. If this field is not populated, the default `and` value will be used.
 * @export
 * @enum {string}
 */
export enum Operator {
    Or = <any> 'or',
    And = <any> 'and'
}
/**
 * When fetching data by BlockIdentifier, it may be possible to only specify the index or hash. If neither property is specified, it is assumed that the client is making a request at the current block.
 * @export
 * @interface PartialBlockIdentifier
 */
export interface PartialBlockIdentifier {
    /**
     * 
     * @type {number}
     * @memberof PartialBlockIdentifier
     */
    index?: number;
    /**
     * 
     * @type {string}
     * @memberof PartialBlockIdentifier
     */
    hash?: string;
}
/**
 * A Peer is a representation of a node's peer.
 * @export
 * @interface Peer
 */
export interface Peer {
    /**
     * 
     * @type {string}
     * @memberof Peer
     */
    peerId: string;
    /**
     * 
     * @type {any}
     * @memberof Peer
     */
    metadata?: any;
}
/**
 * PublicKey contains a public key byte array for a particular CurveType encoded in hex. Note that there is no PrivateKey struct as this is NEVER the concern of an implementation.
 * @export
 * @interface PublicKey
 */
export interface PublicKey {
    /**
     * Hex-encoded public key bytes in the format specified by the CurveType.
     * @type {string}
     * @memberof PublicKey
     */
    hexBytes: string;
    /**
     * 
     * @type {CurveType}
     * @memberof PublicKey
     */
    curveType: CurveType;
}
/**
 * The related_transaction allows implementations to link together multiple transactions. An unpopulated network identifier indicates that the related transaction is on the same network.
 * @export
 * @interface RelatedTransaction
 */
export interface RelatedTransaction {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof RelatedTransaction
     */
    networkIdentifier?: NetworkIdentifier;
    /**
     * 
     * @type {TransactionIdentifier}
     * @memberof RelatedTransaction
     */
    transactionIdentifier: TransactionIdentifier;
    /**
     * 
     * @type {Direction}
     * @memberof RelatedTransaction
     */
    direction: Direction;
}
/**
 * SearchTransactionsRequest is used to search for transactions matching a set of provided conditions in canonical blocks.
 * @export
 * @interface SearchTransactionsRequest
 */
export interface SearchTransactionsRequest {
    /**
     * 
     * @type {NetworkIdentifier}
     * @memberof SearchTransactionsRequest
     */
    networkIdentifier: NetworkIdentifier;
    /**
     * 
     * @type {Operator}
     * @memberof SearchTransactionsRequest
     */
    operator?: Operator;
    /**
     * max_block is the largest block index to consider when searching for transactions. If this field is not populated, the current block is considered the max_block. If you do not specify a max_block, it is possible a newly synced block will interfere with paginated transaction queries (as the offset could become invalid with newly added rows).
     * @type {number}
     * @memberof SearchTransactionsRequest
     */
    maxBlock?: number;
    /**
     * offset is the offset into the query result to start returning transactions. If any search conditions are changed, the query offset will change and you must restart your search iteration.
     * @type {number}
     * @memberof SearchTransactionsRequest
     */
    offset?: number;
    /**
     * limit is the maximum number of transactions to return in one call. The implementation may return <= limit transactions.
     * @type {number}
     * @memberof SearchTransactionsRequest
     */
    limit?: number;
    /**
     * 
     * @type {TransactionIdentifier}
     * @memberof SearchTransactionsRequest
     */
    transactionIdentifier?: TransactionIdentifier;
    /**
     * 
     * @type {AccountIdentifier}
     * @memberof SearchTransactionsRequest
     */
    accountIdentifier?: AccountIdentifier;
    /**
     * 
     * @type {CoinIdentifier}
     * @memberof SearchTransactionsRequest
     */
    coinIdentifier?: CoinIdentifier;
    /**
     * 
     * @type {Currency}
     * @memberof SearchTransactionsRequest
     */
    currency?: Currency;
    /**
     * status is the network-specific operation type.
     * @type {string}
     * @memberof SearchTransactionsRequest
     */
    status?: string;
    /**
     * type is the network-specific operation type.
     * @type {string}
     * @memberof SearchTransactionsRequest
     */
    type?: string;
    /**
     * address is AccountIdentifier.Address. This is used to get all transactions related to an AccountIdentifier.Address, regardless of SubAccountIdentifier.
     * @type {string}
     * @memberof SearchTransactionsRequest
     */
    address?: string;
    /**
     * success is a synthetic condition populated by parsing network-specific operation statuses (using the mapping provided in `/network/options`).
     * @type {boolean}
     * @memberof SearchTransactionsRequest
     */
    success?: boolean;
}
/**
 * SearchTransactionsResponse contains an ordered collection of BlockTransactions that match the query in SearchTransactionsRequest. These BlockTransactions are sorted from most recent block to oldest block.
 * @export
 * @interface SearchTransactionsResponse
 */
export interface SearchTransactionsResponse {
    /**
     * transactions is an array of BlockTransactions sorted by most recent BlockIdentifier (meaning that transactions in recent blocks appear first). If there are many transactions for a particular search, transactions may not contain all matching transactions. It is up to the caller to paginate these transactions using the max_block field.
     * @type {Array<BlockTransaction>}
     * @memberof SearchTransactionsResponse
     */
    transactions: Array<BlockTransaction>;
    /**
     * total_count is the number of results for a given search. Callers typically use this value to concurrently fetch results by offset or to display a virtual page number associated with results.
     * @type {number}
     * @memberof SearchTransactionsResponse
     */
    totalCount: number;
    /**
     * next_offset is the next offset to use when paginating through transaction results. If this field is not populated, there are no more transactions to query.
     * @type {number}
     * @memberof SearchTransactionsResponse
     */
    nextOffset?: number;
}
/**
 * Signature contains the payload that was signed, the public keys of the keypairs used to produce the signature, the signature (encoded in hex), and the SignatureType. PublicKey is often times not known during construction of the signing payloads but may be needed to combine signatures properly.
 * @export
 * @interface Signature
 */
export interface Signature {
    /**
     * 
     * @type {SigningPayload}
     * @memberof Signature
     */
    signingPayload: SigningPayload;
    /**
     * 
     * @type {PublicKey}
     * @memberof Signature
     */
    publicKey: PublicKey;
    /**
     * 
     * @type {SignatureType}
     * @memberof Signature
     */
    signatureType: SignatureType;
    /**
     * 
     * @type {string}
     * @memberof Signature
     */
    hexBytes: string;
}
/**
 * SignatureType is the type of a cryptographic signature. * ecdsa: `r (32-bytes) || s (32-bytes)` - `64 bytes` * ecdsa_recovery: `r (32-bytes) || s (32-bytes) || v (1-byte)` - `65 bytes` * ed25519: `R (32-byte) || s (32-bytes)` - `64 bytes` * schnorr_1: `r (32-bytes) || s (32-bytes)` - `64 bytes`  (schnorr signature implemented by Zilliqa where both `r` and `s` are scalars encoded as `32-bytes` values, most significant byte first.) * schnorr_poseidon: `r (32-bytes) || s (32-bytes)` where s = Hash(1st pk || 2nd pk || r) - `64 bytes`  (schnorr signature w/ Poseidon hash function implemented by O(1) Labs where both `r` and `s` are scalars encoded as `32-bytes` values, least significant byte first. https://github.com/CodaProtocol/signer-reference/blob/master/schnorr.ml )
 * @export
 * @enum {string}
 */
export enum SignatureType {
    Ecdsa = <any> 'ecdsa',
    EcdsaRecovery = <any> 'ecdsa_recovery',
    Ed25519 = <any> 'ed25519',
    Schnorr1 = <any> 'schnorr_1',
    SchnorrPoseidon = <any> 'schnorr_poseidon'
}
/**
 * SigningPayload is signed by the client with the keypair associated with an AccountIdentifier using the specified SignatureType. SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload.
 * @export
 * @interface SigningPayload
 */
export interface SigningPayload {
    /**
     * [DEPRECATED by `account_identifier` in `v1.4.4`] The network-specific address of the account that should sign the payload.
     * @type {string}
     * @memberof SigningPayload
     */
    address?: string;
    /**
     * 
     * @type {AccountIdentifier}
     * @memberof SigningPayload
     */
    accountIdentifier?: AccountIdentifier;
    /**
     * 
     * @type {string}
     * @memberof SigningPayload
     */
    hexBytes: string;
    /**
     * 
     * @type {SignatureType}
     * @memberof SigningPayload
     */
    signatureType?: SignatureType;
}
/**
 * An account may have state specific to a contract address (ERC-20 token) and/or a stake (delegated balance). The sub_account_identifier should specify which state (if applicable) an account instantiation refers to.
 * @export
 * @interface SubAccountIdentifier
 */
export interface SubAccountIdentifier {
    /**
     * The SubAccount address may be a cryptographic value or some other identifier (ex: bonded) that uniquely specifies a SubAccount.
     * @type {string}
     * @memberof SubAccountIdentifier
     */
    address: string;
    /**
     * If the SubAccount address is not sufficient to uniquely specify a SubAccount, any other identifying information can be stored here. It is important to note that two SubAccounts with identical addresses but differing metadata will not be considered equal by clients.
     * @type {any}
     * @memberof SubAccountIdentifier
     */
    metadata?: any;
}
/**
 * In blockchains with sharded state, the SubNetworkIdentifier is required to query some object on a specific shard. This identifier is optional for all non-sharded blockchains.
 * @export
 * @interface SubNetworkIdentifier
 */
export interface SubNetworkIdentifier {
    /**
     * 
     * @type {string}
     * @memberof SubNetworkIdentifier
     */
    network: string;
    /**
     * 
     * @type {any}
     * @memberof SubNetworkIdentifier
     */
    metadata?: any;
}
/**
 * SyncStatus is used to provide additional context about an implementation's sync status. This object is often used by implementations to indicate healthiness when block data cannot be queried until some sync phase completes or cannot be determined by comparing the timestamp of the most recent block with the current time.
 * @export
 * @interface SyncStatus
 */
export interface SyncStatus {
    /**
     * CurrentIndex is the index of the last synced block in the current stage. This is a separate field from current_block_identifier in NetworkStatusResponse because blocks with indices up to and including the current_index may not yet be queryable by the caller. To reiterate, all indices up to and including current_block_identifier in NetworkStatusResponse must be queryable via the /block endpoint (excluding indices less than oldest_block_identifier).
     * @type {number}
     * @memberof SyncStatus
     */
    currentIndex?: number;
    /**
     * TargetIndex is the index of the block that the implementation is attempting to sync to in the current stage.
     * @type {number}
     * @memberof SyncStatus
     */
    targetIndex?: number;
    /**
     * Stage is the phase of the sync process.
     * @type {string}
     * @memberof SyncStatus
     */
    stage?: string;
    /**
     * sycned is a boolean that indicates if an implementation has synced up to the most recent block. If this field is not populated, the caller should rely on a traditional tip timestamp comparison to determine if an implementation is synced. This field is particularly useful for quiescent blockchains (blocks only produced when there are pending transactions). In these blockchains, the most recent block could have a timestamp far behind the current time but the node could be healthy and at tip.
     * @type {boolean}
     * @memberof SyncStatus
     */
    synced?: boolean;
}
/**
 * The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second.
 * @export
 * @interface Timestamp
 */
export interface Timestamp {
}
/**
 * Transactions contain an array of Operations that are attributable to the same TransactionIdentifier.
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {TransactionIdentifier}
     * @memberof Transaction
     */
    transactionIdentifier: TransactionIdentifier;
    /**
     * 
     * @type {Array<Operation>}
     * @memberof Transaction
     */
    operations: Array<Operation>;
    /**
     * 
     * @type {Array<RelatedTransaction>}
     * @memberof Transaction
     */
    relatedTransactions?: Array<RelatedTransaction>;
    /**
     * Transactions that are related to other transactions (like a cross-shard transaction) should include the tranaction_identifier of these transactions in the metadata.
     * @type {any}
     * @memberof Transaction
     */
    metadata?: any;
}
/**
 * The transaction_identifier uniquely identifies a transaction in a particular network and block or in the mempool.
 * @export
 * @interface TransactionIdentifier
 */
export interface TransactionIdentifier {
    /**
     * Any transactions that are attributable only to a block (ex: a block event) should use the hash of the block as the identifier.
     * @type {string}
     * @memberof TransactionIdentifier
     */
    hash: string;
}
/**
 * TransactionIdentifierResponse contains the transaction_identifier of a transaction that was submitted to either `/construction/hash` or `/construction/submit`.
 * @export
 * @interface TransactionIdentifierResponse
 */
export interface TransactionIdentifierResponse {
    /**
     * 
     * @type {TransactionIdentifier}
     * @memberof TransactionIdentifierResponse
     */
    transactionIdentifier: TransactionIdentifier;
    /**
     * 
     * @type {any}
     * @memberof TransactionIdentifierResponse
     */
    metadata?: any;
}
/**
 * The Version object is utilized to inform the client of the versions of different components of the Rosetta implementation.
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.
     * @type {string}
     * @memberof Version
     */
    rosettaVersion: string;
    /**
     * The node_version is the canonical version of the node runtime. This can help clients manage deployments.
     * @type {string}
     * @memberof Version
     */
    nodeVersion: string;
    /**
     * When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.
     * @type {string}
     * @memberof Version
     */
    middlewareVersion?: string;
    /**
     * Any other information that may be useful about versioning of dependent services should be returned here.
     * @type {any}
     * @memberof Version
     */
    metadata?: any;
}
/**
 * AccountApi - fetch parameter creator
 * @export
 */
export const AccountApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an array of all AccountBalances for an AccountIdentifier and the BlockIdentifier at which the balance lookup was performed. The BlockIdentifier must always be returned because some consumers of account balance data need to know specifically at which block the balance was calculated to compare balances they compute from operations with the balance returned by the node. It is important to note that making a balance request for an account without populating the SubAccountIdentifier should not result in the balance of all possible SubAccountIdentifiers being returned. Rather, it should result in the balance pertaining to no SubAccountIdentifiers being returned (sometimes called the liquid balance). To get all balances associated with an account, it may be necessary to perform multiple balance requests with unique AccountIdentifiers. It is also possible to perform a historical balance lookup (if the server supports it) by passing in an optional BlockIdentifier.
         * @summary Get an Account's Balance
         * @param {AccountBalanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountBalance(body: AccountBalanceRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountBalance.');
            }
            const localVarPath = `/account/balance`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountBalanceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an array of all unspent coins for an AccountIdentifier and the BlockIdentifier at which the lookup was performed. If your implementation does not support coins (i.e. it is for an account-based blockchain), you do not need to implement this endpoint. If you implementation does support coins (i.e. it is fro a UTXO-based blockchain), you MUST also complete the `/account/balance` endpoint. It is important to note that making a coins request for an account without populating the SubAccountIdentifier should not result in the coins of all possible SubAccountIdentifiers being returned. Rather, it should result in the coins pertaining to no SubAccountIdentifiers being returned. To get all coins associated with an account, it may be necessary to perform multiple coin requests with unique AccountIdentifiers. Optionally, an implementation may choose to support updating an AccountIdentifier's unspent coins based on the contents of the mempool. Note, using this functionality breaks any guarantee of idempotency.
         * @summary Get an Account's Unspent Coins
         * @param {AccountCoinsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountCoins(body: AccountCoinsRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountCoins.');
            }
            const localVarPath = `/account/coins`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountCoinsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get an array of all AccountBalances for an AccountIdentifier and the BlockIdentifier at which the balance lookup was performed. The BlockIdentifier must always be returned because some consumers of account balance data need to know specifically at which block the balance was calculated to compare balances they compute from operations with the balance returned by the node. It is important to note that making a balance request for an account without populating the SubAccountIdentifier should not result in the balance of all possible SubAccountIdentifiers being returned. Rather, it should result in the balance pertaining to no SubAccountIdentifiers being returned (sometimes called the liquid balance). To get all balances associated with an account, it may be necessary to perform multiple balance requests with unique AccountIdentifiers. It is also possible to perform a historical balance lookup (if the server supports it) by passing in an optional BlockIdentifier.
         * @summary Get an Account's Balance
         * @param {AccountBalanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountBalance(body: AccountBalanceRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountBalanceResponse> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).accountBalance(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get an array of all unspent coins for an AccountIdentifier and the BlockIdentifier at which the lookup was performed. If your implementation does not support coins (i.e. it is for an account-based blockchain), you do not need to implement this endpoint. If you implementation does support coins (i.e. it is fro a UTXO-based blockchain), you MUST also complete the `/account/balance` endpoint. It is important to note that making a coins request for an account without populating the SubAccountIdentifier should not result in the coins of all possible SubAccountIdentifiers being returned. Rather, it should result in the coins pertaining to no SubAccountIdentifiers being returned. To get all coins associated with an account, it may be necessary to perform multiple coin requests with unique AccountIdentifiers. Optionally, an implementation may choose to support updating an AccountIdentifier's unspent coins based on the contents of the mempool. Note, using this functionality breaks any guarantee of idempotency.
         * @summary Get an Account's Unspent Coins
         * @param {AccountCoinsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountCoins(body: AccountCoinsRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountCoinsResponse> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).accountCoins(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get an array of all AccountBalances for an AccountIdentifier and the BlockIdentifier at which the balance lookup was performed. The BlockIdentifier must always be returned because some consumers of account balance data need to know specifically at which block the balance was calculated to compare balances they compute from operations with the balance returned by the node. It is important to note that making a balance request for an account without populating the SubAccountIdentifier should not result in the balance of all possible SubAccountIdentifiers being returned. Rather, it should result in the balance pertaining to no SubAccountIdentifiers being returned (sometimes called the liquid balance). To get all balances associated with an account, it may be necessary to perform multiple balance requests with unique AccountIdentifiers. It is also possible to perform a historical balance lookup (if the server supports it) by passing in an optional BlockIdentifier.
         * @summary Get an Account's Balance
         * @param {AccountBalanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountBalance(body: AccountBalanceRequest, options?: any) {
            return AccountApiFp(configuration).accountBalance(body, options)(fetch, basePath);
        },
        /**
         * Get an array of all unspent coins for an AccountIdentifier and the BlockIdentifier at which the lookup was performed. If your implementation does not support coins (i.e. it is for an account-based blockchain), you do not need to implement this endpoint. If you implementation does support coins (i.e. it is fro a UTXO-based blockchain), you MUST also complete the `/account/balance` endpoint. It is important to note that making a coins request for an account without populating the SubAccountIdentifier should not result in the coins of all possible SubAccountIdentifiers being returned. Rather, it should result in the coins pertaining to no SubAccountIdentifiers being returned. To get all coins associated with an account, it may be necessary to perform multiple coin requests with unique AccountIdentifiers. Optionally, an implementation may choose to support updating an AccountIdentifier's unspent coins based on the contents of the mempool. Note, using this functionality breaks any guarantee of idempotency.
         * @summary Get an Account's Unspent Coins
         * @param {AccountCoinsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountCoins(body: AccountCoinsRequest, options?: any) {
            return AccountApiFp(configuration).accountCoins(body, options)(fetch, basePath);
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * Get an array of all AccountBalances for an AccountIdentifier and the BlockIdentifier at which the balance lookup was performed. The BlockIdentifier must always be returned because some consumers of account balance data need to know specifically at which block the balance was calculated to compare balances they compute from operations with the balance returned by the node. It is important to note that making a balance request for an account without populating the SubAccountIdentifier should not result in the balance of all possible SubAccountIdentifiers being returned. Rather, it should result in the balance pertaining to no SubAccountIdentifiers being returned (sometimes called the liquid balance). To get all balances associated with an account, it may be necessary to perform multiple balance requests with unique AccountIdentifiers. It is also possible to perform a historical balance lookup (if the server supports it) by passing in an optional BlockIdentifier.
     * @summary Get an Account's Balance
     * @param {AccountBalanceRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountBalance(body: AccountBalanceRequest, options?: any) {
        return AccountApiFp(this.configuration).accountBalance(body, options)(this.fetch, this.basePath);
    }

    /**
     * Get an array of all unspent coins for an AccountIdentifier and the BlockIdentifier at which the lookup was performed. If your implementation does not support coins (i.e. it is for an account-based blockchain), you do not need to implement this endpoint. If you implementation does support coins (i.e. it is fro a UTXO-based blockchain), you MUST also complete the `/account/balance` endpoint. It is important to note that making a coins request for an account without populating the SubAccountIdentifier should not result in the coins of all possible SubAccountIdentifiers being returned. Rather, it should result in the coins pertaining to no SubAccountIdentifiers being returned. To get all coins associated with an account, it may be necessary to perform multiple coin requests with unique AccountIdentifiers. Optionally, an implementation may choose to support updating an AccountIdentifier's unspent coins based on the contents of the mempool. Note, using this functionality breaks any guarantee of idempotency.
     * @summary Get an Account's Unspent Coins
     * @param {AccountCoinsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountCoins(body: AccountCoinsRequest, options?: any) {
        return AccountApiFp(this.configuration).accountCoins(body, options)(this.fetch, this.basePath);
    }

}
/**
 * BlockApi - fetch parameter creator
 * @export
 */
export const BlockApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a block by its Block Identifier. If transactions are returned in the same call to the node as fetching the block, the response should include these transactions in the Block object. If not, an array of Transaction Identifiers should be returned so /block/transaction fetches can be done to get all transaction information. When requesting a block by the hash component of the BlockIdentifier, this request MUST be idempotent: repeated invocations for the same hash-identified block must return the exact same block contents. No such restriction is imposed when requesting a block by height, given that a chain reorg event might cause the specific block at height `n` to be set to a different one.
         * @summary Get a Block
         * @param {BlockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        block(body: BlockRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling block.');
            }
            const localVarPath = `/block`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BlockRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a transaction in a block by its Transaction Identifier. This endpoint should only be used when querying a node for a block does not return all transactions contained within it. All transactions returned by this endpoint must be appended to any transactions returned by the /block method by consumers of this data. Fetching a transaction by hash is considered an Explorer Method (which is classified under the Future Work section). This method can be used to let consumers to paginate results when the  block trasactions count is too big to be returned in a single BlockResponse. Calling this endpoint requires reference to a BlockIdentifier because transaction parsing can change depending on which block contains the transaction. For example, in Bitcoin it is necessary to know which block contains a transaction to determine the destination of fee payments. Without specifying a block identifier, the node would have to infer which block to use (which could change during a re-org). Implementations that require fetching previous transactions to populate the response (ex: Previous UTXOs in Bitcoin) may find it useful to run a cache within the Rosetta server in the /data directory (on a path that does not conflict with the node).
         * @summary Get a Block Transaction
         * @param {BlockTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockTransaction(body: BlockTransactionRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling blockTransaction.');
            }
            const localVarPath = `/block/transaction`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BlockTransactionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlockApi - functional programming interface
 * @export
 */
export const BlockApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a block by its Block Identifier. If transactions are returned in the same call to the node as fetching the block, the response should include these transactions in the Block object. If not, an array of Transaction Identifiers should be returned so /block/transaction fetches can be done to get all transaction information. When requesting a block by the hash component of the BlockIdentifier, this request MUST be idempotent: repeated invocations for the same hash-identified block must return the exact same block contents. No such restriction is imposed when requesting a block by height, given that a chain reorg event might cause the specific block at height `n` to be set to a different one.
         * @summary Get a Block
         * @param {BlockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        block(body: BlockRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BlockResponse> {
            const localVarFetchArgs = BlockApiFetchParamCreator(configuration).block(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a transaction in a block by its Transaction Identifier. This endpoint should only be used when querying a node for a block does not return all transactions contained within it. All transactions returned by this endpoint must be appended to any transactions returned by the /block method by consumers of this data. Fetching a transaction by hash is considered an Explorer Method (which is classified under the Future Work section). This method can be used to let consumers to paginate results when the  block trasactions count is too big to be returned in a single BlockResponse. Calling this endpoint requires reference to a BlockIdentifier because transaction parsing can change depending on which block contains the transaction. For example, in Bitcoin it is necessary to know which block contains a transaction to determine the destination of fee payments. Without specifying a block identifier, the node would have to infer which block to use (which could change during a re-org). Implementations that require fetching previous transactions to populate the response (ex: Previous UTXOs in Bitcoin) may find it useful to run a cache within the Rosetta server in the /data directory (on a path that does not conflict with the node).
         * @summary Get a Block Transaction
         * @param {BlockTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockTransaction(body: BlockTransactionRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BlockTransactionResponse> {
            const localVarFetchArgs = BlockApiFetchParamCreator(configuration).blockTransaction(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BlockApi - factory interface
 * @export
 */
export const BlockApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get a block by its Block Identifier. If transactions are returned in the same call to the node as fetching the block, the response should include these transactions in the Block object. If not, an array of Transaction Identifiers should be returned so /block/transaction fetches can be done to get all transaction information. When requesting a block by the hash component of the BlockIdentifier, this request MUST be idempotent: repeated invocations for the same hash-identified block must return the exact same block contents. No such restriction is imposed when requesting a block by height, given that a chain reorg event might cause the specific block at height `n` to be set to a different one.
         * @summary Get a Block
         * @param {BlockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        block(body: BlockRequest, options?: any) {
            return BlockApiFp(configuration).block(body, options)(fetch, basePath);
        },
        /**
         * Get a transaction in a block by its Transaction Identifier. This endpoint should only be used when querying a node for a block does not return all transactions contained within it. All transactions returned by this endpoint must be appended to any transactions returned by the /block method by consumers of this data. Fetching a transaction by hash is considered an Explorer Method (which is classified under the Future Work section). This method can be used to let consumers to paginate results when the  block trasactions count is too big to be returned in a single BlockResponse. Calling this endpoint requires reference to a BlockIdentifier because transaction parsing can change depending on which block contains the transaction. For example, in Bitcoin it is necessary to know which block contains a transaction to determine the destination of fee payments. Without specifying a block identifier, the node would have to infer which block to use (which could change during a re-org). Implementations that require fetching previous transactions to populate the response (ex: Previous UTXOs in Bitcoin) may find it useful to run a cache within the Rosetta server in the /data directory (on a path that does not conflict with the node).
         * @summary Get a Block Transaction
         * @param {BlockTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockTransaction(body: BlockTransactionRequest, options?: any) {
            return BlockApiFp(configuration).blockTransaction(body, options)(fetch, basePath);
        },
    };
};

/**
 * BlockApi - object-oriented interface
 * @export
 * @class BlockApi
 * @extends {BaseAPI}
 */
export class BlockApi extends BaseAPI {
    /**
     * Get a block by its Block Identifier. If transactions are returned in the same call to the node as fetching the block, the response should include these transactions in the Block object. If not, an array of Transaction Identifiers should be returned so /block/transaction fetches can be done to get all transaction information. When requesting a block by the hash component of the BlockIdentifier, this request MUST be idempotent: repeated invocations for the same hash-identified block must return the exact same block contents. No such restriction is imposed when requesting a block by height, given that a chain reorg event might cause the specific block at height `n` to be set to a different one.
     * @summary Get a Block
     * @param {BlockRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public block(body: BlockRequest, options?: any) {
        return BlockApiFp(this.configuration).block(body, options)(this.fetch, this.basePath);
    }

    /**
     * Get a transaction in a block by its Transaction Identifier. This endpoint should only be used when querying a node for a block does not return all transactions contained within it. All transactions returned by this endpoint must be appended to any transactions returned by the /block method by consumers of this data. Fetching a transaction by hash is considered an Explorer Method (which is classified under the Future Work section). This method can be used to let consumers to paginate results when the  block trasactions count is too big to be returned in a single BlockResponse. Calling this endpoint requires reference to a BlockIdentifier because transaction parsing can change depending on which block contains the transaction. For example, in Bitcoin it is necessary to know which block contains a transaction to determine the destination of fee payments. Without specifying a block identifier, the node would have to infer which block to use (which could change during a re-org). Implementations that require fetching previous transactions to populate the response (ex: Previous UTXOs in Bitcoin) may find it useful to run a cache within the Rosetta server in the /data directory (on a path that does not conflict with the node).
     * @summary Get a Block Transaction
     * @param {BlockTransactionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    public blockTransaction(body: BlockTransactionRequest, options?: any) {
        return BlockApiFp(this.configuration).blockTransaction(body, options)(this.fetch, this.basePath);
    }

}
/**
 * CallApi - fetch parameter creator
 * @export
 */
export const CallApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Call invokes an arbitrary, network-specific procedure call with network-specific parameters. The guidance for what this endpoint should or could do is purposely left vague. In Ethereum, this could be used to invoke `eth_call` to implement an entire Rosetta API interface for some smart contract that is not parsed by the implementation creator (like a DEX). This endpoint could also be used to provide access to data that does not map to any Rosetta models instead of requiring an integrator to use some network-specific SDK and call some network-specific endpoint (like surfacing staking parameters). Call is NOT a replacement for implementing Rosetta API endpoints or mapping network-specific data to Rosetta models. Rather, it enables developers to build additional Rosetta API interfaces for things they care about without introducing complexity into a base-level Rosetta implementation. Simply put, imagine that the average integrator will use layered Rosetta API implementations that each surfaces unique data.
         * @summary Make a Network-Specific Procedure Call
         * @param {CallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        call(body: CallRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling call.');
            }
            const localVarPath = `/call`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CallRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallApi - functional programming interface
 * @export
 */
export const CallApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Call invokes an arbitrary, network-specific procedure call with network-specific parameters. The guidance for what this endpoint should or could do is purposely left vague. In Ethereum, this could be used to invoke `eth_call` to implement an entire Rosetta API interface for some smart contract that is not parsed by the implementation creator (like a DEX). This endpoint could also be used to provide access to data that does not map to any Rosetta models instead of requiring an integrator to use some network-specific SDK and call some network-specific endpoint (like surfacing staking parameters). Call is NOT a replacement for implementing Rosetta API endpoints or mapping network-specific data to Rosetta models. Rather, it enables developers to build additional Rosetta API interfaces for things they care about without introducing complexity into a base-level Rosetta implementation. Simply put, imagine that the average integrator will use layered Rosetta API implementations that each surfaces unique data.
         * @summary Make a Network-Specific Procedure Call
         * @param {CallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        call(body: CallRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CallResponse> {
            const localVarFetchArgs = CallApiFetchParamCreator(configuration).call(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CallApi - factory interface
 * @export
 */
export const CallApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Call invokes an arbitrary, network-specific procedure call with network-specific parameters. The guidance for what this endpoint should or could do is purposely left vague. In Ethereum, this could be used to invoke `eth_call` to implement an entire Rosetta API interface for some smart contract that is not parsed by the implementation creator (like a DEX). This endpoint could also be used to provide access to data that does not map to any Rosetta models instead of requiring an integrator to use some network-specific SDK and call some network-specific endpoint (like surfacing staking parameters). Call is NOT a replacement for implementing Rosetta API endpoints or mapping network-specific data to Rosetta models. Rather, it enables developers to build additional Rosetta API interfaces for things they care about without introducing complexity into a base-level Rosetta implementation. Simply put, imagine that the average integrator will use layered Rosetta API implementations that each surfaces unique data.
         * @summary Make a Network-Specific Procedure Call
         * @param {CallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        call(body: CallRequest, options?: any) {
            return CallApiFp(configuration).call(body, options)(fetch, basePath);
        },
    };
};

/**
 * CallApi - object-oriented interface
 * @export
 * @class CallApi
 * @extends {BaseAPI}
 */
export class CallApi extends BaseAPI {
    /**
     * Call invokes an arbitrary, network-specific procedure call with network-specific parameters. The guidance for what this endpoint should or could do is purposely left vague. In Ethereum, this could be used to invoke `eth_call` to implement an entire Rosetta API interface for some smart contract that is not parsed by the implementation creator (like a DEX). This endpoint could also be used to provide access to data that does not map to any Rosetta models instead of requiring an integrator to use some network-specific SDK and call some network-specific endpoint (like surfacing staking parameters). Call is NOT a replacement for implementing Rosetta API endpoints or mapping network-specific data to Rosetta models. Rather, it enables developers to build additional Rosetta API interfaces for things they care about without introducing complexity into a base-level Rosetta implementation. Simply put, imagine that the average integrator will use layered Rosetta API implementations that each surfaces unique data.
     * @summary Make a Network-Specific Procedure Call
     * @param {CallRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallApi
     */
    public call(body: CallRequest, options?: any) {
        return CallApiFp(this.configuration).call(body, options)(this.fetch, this.basePath);
    }

}
/**
 * ConstructionApi - fetch parameter creator
 * @export
 */
export const ConstructionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Combine creates a network-specific transaction from an unsigned transaction and an array of provided signatures. The signed transaction returned from this method will be sent to the `/construction/submit` endpoint by the caller.
         * @summary Create Network Transaction from Signatures
         * @param {ConstructionCombineRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionCombine(body: ConstructionCombineRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling constructionCombine.');
            }
            const localVarPath = `/construction/combine`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConstructionCombineRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Derive returns the AccountIdentifier associated with a public key. Blockchains that require an on-chain action to create an account should not implement this method.
         * @summary Derive an AccountIdentifier from a PublicKey
         * @param {ConstructionDeriveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionDerive(body: ConstructionDeriveRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling constructionDerive.');
            }
            const localVarPath = `/construction/derive`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConstructionDeriveRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * TransactionHash returns the network-specific transaction hash for a signed transaction.
         * @summary Get the Hash of a Signed Transaction
         * @param {ConstructionHashRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionHash(body: ConstructionHashRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling constructionHash.');
            }
            const localVarPath = `/construction/hash`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConstructionHashRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get any information required to construct a transaction for a specific network. Metadata returned here could be a recent hash to use, an account sequence number, or even arbitrary chain state. The request used when calling this endpoint is created by calling `/construction/preprocess` in an offline environment. You should NEVER assume that the request sent to this endpoint will be created by the caller or populated with any custom parameters. This must occur in `/construction/preprocess`. It is important to clarify that this endpoint should not pre-construct any transactions for the client (this should happen in `/construction/payloads`). This endpoint is left purposely unstructured because of the wide scope of metadata that could be required.
         * @summary Get Metadata for Transaction Construction
         * @param {ConstructionMetadataRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionMetadata(body: ConstructionMetadataRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling constructionMetadata.');
            }
            const localVarPath = `/construction/metadata`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConstructionMetadataRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Parse is called on both unsigned and signed transactions to understand the intent of the formulated transaction. This is run as a sanity check before signing (after `/construction/payloads`) and before broadcast (after `/construction/combine`). 
         * @summary Parse a Transaction
         * @param {ConstructionParseRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionParse(body: ConstructionParseRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling constructionParse.');
            }
            const localVarPath = `/construction/parse`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConstructionParseRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Payloads is called with an array of operations and the response from `/construction/metadata`. It returns an unsigned transaction blob and a collection of payloads that must be signed by particular AccountIdentifiers using a certain SignatureType. The array of operations provided in transaction construction often times can not specify all \"effects\" of a transaction (consider invoked transactions in Ethereum). However, they can deterministically specify the \"intent\" of the transaction, which is sufficient for construction. For this reason, parsing the corresponding transaction in the Data API (when it lands on chain) will contain a superset of whatever operations were provided during construction.
         * @summary Generate an Unsigned Transaction and Signing Payloads
         * @param {ConstructionPayloadsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionPayloads(body: ConstructionPayloadsRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling constructionPayloads.');
            }
            const localVarPath = `/construction/payloads`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConstructionPayloadsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Preprocess is called prior to `/construction/payloads` to construct a request for any metadata that is needed for transaction construction given (i.e. account nonce). The `options` object returned from this endpoint will be sent to the `/construction/metadata` endpoint UNMODIFIED by the caller (in an offline execution environment). If your Construction API implementation has configuration options, they MUST be specified in the `/construction/preprocess` request (in the `metadata` field).
         * @summary Create a Request to Fetch Metadata
         * @param {ConstructionPreprocessRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionPreprocess(body: ConstructionPreprocessRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling constructionPreprocess.');
            }
            const localVarPath = `/construction/preprocess`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConstructionPreprocessRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit a pre-signed transaction to the node. This call should not block on the transaction being included in a block. Rather, it should return immediately with an indication of whether or not the transaction was included in the mempool. The transaction submission response should only return a 200 status if the submitted transaction could be included in the mempool. Otherwise, it should return an error.
         * @summary Submit a Signed Transaction
         * @param {ConstructionSubmitRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionSubmit(body: ConstructionSubmitRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling constructionSubmit.');
            }
            const localVarPath = `/construction/submit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConstructionSubmitRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConstructionApi - functional programming interface
 * @export
 */
export const ConstructionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Combine creates a network-specific transaction from an unsigned transaction and an array of provided signatures. The signed transaction returned from this method will be sent to the `/construction/submit` endpoint by the caller.
         * @summary Create Network Transaction from Signatures
         * @param {ConstructionCombineRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionCombine(body: ConstructionCombineRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConstructionCombineResponse> {
            const localVarFetchArgs = ConstructionApiFetchParamCreator(configuration).constructionCombine(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Derive returns the AccountIdentifier associated with a public key. Blockchains that require an on-chain action to create an account should not implement this method.
         * @summary Derive an AccountIdentifier from a PublicKey
         * @param {ConstructionDeriveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionDerive(body: ConstructionDeriveRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConstructionDeriveResponse> {
            const localVarFetchArgs = ConstructionApiFetchParamCreator(configuration).constructionDerive(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * TransactionHash returns the network-specific transaction hash for a signed transaction.
         * @summary Get the Hash of a Signed Transaction
         * @param {ConstructionHashRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionHash(body: ConstructionHashRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionIdentifierResponse> {
            const localVarFetchArgs = ConstructionApiFetchParamCreator(configuration).constructionHash(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get any information required to construct a transaction for a specific network. Metadata returned here could be a recent hash to use, an account sequence number, or even arbitrary chain state. The request used when calling this endpoint is created by calling `/construction/preprocess` in an offline environment. You should NEVER assume that the request sent to this endpoint will be created by the caller or populated with any custom parameters. This must occur in `/construction/preprocess`. It is important to clarify that this endpoint should not pre-construct any transactions for the client (this should happen in `/construction/payloads`). This endpoint is left purposely unstructured because of the wide scope of metadata that could be required.
         * @summary Get Metadata for Transaction Construction
         * @param {ConstructionMetadataRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionMetadata(body: ConstructionMetadataRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConstructionMetadataResponse> {
            const localVarFetchArgs = ConstructionApiFetchParamCreator(configuration).constructionMetadata(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Parse is called on both unsigned and signed transactions to understand the intent of the formulated transaction. This is run as a sanity check before signing (after `/construction/payloads`) and before broadcast (after `/construction/combine`). 
         * @summary Parse a Transaction
         * @param {ConstructionParseRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionParse(body: ConstructionParseRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConstructionParseResponse> {
            const localVarFetchArgs = ConstructionApiFetchParamCreator(configuration).constructionParse(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Payloads is called with an array of operations and the response from `/construction/metadata`. It returns an unsigned transaction blob and a collection of payloads that must be signed by particular AccountIdentifiers using a certain SignatureType. The array of operations provided in transaction construction often times can not specify all \"effects\" of a transaction (consider invoked transactions in Ethereum). However, they can deterministically specify the \"intent\" of the transaction, which is sufficient for construction. For this reason, parsing the corresponding transaction in the Data API (when it lands on chain) will contain a superset of whatever operations were provided during construction.
         * @summary Generate an Unsigned Transaction and Signing Payloads
         * @param {ConstructionPayloadsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionPayloads(body: ConstructionPayloadsRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConstructionPayloadsResponse> {
            const localVarFetchArgs = ConstructionApiFetchParamCreator(configuration).constructionPayloads(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Preprocess is called prior to `/construction/payloads` to construct a request for any metadata that is needed for transaction construction given (i.e. account nonce). The `options` object returned from this endpoint will be sent to the `/construction/metadata` endpoint UNMODIFIED by the caller (in an offline execution environment). If your Construction API implementation has configuration options, they MUST be specified in the `/construction/preprocess` request (in the `metadata` field).
         * @summary Create a Request to Fetch Metadata
         * @param {ConstructionPreprocessRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionPreprocess(body: ConstructionPreprocessRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ConstructionPreprocessResponse> {
            const localVarFetchArgs = ConstructionApiFetchParamCreator(configuration).constructionPreprocess(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Submit a pre-signed transaction to the node. This call should not block on the transaction being included in a block. Rather, it should return immediately with an indication of whether or not the transaction was included in the mempool. The transaction submission response should only return a 200 status if the submitted transaction could be included in the mempool. Otherwise, it should return an error.
         * @summary Submit a Signed Transaction
         * @param {ConstructionSubmitRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionSubmit(body: ConstructionSubmitRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionIdentifierResponse> {
            const localVarFetchArgs = ConstructionApiFetchParamCreator(configuration).constructionSubmit(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ConstructionApi - factory interface
 * @export
 */
export const ConstructionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Combine creates a network-specific transaction from an unsigned transaction and an array of provided signatures. The signed transaction returned from this method will be sent to the `/construction/submit` endpoint by the caller.
         * @summary Create Network Transaction from Signatures
         * @param {ConstructionCombineRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionCombine(body: ConstructionCombineRequest, options?: any) {
            return ConstructionApiFp(configuration).constructionCombine(body, options)(fetch, basePath);
        },
        /**
         * Derive returns the AccountIdentifier associated with a public key. Blockchains that require an on-chain action to create an account should not implement this method.
         * @summary Derive an AccountIdentifier from a PublicKey
         * @param {ConstructionDeriveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionDerive(body: ConstructionDeriveRequest, options?: any) {
            return ConstructionApiFp(configuration).constructionDerive(body, options)(fetch, basePath);
        },
        /**
         * TransactionHash returns the network-specific transaction hash for a signed transaction.
         * @summary Get the Hash of a Signed Transaction
         * @param {ConstructionHashRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionHash(body: ConstructionHashRequest, options?: any) {
            return ConstructionApiFp(configuration).constructionHash(body, options)(fetch, basePath);
        },
        /**
         * Get any information required to construct a transaction for a specific network. Metadata returned here could be a recent hash to use, an account sequence number, or even arbitrary chain state. The request used when calling this endpoint is created by calling `/construction/preprocess` in an offline environment. You should NEVER assume that the request sent to this endpoint will be created by the caller or populated with any custom parameters. This must occur in `/construction/preprocess`. It is important to clarify that this endpoint should not pre-construct any transactions for the client (this should happen in `/construction/payloads`). This endpoint is left purposely unstructured because of the wide scope of metadata that could be required.
         * @summary Get Metadata for Transaction Construction
         * @param {ConstructionMetadataRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionMetadata(body: ConstructionMetadataRequest, options?: any) {
            return ConstructionApiFp(configuration).constructionMetadata(body, options)(fetch, basePath);
        },
        /**
         * Parse is called on both unsigned and signed transactions to understand the intent of the formulated transaction. This is run as a sanity check before signing (after `/construction/payloads`) and before broadcast (after `/construction/combine`). 
         * @summary Parse a Transaction
         * @param {ConstructionParseRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionParse(body: ConstructionParseRequest, options?: any) {
            return ConstructionApiFp(configuration).constructionParse(body, options)(fetch, basePath);
        },
        /**
         * Payloads is called with an array of operations and the response from `/construction/metadata`. It returns an unsigned transaction blob and a collection of payloads that must be signed by particular AccountIdentifiers using a certain SignatureType. The array of operations provided in transaction construction often times can not specify all \"effects\" of a transaction (consider invoked transactions in Ethereum). However, they can deterministically specify the \"intent\" of the transaction, which is sufficient for construction. For this reason, parsing the corresponding transaction in the Data API (when it lands on chain) will contain a superset of whatever operations were provided during construction.
         * @summary Generate an Unsigned Transaction and Signing Payloads
         * @param {ConstructionPayloadsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionPayloads(body: ConstructionPayloadsRequest, options?: any) {
            return ConstructionApiFp(configuration).constructionPayloads(body, options)(fetch, basePath);
        },
        /**
         * Preprocess is called prior to `/construction/payloads` to construct a request for any metadata that is needed for transaction construction given (i.e. account nonce). The `options` object returned from this endpoint will be sent to the `/construction/metadata` endpoint UNMODIFIED by the caller (in an offline execution environment). If your Construction API implementation has configuration options, they MUST be specified in the `/construction/preprocess` request (in the `metadata` field).
         * @summary Create a Request to Fetch Metadata
         * @param {ConstructionPreprocessRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionPreprocess(body: ConstructionPreprocessRequest, options?: any) {
            return ConstructionApiFp(configuration).constructionPreprocess(body, options)(fetch, basePath);
        },
        /**
         * Submit a pre-signed transaction to the node. This call should not block on the transaction being included in a block. Rather, it should return immediately with an indication of whether or not the transaction was included in the mempool. The transaction submission response should only return a 200 status if the submitted transaction could be included in the mempool. Otherwise, it should return an error.
         * @summary Submit a Signed Transaction
         * @param {ConstructionSubmitRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        constructionSubmit(body: ConstructionSubmitRequest, options?: any) {
            return ConstructionApiFp(configuration).constructionSubmit(body, options)(fetch, basePath);
        },
    };
};

/**
 * ConstructionApi - object-oriented interface
 * @export
 * @class ConstructionApi
 * @extends {BaseAPI}
 */
export class ConstructionApi extends BaseAPI {
    /**
     * Combine creates a network-specific transaction from an unsigned transaction and an array of provided signatures. The signed transaction returned from this method will be sent to the `/construction/submit` endpoint by the caller.
     * @summary Create Network Transaction from Signatures
     * @param {ConstructionCombineRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructionApi
     */
    public constructionCombine(body: ConstructionCombineRequest, options?: any) {
        return ConstructionApiFp(this.configuration).constructionCombine(body, options)(this.fetch, this.basePath);
    }

    /**
     * Derive returns the AccountIdentifier associated with a public key. Blockchains that require an on-chain action to create an account should not implement this method.
     * @summary Derive an AccountIdentifier from a PublicKey
     * @param {ConstructionDeriveRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructionApi
     */
    public constructionDerive(body: ConstructionDeriveRequest, options?: any) {
        return ConstructionApiFp(this.configuration).constructionDerive(body, options)(this.fetch, this.basePath);
    }

    /**
     * TransactionHash returns the network-specific transaction hash for a signed transaction.
     * @summary Get the Hash of a Signed Transaction
     * @param {ConstructionHashRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructionApi
     */
    public constructionHash(body: ConstructionHashRequest, options?: any) {
        return ConstructionApiFp(this.configuration).constructionHash(body, options)(this.fetch, this.basePath);
    }

    /**
     * Get any information required to construct a transaction for a specific network. Metadata returned here could be a recent hash to use, an account sequence number, or even arbitrary chain state. The request used when calling this endpoint is created by calling `/construction/preprocess` in an offline environment. You should NEVER assume that the request sent to this endpoint will be created by the caller or populated with any custom parameters. This must occur in `/construction/preprocess`. It is important to clarify that this endpoint should not pre-construct any transactions for the client (this should happen in `/construction/payloads`). This endpoint is left purposely unstructured because of the wide scope of metadata that could be required.
     * @summary Get Metadata for Transaction Construction
     * @param {ConstructionMetadataRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructionApi
     */
    public constructionMetadata(body: ConstructionMetadataRequest, options?: any) {
        return ConstructionApiFp(this.configuration).constructionMetadata(body, options)(this.fetch, this.basePath);
    }

    /**
     * Parse is called on both unsigned and signed transactions to understand the intent of the formulated transaction. This is run as a sanity check before signing (after `/construction/payloads`) and before broadcast (after `/construction/combine`). 
     * @summary Parse a Transaction
     * @param {ConstructionParseRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructionApi
     */
    public constructionParse(body: ConstructionParseRequest, options?: any) {
        return ConstructionApiFp(this.configuration).constructionParse(body, options)(this.fetch, this.basePath);
    }

    /**
     * Payloads is called with an array of operations and the response from `/construction/metadata`. It returns an unsigned transaction blob and a collection of payloads that must be signed by particular AccountIdentifiers using a certain SignatureType. The array of operations provided in transaction construction often times can not specify all \"effects\" of a transaction (consider invoked transactions in Ethereum). However, they can deterministically specify the \"intent\" of the transaction, which is sufficient for construction. For this reason, parsing the corresponding transaction in the Data API (when it lands on chain) will contain a superset of whatever operations were provided during construction.
     * @summary Generate an Unsigned Transaction and Signing Payloads
     * @param {ConstructionPayloadsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructionApi
     */
    public constructionPayloads(body: ConstructionPayloadsRequest, options?: any) {
        return ConstructionApiFp(this.configuration).constructionPayloads(body, options)(this.fetch, this.basePath);
    }

    /**
     * Preprocess is called prior to `/construction/payloads` to construct a request for any metadata that is needed for transaction construction given (i.e. account nonce). The `options` object returned from this endpoint will be sent to the `/construction/metadata` endpoint UNMODIFIED by the caller (in an offline execution environment). If your Construction API implementation has configuration options, they MUST be specified in the `/construction/preprocess` request (in the `metadata` field).
     * @summary Create a Request to Fetch Metadata
     * @param {ConstructionPreprocessRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructionApi
     */
    public constructionPreprocess(body: ConstructionPreprocessRequest, options?: any) {
        return ConstructionApiFp(this.configuration).constructionPreprocess(body, options)(this.fetch, this.basePath);
    }

    /**
     * Submit a pre-signed transaction to the node. This call should not block on the transaction being included in a block. Rather, it should return immediately with an indication of whether or not the transaction was included in the mempool. The transaction submission response should only return a 200 status if the submitted transaction could be included in the mempool. Otherwise, it should return an error.
     * @summary Submit a Signed Transaction
     * @param {ConstructionSubmitRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConstructionApi
     */
    public constructionSubmit(body: ConstructionSubmitRequest, options?: any) {
        return ConstructionApiFp(this.configuration).constructionSubmit(body, options)(this.fetch, this.basePath);
    }

}
/**
 * EventsApi - fetch parameter creator
 * @export
 */
export const EventsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * `/events/blocks` allows the caller to query a sequence of BlockEvents indicating which blocks were added and removed from storage to reach the current state. Following BlockEvents allows lightweight clients to update their state without needing to implement their own syncing logic (like finding the common parent in a reorg). `/events/blocks` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
         * @summary [INDEXER] Get a range of BlockEvents
         * @param {EventsBlocksRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsBlocks(body: EventsBlocksRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsBlocks.');
            }
            const localVarPath = `/events/blocks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EventsBlocksRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * `/events/blocks` allows the caller to query a sequence of BlockEvents indicating which blocks were added and removed from storage to reach the current state. Following BlockEvents allows lightweight clients to update their state without needing to implement their own syncing logic (like finding the common parent in a reorg). `/events/blocks` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
         * @summary [INDEXER] Get a range of BlockEvents
         * @param {EventsBlocksRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsBlocks(body: EventsBlocksRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EventsBlocksResponse> {
            const localVarFetchArgs = EventsApiFetchParamCreator(configuration).eventsBlocks(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * `/events/blocks` allows the caller to query a sequence of BlockEvents indicating which blocks were added and removed from storage to reach the current state. Following BlockEvents allows lightweight clients to update their state without needing to implement their own syncing logic (like finding the common parent in a reorg). `/events/blocks` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
         * @summary [INDEXER] Get a range of BlockEvents
         * @param {EventsBlocksRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsBlocks(body: EventsBlocksRequest, options?: any) {
            return EventsApiFp(configuration).eventsBlocks(body, options)(fetch, basePath);
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * `/events/blocks` allows the caller to query a sequence of BlockEvents indicating which blocks were added and removed from storage to reach the current state. Following BlockEvents allows lightweight clients to update their state without needing to implement their own syncing logic (like finding the common parent in a reorg). `/events/blocks` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
     * @summary [INDEXER] Get a range of BlockEvents
     * @param {EventsBlocksRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsBlocks(body: EventsBlocksRequest, options?: any) {
        return EventsApiFp(this.configuration).eventsBlocks(body, options)(this.fetch, this.basePath);
    }

}
/**
 * MempoolApi - fetch parameter creator
 * @export
 */
export const MempoolApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all Transaction Identifiers in the mempool
         * @summary Get All Mempool Transactions
         * @param {NetworkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mempool(body: NetworkRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mempool.');
            }
            const localVarPath = `/mempool`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NetworkRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
         * @summary Get a Mempool Transaction
         * @param {MempoolTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mempoolTransaction(body: MempoolTransactionRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mempoolTransaction.');
            }
            const localVarPath = `/mempool/transaction`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MempoolTransactionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MempoolApi - functional programming interface
 * @export
 */
export const MempoolApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all Transaction Identifiers in the mempool
         * @summary Get All Mempool Transactions
         * @param {NetworkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mempool(body: NetworkRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MempoolResponse> {
            const localVarFetchArgs = MempoolApiFetchParamCreator(configuration).mempool(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
         * @summary Get a Mempool Transaction
         * @param {MempoolTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mempoolTransaction(body: MempoolTransactionRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MempoolTransactionResponse> {
            const localVarFetchArgs = MempoolApiFetchParamCreator(configuration).mempoolTransaction(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MempoolApi - factory interface
 * @export
 */
export const MempoolApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get all Transaction Identifiers in the mempool
         * @summary Get All Mempool Transactions
         * @param {NetworkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mempool(body: NetworkRequest, options?: any) {
            return MempoolApiFp(configuration).mempool(body, options)(fetch, basePath);
        },
        /**
         * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
         * @summary Get a Mempool Transaction
         * @param {MempoolTransactionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mempoolTransaction(body: MempoolTransactionRequest, options?: any) {
            return MempoolApiFp(configuration).mempoolTransaction(body, options)(fetch, basePath);
        },
    };
};

/**
 * MempoolApi - object-oriented interface
 * @export
 * @class MempoolApi
 * @extends {BaseAPI}
 */
export class MempoolApi extends BaseAPI {
    /**
     * Get all Transaction Identifiers in the mempool
     * @summary Get All Mempool Transactions
     * @param {NetworkRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MempoolApi
     */
    public mempool(body: NetworkRequest, options?: any) {
        return MempoolApiFp(this.configuration).mempool(body, options)(this.fetch, this.basePath);
    }

    /**
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     * @summary Get a Mempool Transaction
     * @param {MempoolTransactionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MempoolApi
     */
    public mempoolTransaction(body: MempoolTransactionRequest, options?: any) {
        return MempoolApiFp(this.configuration).mempoolTransaction(body, options)(this.fetch, this.basePath);
    }

}
/**
 * NetworkApi - fetch parameter creator
 * @export
 */
export const NetworkApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
         * @summary Get List of Available Networks
         * @param {MetadataRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkList(body: MetadataRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling networkList.');
            }
            const localVarPath = `/network/list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MetadataRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
         * @summary Get Network Options
         * @param {NetworkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkOptions(body: NetworkRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling networkOptions.');
            }
            const localVarPath = `/network/options`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NetworkRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
         * @summary Get Network Status
         * @param {NetworkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkStatus(body: NetworkRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling networkStatus.');
            }
            const localVarPath = `/network/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NetworkRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NetworkApi - functional programming interface
 * @export
 */
export const NetworkApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
         * @summary Get List of Available Networks
         * @param {MetadataRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkList(body: MetadataRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NetworkListResponse> {
            const localVarFetchArgs = NetworkApiFetchParamCreator(configuration).networkList(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
         * @summary Get Network Options
         * @param {NetworkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkOptions(body: NetworkRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NetworkOptionsResponse> {
            const localVarFetchArgs = NetworkApiFetchParamCreator(configuration).networkOptions(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
         * @summary Get Network Status
         * @param {NetworkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkStatus(body: NetworkRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NetworkStatusResponse> {
            const localVarFetchArgs = NetworkApiFetchParamCreator(configuration).networkStatus(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NetworkApi - factory interface
 * @export
 */
export const NetworkApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
         * @summary Get List of Available Networks
         * @param {MetadataRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkList(body: MetadataRequest, options?: any) {
            return NetworkApiFp(configuration).networkList(body, options)(fetch, basePath);
        },
        /**
         * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
         * @summary Get Network Options
         * @param {NetworkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkOptions(body: NetworkRequest, options?: any) {
            return NetworkApiFp(configuration).networkOptions(body, options)(fetch, basePath);
        },
        /**
         * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
         * @summary Get Network Status
         * @param {NetworkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkStatus(body: NetworkRequest, options?: any) {
            return NetworkApiFp(configuration).networkStatus(body, options)(fetch, basePath);
        },
    };
};

/**
 * NetworkApi - object-oriented interface
 * @export
 * @class NetworkApi
 * @extends {BaseAPI}
 */
export class NetworkApi extends BaseAPI {
    /**
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     * @summary Get List of Available Networks
     * @param {MetadataRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkList(body: MetadataRequest, options?: any) {
        return NetworkApiFp(this.configuration).networkList(body, options)(this.fetch, this.basePath);
    }

    /**
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * @summary Get Network Options
     * @param {NetworkRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkOptions(body: NetworkRequest, options?: any) {
        return NetworkApiFp(this.configuration).networkOptions(body, options)(this.fetch, this.basePath);
    }

    /**
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * @summary Get Network Status
     * @param {NetworkRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkStatus(body: NetworkRequest, options?: any) {
        return NetworkApiFp(this.configuration).networkStatus(body, options)(this.fetch, this.basePath);
    }

}
/**
 * SearchApi - fetch parameter creator
 * @export
 */
export const SearchApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * `/search/transactions` allows the caller to search for transactions that meet certain conditions. Some conditions include matching a transaction hash, containing an operation with a certain status, or containing an operation that affects a certain account. `/search/transactions` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
         * @summary [INDEXER] Search for Transactions
         * @param {SearchTransactionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTransactions(body: SearchTransactionsRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling searchTransactions.');
            }
            const localVarPath = `/search/transactions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SearchTransactionsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * `/search/transactions` allows the caller to search for transactions that meet certain conditions. Some conditions include matching a transaction hash, containing an operation with a certain status, or containing an operation that affects a certain account. `/search/transactions` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
         * @summary [INDEXER] Search for Transactions
         * @param {SearchTransactionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTransactions(body: SearchTransactionsRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchTransactionsResponse> {
            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).searchTransactions(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * `/search/transactions` allows the caller to search for transactions that meet certain conditions. Some conditions include matching a transaction hash, containing an operation with a certain status, or containing an operation that affects a certain account. `/search/transactions` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
         * @summary [INDEXER] Search for Transactions
         * @param {SearchTransactionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTransactions(body: SearchTransactionsRequest, options?: any) {
            return SearchApiFp(configuration).searchTransactions(body, options)(fetch, basePath);
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * `/search/transactions` allows the caller to search for transactions that meet certain conditions. Some conditions include matching a transaction hash, containing an operation with a certain status, or containing an operation that affects a certain account. `/search/transactions` is considered an \"indexer\" endpoint and Rosetta implementations are not required to complete it to adhere to the Rosetta spec. However, any Rosetta \"indexer\" MUST support this endpoint.
     * @summary [INDEXER] Search for Transactions
     * @param {SearchTransactionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchTransactions(body: SearchTransactionsRequest, options?: any) {
        return SearchApiFp(this.configuration).searchTransactions(body, options)(this.fetch, this.basePath);
    }

}
