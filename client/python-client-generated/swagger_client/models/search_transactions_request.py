# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    OpenAPI spec version: 1.4.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchTransactionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network_identifier': 'NetworkIdentifier',
        'operator': 'Operator',
        'max_block': 'int',
        'offset': 'int',
        'limit': 'int',
        'transaction_identifier': 'TransactionIdentifier',
        'account_identifier': 'AccountIdentifier',
        'coin_identifier': 'CoinIdentifier',
        'currency': 'Currency',
        'status': 'str',
        'type': 'str',
        'address': 'str',
        'success': 'bool'
    }

    attribute_map = {
        'network_identifier': 'network_identifier',
        'operator': 'operator',
        'max_block': 'max_block',
        'offset': 'offset',
        'limit': 'limit',
        'transaction_identifier': 'transaction_identifier',
        'account_identifier': 'account_identifier',
        'coin_identifier': 'coin_identifier',
        'currency': 'currency',
        'status': 'status',
        'type': 'type',
        'address': 'address',
        'success': 'success'
    }

    def __init__(self, network_identifier=None, operator=None, max_block=None, offset=None, limit=None, transaction_identifier=None, account_identifier=None, coin_identifier=None, currency=None, status=None, type=None, address=None, success=None):  # noqa: E501
        """SearchTransactionsRequest - a model defined in Swagger"""  # noqa: E501
        self._network_identifier = None
        self._operator = None
        self._max_block = None
        self._offset = None
        self._limit = None
        self._transaction_identifier = None
        self._account_identifier = None
        self._coin_identifier = None
        self._currency = None
        self._status = None
        self._type = None
        self._address = None
        self._success = None
        self.discriminator = None
        self.network_identifier = network_identifier
        if operator is not None:
            self.operator = operator
        if max_block is not None:
            self.max_block = max_block
        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit
        if transaction_identifier is not None:
            self.transaction_identifier = transaction_identifier
        if account_identifier is not None:
            self.account_identifier = account_identifier
        if coin_identifier is not None:
            self.coin_identifier = coin_identifier
        if currency is not None:
            self.currency = currency
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if address is not None:
            self.address = address
        if success is not None:
            self.success = success

    @property
    def network_identifier(self):
        """Gets the network_identifier of this SearchTransactionsRequest.  # noqa: E501


        :return: The network_identifier of this SearchTransactionsRequest.  # noqa: E501
        :rtype: NetworkIdentifier
        """
        return self._network_identifier

    @network_identifier.setter
    def network_identifier(self, network_identifier):
        """Sets the network_identifier of this SearchTransactionsRequest.


        :param network_identifier: The network_identifier of this SearchTransactionsRequest.  # noqa: E501
        :type: NetworkIdentifier
        """
        if network_identifier is None:
            raise ValueError("Invalid value for `network_identifier`, must not be `None`")  # noqa: E501

        self._network_identifier = network_identifier

    @property
    def operator(self):
        """Gets the operator of this SearchTransactionsRequest.  # noqa: E501


        :return: The operator of this SearchTransactionsRequest.  # noqa: E501
        :rtype: Operator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this SearchTransactionsRequest.


        :param operator: The operator of this SearchTransactionsRequest.  # noqa: E501
        :type: Operator
        """

        self._operator = operator

    @property
    def max_block(self):
        """Gets the max_block of this SearchTransactionsRequest.  # noqa: E501

        max_block is the largest block index to consider when searching for transactions. If this field is not populated, the current block is considered the max_block. If you do not specify a max_block, it is possible a newly synced block will interfere with paginated transaction queries (as the offset could become invalid with newly added rows).  # noqa: E501

        :return: The max_block of this SearchTransactionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_block

    @max_block.setter
    def max_block(self, max_block):
        """Sets the max_block of this SearchTransactionsRequest.

        max_block is the largest block index to consider when searching for transactions. If this field is not populated, the current block is considered the max_block. If you do not specify a max_block, it is possible a newly synced block will interfere with paginated transaction queries (as the offset could become invalid with newly added rows).  # noqa: E501

        :param max_block: The max_block of this SearchTransactionsRequest.  # noqa: E501
        :type: int
        """

        self._max_block = max_block

    @property
    def offset(self):
        """Gets the offset of this SearchTransactionsRequest.  # noqa: E501

        offset is the offset into the query result to start returning transactions. If any search conditions are changed, the query offset will change and you must restart your search iteration.  # noqa: E501

        :return: The offset of this SearchTransactionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchTransactionsRequest.

        offset is the offset into the query result to start returning transactions. If any search conditions are changed, the query offset will change and you must restart your search iteration.  # noqa: E501

        :param offset: The offset of this SearchTransactionsRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this SearchTransactionsRequest.  # noqa: E501

        limit is the maximum number of transactions to return in one call. The implementation may return <= limit transactions.  # noqa: E501

        :return: The limit of this SearchTransactionsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchTransactionsRequest.

        limit is the maximum number of transactions to return in one call. The implementation may return <= limit transactions.  # noqa: E501

        :param limit: The limit of this SearchTransactionsRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def transaction_identifier(self):
        """Gets the transaction_identifier of this SearchTransactionsRequest.  # noqa: E501


        :return: The transaction_identifier of this SearchTransactionsRequest.  # noqa: E501
        :rtype: TransactionIdentifier
        """
        return self._transaction_identifier

    @transaction_identifier.setter
    def transaction_identifier(self, transaction_identifier):
        """Sets the transaction_identifier of this SearchTransactionsRequest.


        :param transaction_identifier: The transaction_identifier of this SearchTransactionsRequest.  # noqa: E501
        :type: TransactionIdentifier
        """

        self._transaction_identifier = transaction_identifier

    @property
    def account_identifier(self):
        """Gets the account_identifier of this SearchTransactionsRequest.  # noqa: E501


        :return: The account_identifier of this SearchTransactionsRequest.  # noqa: E501
        :rtype: AccountIdentifier
        """
        return self._account_identifier

    @account_identifier.setter
    def account_identifier(self, account_identifier):
        """Sets the account_identifier of this SearchTransactionsRequest.


        :param account_identifier: The account_identifier of this SearchTransactionsRequest.  # noqa: E501
        :type: AccountIdentifier
        """

        self._account_identifier = account_identifier

    @property
    def coin_identifier(self):
        """Gets the coin_identifier of this SearchTransactionsRequest.  # noqa: E501


        :return: The coin_identifier of this SearchTransactionsRequest.  # noqa: E501
        :rtype: CoinIdentifier
        """
        return self._coin_identifier

    @coin_identifier.setter
    def coin_identifier(self, coin_identifier):
        """Sets the coin_identifier of this SearchTransactionsRequest.


        :param coin_identifier: The coin_identifier of this SearchTransactionsRequest.  # noqa: E501
        :type: CoinIdentifier
        """

        self._coin_identifier = coin_identifier

    @property
    def currency(self):
        """Gets the currency of this SearchTransactionsRequest.  # noqa: E501


        :return: The currency of this SearchTransactionsRequest.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SearchTransactionsRequest.


        :param currency: The currency of this SearchTransactionsRequest.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def status(self):
        """Gets the status of this SearchTransactionsRequest.  # noqa: E501

        status is the network-specific operation type.  # noqa: E501

        :return: The status of this SearchTransactionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SearchTransactionsRequest.

        status is the network-specific operation type.  # noqa: E501

        :param status: The status of this SearchTransactionsRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this SearchTransactionsRequest.  # noqa: E501

        type is the network-specific operation type.  # noqa: E501

        :return: The type of this SearchTransactionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchTransactionsRequest.

        type is the network-specific operation type.  # noqa: E501

        :param type: The type of this SearchTransactionsRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def address(self):
        """Gets the address of this SearchTransactionsRequest.  # noqa: E501

        address is AccountIdentifier.Address. This is used to get all transactions related to an AccountIdentifier.Address, regardless of SubAccountIdentifier.  # noqa: E501

        :return: The address of this SearchTransactionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SearchTransactionsRequest.

        address is AccountIdentifier.Address. This is used to get all transactions related to an AccountIdentifier.Address, regardless of SubAccountIdentifier.  # noqa: E501

        :param address: The address of this SearchTransactionsRequest.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def success(self):
        """Gets the success of this SearchTransactionsRequest.  # noqa: E501

        success is a synthetic condition populated by parsing network-specific operation statuses (using the mapping provided in `/network/options`).  # noqa: E501

        :return: The success of this SearchTransactionsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this SearchTransactionsRequest.

        success is a synthetic condition populated by parsing network-specific operation statuses (using the mapping provided in `/network/options`).  # noqa: E501

        :param success: The success of this SearchTransactionsRequest.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchTransactionsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchTransactionsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
