# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    OpenAPI spec version: 1.4.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchTransactionsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transactions': 'list[BlockTransaction]',
        'total_count': 'int',
        'next_offset': 'int'
    }

    attribute_map = {
        'transactions': 'transactions',
        'total_count': 'total_count',
        'next_offset': 'next_offset'
    }

    def __init__(self, transactions=None, total_count=None, next_offset=None):  # noqa: E501
        """SearchTransactionsResponse - a model defined in Swagger"""  # noqa: E501
        self._transactions = None
        self._total_count = None
        self._next_offset = None
        self.discriminator = None
        self.transactions = transactions
        self.total_count = total_count
        if next_offset is not None:
            self.next_offset = next_offset

    @property
    def transactions(self):
        """Gets the transactions of this SearchTransactionsResponse.  # noqa: E501

        transactions is an array of BlockTransactions sorted by most recent BlockIdentifier (meaning that transactions in recent blocks appear first). If there are many transactions for a particular search, transactions may not contain all matching transactions. It is up to the caller to paginate these transactions using the max_block field.  # noqa: E501

        :return: The transactions of this SearchTransactionsResponse.  # noqa: E501
        :rtype: list[BlockTransaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this SearchTransactionsResponse.

        transactions is an array of BlockTransactions sorted by most recent BlockIdentifier (meaning that transactions in recent blocks appear first). If there are many transactions for a particular search, transactions may not contain all matching transactions. It is up to the caller to paginate these transactions using the max_block field.  # noqa: E501

        :param transactions: The transactions of this SearchTransactionsResponse.  # noqa: E501
        :type: list[BlockTransaction]
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions

    @property
    def total_count(self):
        """Gets the total_count of this SearchTransactionsResponse.  # noqa: E501

        total_count is the number of results for a given search. Callers typically use this value to concurrently fetch results by offset or to display a virtual page number associated with results.  # noqa: E501

        :return: The total_count of this SearchTransactionsResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this SearchTransactionsResponse.

        total_count is the number of results for a given search. Callers typically use this value to concurrently fetch results by offset or to display a virtual page number associated with results.  # noqa: E501

        :param total_count: The total_count of this SearchTransactionsResponse.  # noqa: E501
        :type: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    @property
    def next_offset(self):
        """Gets the next_offset of this SearchTransactionsResponse.  # noqa: E501

        next_offset is the next offset to use when paginating through transaction results. If this field is not populated, there are no more transactions to query.  # noqa: E501

        :return: The next_offset of this SearchTransactionsResponse.  # noqa: E501
        :rtype: int
        """
        return self._next_offset

    @next_offset.setter
    def next_offset(self, next_offset):
        """Sets the next_offset of this SearchTransactionsResponse.

        next_offset is the next offset to use when paginating through transaction results. If this field is not populated, there are no more transactions to query.  # noqa: E501

        :param next_offset: The next_offset of this SearchTransactionsResponse.  # noqa: E501
        :type: int
        """

        self._next_offset = next_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchTransactionsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchTransactionsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
