# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    OpenAPI spec version: 1.4.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Operation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation_identifier': 'OperationIdentifier',
        'related_operations': 'list[OperationIdentifier]',
        'type': 'str',
        'status': 'str',
        'account': 'AccountIdentifier',
        'amount': 'Amount',
        'coin_change': 'CoinChange',
        'metadata': 'object'
    }

    attribute_map = {
        'operation_identifier': 'operation_identifier',
        'related_operations': 'related_operations',
        'type': 'type',
        'status': 'status',
        'account': 'account',
        'amount': 'amount',
        'coin_change': 'coin_change',
        'metadata': 'metadata'
    }

    def __init__(self, operation_identifier=None, related_operations=None, type=None, status=None, account=None, amount=None, coin_change=None, metadata=None):  # noqa: E501
        """Operation - a model defined in Swagger"""  # noqa: E501
        self._operation_identifier = None
        self._related_operations = None
        self._type = None
        self._status = None
        self._account = None
        self._amount = None
        self._coin_change = None
        self._metadata = None
        self.discriminator = None
        self.operation_identifier = operation_identifier
        if related_operations is not None:
            self.related_operations = related_operations
        self.type = type
        if status is not None:
            self.status = status
        if account is not None:
            self.account = account
        if amount is not None:
            self.amount = amount
        if coin_change is not None:
            self.coin_change = coin_change
        if metadata is not None:
            self.metadata = metadata

    @property
    def operation_identifier(self):
        """Gets the operation_identifier of this Operation.  # noqa: E501


        :return: The operation_identifier of this Operation.  # noqa: E501
        :rtype: OperationIdentifier
        """
        return self._operation_identifier

    @operation_identifier.setter
    def operation_identifier(self, operation_identifier):
        """Sets the operation_identifier of this Operation.


        :param operation_identifier: The operation_identifier of this Operation.  # noqa: E501
        :type: OperationIdentifier
        """
        if operation_identifier is None:
            raise ValueError("Invalid value for `operation_identifier`, must not be `None`")  # noqa: E501

        self._operation_identifier = operation_identifier

    @property
    def related_operations(self):
        """Gets the related_operations of this Operation.  # noqa: E501

        Restrict referenced related_operations to identifier indices < the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.  # noqa: E501

        :return: The related_operations of this Operation.  # noqa: E501
        :rtype: list[OperationIdentifier]
        """
        return self._related_operations

    @related_operations.setter
    def related_operations(self, related_operations):
        """Sets the related_operations of this Operation.

        Restrict referenced related_operations to identifier indices < the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations. Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.  # noqa: E501

        :param related_operations: The related_operations of this Operation.  # noqa: E501
        :type: list[OperationIdentifier]
        """

        self._related_operations = related_operations

    @property
    def type(self):
        """Gets the type of this Operation.  # noqa: E501

        Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data.  # noqa: E501

        :return: The type of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Operation.

        Type is the network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetworkOptionsResponse. This can be very useful to downstream consumers that parse all block data.  # noqa: E501

        :param type: The type of this Operation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def status(self):
        """Gets the status of this Operation.  # noqa: E501

        Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the `/block` and `/block/transaction` endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called \"intent\" in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed).  # noqa: E501

        :return: The status of this Operation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Operation.

        Status is the network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply (some operations are successful and some are not). Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation. On-chain operations (operations retrieved in the `/block` and `/block/transaction` endpoints) MUST have a populated status field (anything on-chain must have succeeded or failed). However, operations provided during transaction construction (often times called \"intent\" in the documentation) MUST NOT have a populated status field (operations yet to be included on-chain have not yet succeeded or failed).  # noqa: E501

        :param status: The status of this Operation.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def account(self):
        """Gets the account of this Operation.  # noqa: E501


        :return: The account of this Operation.  # noqa: E501
        :rtype: AccountIdentifier
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Operation.


        :param account: The account of this Operation.  # noqa: E501
        :type: AccountIdentifier
        """

        self._account = account

    @property
    def amount(self):
        """Gets the amount of this Operation.  # noqa: E501


        :return: The amount of this Operation.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Operation.


        :param amount: The amount of this Operation.  # noqa: E501
        :type: Amount
        """

        self._amount = amount

    @property
    def coin_change(self):
        """Gets the coin_change of this Operation.  # noqa: E501


        :return: The coin_change of this Operation.  # noqa: E501
        :rtype: CoinChange
        """
        return self._coin_change

    @coin_change.setter
    def coin_change(self, coin_change):
        """Sets the coin_change of this Operation.


        :param coin_change: The coin_change of this Operation.  # noqa: E501
        :type: CoinChange
        """

        self._coin_change = coin_change

    @property
    def metadata(self):
        """Gets the metadata of this Operation.  # noqa: E501


        :return: The metadata of this Operation.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Operation.


        :param metadata: The metadata of this Operation.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Operation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Operation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
