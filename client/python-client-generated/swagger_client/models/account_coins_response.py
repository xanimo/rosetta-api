# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    OpenAPI spec version: 1.4.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountCoinsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_identifier': 'BlockIdentifier',
        'coins': 'list[Coin]',
        'metadata': 'object'
    }

    attribute_map = {
        'block_identifier': 'block_identifier',
        'coins': 'coins',
        'metadata': 'metadata'
    }

    def __init__(self, block_identifier=None, coins=None, metadata=None):  # noqa: E501
        """AccountCoinsResponse - a model defined in Swagger"""  # noqa: E501
        self._block_identifier = None
        self._coins = None
        self._metadata = None
        self.discriminator = None
        self.block_identifier = block_identifier
        self.coins = coins
        if metadata is not None:
            self.metadata = metadata

    @property
    def block_identifier(self):
        """Gets the block_identifier of this AccountCoinsResponse.  # noqa: E501


        :return: The block_identifier of this AccountCoinsResponse.  # noqa: E501
        :rtype: BlockIdentifier
        """
        return self._block_identifier

    @block_identifier.setter
    def block_identifier(self, block_identifier):
        """Sets the block_identifier of this AccountCoinsResponse.


        :param block_identifier: The block_identifier of this AccountCoinsResponse.  # noqa: E501
        :type: BlockIdentifier
        """
        if block_identifier is None:
            raise ValueError("Invalid value for `block_identifier`, must not be `None`")  # noqa: E501

        self._block_identifier = block_identifier

    @property
    def coins(self):
        """Gets the coins of this AccountCoinsResponse.  # noqa: E501

        If a blockchain is UTXO-based, all unspent Coins owned by an account_identifier should be returned alongside the balance. It is highly recommended to populate this field so that users of the Rosetta API implementation don't need to maintain their own indexer to track their UTXOs.  # noqa: E501

        :return: The coins of this AccountCoinsResponse.  # noqa: E501
        :rtype: list[Coin]
        """
        return self._coins

    @coins.setter
    def coins(self, coins):
        """Sets the coins of this AccountCoinsResponse.

        If a blockchain is UTXO-based, all unspent Coins owned by an account_identifier should be returned alongside the balance. It is highly recommended to populate this field so that users of the Rosetta API implementation don't need to maintain their own indexer to track their UTXOs.  # noqa: E501

        :param coins: The coins of this AccountCoinsResponse.  # noqa: E501
        :type: list[Coin]
        """
        if coins is None:
            raise ValueError("Invalid value for `coins`, must not be `None`")  # noqa: E501

        self._coins = coins

    @property
    def metadata(self):
        """Gets the metadata of this AccountCoinsResponse.  # noqa: E501

        Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.  # noqa: E501

        :return: The metadata of this AccountCoinsResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AccountCoinsResponse.

        Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.  # noqa: E501

        :param metadata: The metadata of this AccountCoinsResponse.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountCoinsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCoinsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
