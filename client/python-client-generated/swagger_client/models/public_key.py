# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    OpenAPI spec version: 1.4.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hex_bytes': 'str',
        'curve_type': 'CurveType'
    }

    attribute_map = {
        'hex_bytes': 'hex_bytes',
        'curve_type': 'curve_type'
    }

    def __init__(self, hex_bytes=None, curve_type=None):  # noqa: E501
        """PublicKey - a model defined in Swagger"""  # noqa: E501
        self._hex_bytes = None
        self._curve_type = None
        self.discriminator = None
        self.hex_bytes = hex_bytes
        self.curve_type = curve_type

    @property
    def hex_bytes(self):
        """Gets the hex_bytes of this PublicKey.  # noqa: E501

        Hex-encoded public key bytes in the format specified by the CurveType.  # noqa: E501

        :return: The hex_bytes of this PublicKey.  # noqa: E501
        :rtype: str
        """
        return self._hex_bytes

    @hex_bytes.setter
    def hex_bytes(self, hex_bytes):
        """Sets the hex_bytes of this PublicKey.

        Hex-encoded public key bytes in the format specified by the CurveType.  # noqa: E501

        :param hex_bytes: The hex_bytes of this PublicKey.  # noqa: E501
        :type: str
        """
        if hex_bytes is None:
            raise ValueError("Invalid value for `hex_bytes`, must not be `None`")  # noqa: E501

        self._hex_bytes = hex_bytes

    @property
    def curve_type(self):
        """Gets the curve_type of this PublicKey.  # noqa: E501


        :return: The curve_type of this PublicKey.  # noqa: E501
        :rtype: CurveType
        """
        return self._curve_type

    @curve_type.setter
    def curve_type(self, curve_type):
        """Sets the curve_type of this PublicKey.


        :param curve_type: The curve_type of this PublicKey.  # noqa: E501
        :type: CurveType
        """
        if curve_type is None:
            raise ValueError("Invalid value for `curve_type`, must not be `None`")  # noqa: E501

        self._curve_type = curve_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
