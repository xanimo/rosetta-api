# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    OpenAPI spec version: 1.4.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConstructionParseRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network_identifier': 'NetworkIdentifier',
        'signed': 'bool',
        'transaction': 'str'
    }

    attribute_map = {
        'network_identifier': 'network_identifier',
        'signed': 'signed',
        'transaction': 'transaction'
    }

    def __init__(self, network_identifier=None, signed=None, transaction=None):  # noqa: E501
        """ConstructionParseRequest - a model defined in Swagger"""  # noqa: E501
        self._network_identifier = None
        self._signed = None
        self._transaction = None
        self.discriminator = None
        self.network_identifier = network_identifier
        self.signed = signed
        self.transaction = transaction

    @property
    def network_identifier(self):
        """Gets the network_identifier of this ConstructionParseRequest.  # noqa: E501


        :return: The network_identifier of this ConstructionParseRequest.  # noqa: E501
        :rtype: NetworkIdentifier
        """
        return self._network_identifier

    @network_identifier.setter
    def network_identifier(self, network_identifier):
        """Sets the network_identifier of this ConstructionParseRequest.


        :param network_identifier: The network_identifier of this ConstructionParseRequest.  # noqa: E501
        :type: NetworkIdentifier
        """
        if network_identifier is None:
            raise ValueError("Invalid value for `network_identifier`, must not be `None`")  # noqa: E501

        self._network_identifier = network_identifier

    @property
    def signed(self):
        """Gets the signed of this ConstructionParseRequest.  # noqa: E501

        Signed is a boolean indicating whether the transaction is signed.  # noqa: E501

        :return: The signed of this ConstructionParseRequest.  # noqa: E501
        :rtype: bool
        """
        return self._signed

    @signed.setter
    def signed(self, signed):
        """Sets the signed of this ConstructionParseRequest.

        Signed is a boolean indicating whether the transaction is signed.  # noqa: E501

        :param signed: The signed of this ConstructionParseRequest.  # noqa: E501
        :type: bool
        """
        if signed is None:
            raise ValueError("Invalid value for `signed`, must not be `None`")  # noqa: E501

        self._signed = signed

    @property
    def transaction(self):
        """Gets the transaction of this ConstructionParseRequest.  # noqa: E501

        This must be either the unsigned transaction blob returned by `/construction/payloads` or the signed transaction blob returned by `/construction/combine`.  # noqa: E501

        :return: The transaction of this ConstructionParseRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this ConstructionParseRequest.

        This must be either the unsigned transaction blob returned by `/construction/payloads` or the signed transaction blob returned by `/construction/combine`.  # noqa: E501

        :param transaction: The transaction of this ConstructionParseRequest.  # noqa: E501
        :type: str
        """
        if transaction is None:
            raise ValueError("Invalid value for `transaction`, must not be `None`")  # noqa: E501

        self._transaction = transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConstructionParseRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConstructionParseRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
