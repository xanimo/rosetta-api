# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    OpenAPI spec version: 1.4.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Version(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rosetta_version': 'str',
        'node_version': 'str',
        'middleware_version': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'rosetta_version': 'rosetta_version',
        'node_version': 'node_version',
        'middleware_version': 'middleware_version',
        'metadata': 'metadata'
    }

    def __init__(self, rosetta_version=None, node_version=None, middleware_version=None, metadata=None):  # noqa: E501
        """Version - a model defined in Swagger"""  # noqa: E501
        self._rosetta_version = None
        self._node_version = None
        self._middleware_version = None
        self._metadata = None
        self.discriminator = None
        self.rosetta_version = rosetta_version
        self.node_version = node_version
        if middleware_version is not None:
            self.middleware_version = middleware_version
        if metadata is not None:
            self.metadata = metadata

    @property
    def rosetta_version(self):
        """Gets the rosetta_version of this Version.  # noqa: E501

        The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.  # noqa: E501

        :return: The rosetta_version of this Version.  # noqa: E501
        :rtype: str
        """
        return self._rosetta_version

    @rosetta_version.setter
    def rosetta_version(self, rosetta_version):
        """Sets the rosetta_version of this Version.

        The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.  # noqa: E501

        :param rosetta_version: The rosetta_version of this Version.  # noqa: E501
        :type: str
        """
        if rosetta_version is None:
            raise ValueError("Invalid value for `rosetta_version`, must not be `None`")  # noqa: E501

        self._rosetta_version = rosetta_version

    @property
    def node_version(self):
        """Gets the node_version of this Version.  # noqa: E501

        The node_version is the canonical version of the node runtime. This can help clients manage deployments.  # noqa: E501

        :return: The node_version of this Version.  # noqa: E501
        :rtype: str
        """
        return self._node_version

    @node_version.setter
    def node_version(self, node_version):
        """Sets the node_version of this Version.

        The node_version is the canonical version of the node runtime. This can help clients manage deployments.  # noqa: E501

        :param node_version: The node_version of this Version.  # noqa: E501
        :type: str
        """
        if node_version is None:
            raise ValueError("Invalid value for `node_version`, must not be `None`")  # noqa: E501

        self._node_version = node_version

    @property
    def middleware_version(self):
        """Gets the middleware_version of this Version.  # noqa: E501

        When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.  # noqa: E501

        :return: The middleware_version of this Version.  # noqa: E501
        :rtype: str
        """
        return self._middleware_version

    @middleware_version.setter
    def middleware_version(self, middleware_version):
        """Sets the middleware_version of this Version.

        When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.  # noqa: E501

        :param middleware_version: The middleware_version of this Version.  # noqa: E501
        :type: str
        """

        self._middleware_version = middleware_version

    @property
    def metadata(self):
        """Gets the metadata of this Version.  # noqa: E501

        Any other information that may be useful about versioning of dependent services should be returned here.  # noqa: E501

        :return: The metadata of this Version.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Version.

        Any other information that may be useful about versioning of dependent services should be returned here.  # noqa: E501

        :param metadata: The metadata of this Version.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Version, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Version):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
