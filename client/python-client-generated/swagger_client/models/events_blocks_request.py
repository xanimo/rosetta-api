# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    OpenAPI spec version: 1.4.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventsBlocksRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network_identifier': 'NetworkIdentifier',
        'offset': 'int',
        'limit': 'int'
    }

    attribute_map = {
        'network_identifier': 'network_identifier',
        'offset': 'offset',
        'limit': 'limit'
    }

    def __init__(self, network_identifier=None, offset=None, limit=None):  # noqa: E501
        """EventsBlocksRequest - a model defined in Swagger"""  # noqa: E501
        self._network_identifier = None
        self._offset = None
        self._limit = None
        self.discriminator = None
        self.network_identifier = network_identifier
        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit

    @property
    def network_identifier(self):
        """Gets the network_identifier of this EventsBlocksRequest.  # noqa: E501


        :return: The network_identifier of this EventsBlocksRequest.  # noqa: E501
        :rtype: NetworkIdentifier
        """
        return self._network_identifier

    @network_identifier.setter
    def network_identifier(self, network_identifier):
        """Sets the network_identifier of this EventsBlocksRequest.


        :param network_identifier: The network_identifier of this EventsBlocksRequest.  # noqa: E501
        :type: NetworkIdentifier
        """
        if network_identifier is None:
            raise ValueError("Invalid value for `network_identifier`, must not be `None`")  # noqa: E501

        self._network_identifier = network_identifier

    @property
    def offset(self):
        """Gets the offset of this EventsBlocksRequest.  # noqa: E501

        offset is the offset into the event stream to sync events from. If this field is not populated, we return the limit events backwards from tip. If this is set to 0, we start from the beginning.  # noqa: E501

        :return: The offset of this EventsBlocksRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this EventsBlocksRequest.

        offset is the offset into the event stream to sync events from. If this field is not populated, we return the limit events backwards from tip. If this is set to 0, we start from the beginning.  # noqa: E501

        :param offset: The offset of this EventsBlocksRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this EventsBlocksRequest.  # noqa: E501

        limit is the maximum number of events to fetch in one call. The implementation may return <= limit events.  # noqa: E501

        :return: The limit of this EventsBlocksRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this EventsBlocksRequest.

        limit is the maximum number of events to fetch in one call. The implementation may return <= limit events.  # noqa: E501

        :param limit: The limit of this EventsBlocksRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventsBlocksRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsBlocksRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
